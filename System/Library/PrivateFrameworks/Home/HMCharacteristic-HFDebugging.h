//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <HomeKit/HMCharacteristic.h>

#import <Home/HFHomeKitObject-Protocol.h>
#import <Home/HFStateDumpBuildable-Protocol.h>

@class NSString, NSUUID;

@interface HMCharacteristic (HFDebugging) <HFStateDumpBuildable, HFHomeKitObject>
+ (id)hf_descriptionForProperties:(id)arg1;	// IMP=0x00000000000751dc
+ (id)_hf_visibleLightLevelTriggerValues;	// IMP=0x00000000001f8c49
+ (long long)_hf_indexOfSortedValues:(id)arg1 closestToValue:(id)arg2 top:(unsigned long long)arg3 bottom:(unsigned long long)arg4;	// IMP=0x00000000001f80a0
+ (long long)hf_indexOfSortedValues:(id)arg1 closestToValue:(id)arg2;	// IMP=0x00000000001f8001
+ (_Bool)hf_shouldCaptureCharacteristicTypeInActionSets:(id)arg1;	// IMP=0x00000000001f6362
+ (CDUnknownBlockType)hf_characteristicSortComparator;	// IMP=0x00000000001f600d
+ (long long)hf_sortPriorityForCharacteristicType:(id)arg1;	// IMP=0x00000000001f547d
+ (id)hf_currentStateCharacteristicTypeForTargetStateCharacteristicType:(id)arg1;	// IMP=0x00000000001f529f
+ (id)hf_targetStateCharacteristicTypeForCurrentStateCharacteristicType:(id)arg1;	// IMP=0x00000000001f50c1
+ (id)hf_associatedCharacteristicTypeForCharacteristicType:(id)arg1;	// IMP=0x00000000001f504c
+ (id)hf_descriptionForCharacteristicType:(id)arg1;	// IMP=0x00000000001f4e17
+ (id)_hf_valueRangeCharacteristicTypeToVisibleTriggerValueStepMap;	// IMP=0x00000000001f4ce6
+ (id)_hf_valueRangeCharacteristicTypeToAbnormalValueMap;	// IMP=0x00000000001f4b2d
+ (id)_hf_alarmCharacteristicTypeToAbnormalValueMap;	// IMP=0x00000000001f4995
+ (id)hf_abnormalValueForSensorCharacteristicType:(id)arg1;	// IMP=0x00000000001f490c
+ (id)hf_defaultAbnormalValueForValueRangeSensorCharacteristicType:(id)arg1;	// IMP=0x00000000001f4889
+ (id)hf_abnormalValueForAlarmCharacteristicType:(id)arg1;	// IMP=0x00000000001f4806
+ (id)hf_sensingCharacteristicTypes;	// IMP=0x00000000001f4688
+ (id)hf_alarmCharacteristicTypes;	// IMP=0x00000000001f453b
+ (id)hf_continuousValueRangeCharacteristicTypes;	// IMP=0x00000000001f43e6
+ (id)hf_valueRangeCharacteristicTypes;	// IMP=0x00000000001f4299
+ (id)hf_powerStateCharacteristicTypes;	// IMP=0x00000000001f420a
+ (id)hf_suggestionVendorForCharacteristicType:(id)arg1;	// IMP=0x00000000001f8caa
- (id)hf_stateDumpBuilderWithContext:(id)arg1;	// IMP=0x0000000000075491
- (id)_hf_stepValue;	// IMP=0x00000000001f8a5b
- (id)_hf_triggerValuesWithMinStepValue:(id)arg1;	// IMP=0x00000000001f86bc
- (id)_hf_lightLevelVisibleTriggerValues;	// IMP=0x00000000001f8360
- (id)hf_visibleTriggerValues;	// IMP=0x00000000001f7ecb
- (id)hf_triggerValues;	// IMP=0x00000000001f7c21
- (id)hf_maximumTriggerValue;	// IMP=0x00000000001f7bd1
- (id)hf_minimumTriggerValue;	// IMP=0x00000000001f7b2d
- (id)hf_thresholdValueForRange:(id)arg1;	// IMP=0x00000000001f7893
- (id)hf_valueAfterTriggerValue:(id)arg1;	// IMP=0x00000000001f77cb
- (id)hf_valueBeforeTriggerValue:(id)arg1;	// IMP=0x00000000001f771b
- (id)hf_programmableSwitchTriggerValueToEventTriggersMap;	// IMP=0x00000000001f7368
- (id)hf_designatedEventTriggerForProgrammableSwitchWithTriggerValue:(id)arg1;	// IMP=0x00000000001f722e
- (id)hf_eventTriggersForTriggerValue:(id)arg1;	// IMP=0x00000000001f6d6f
- (id)hf_eventTriggers;	// IMP=0x00000000001f69e5
- (id)hf_home;	// IMP=0x00000000001f696b
- (id)hf_programmableSwitchValidValueSet;	// IMP=0x00000000001f654d
- (_Bool)hf_shouldCaptureInActionSets;	// IMP=0x00000000001f64c3
- (long long)hf_sortPriority;	// IMP=0x00000000001f5faf
- (id)hf_associatedCharacteristicType;	// IMP=0x00000000001f4fe2
- (id)hf_defaultValue;	// IMP=0x00000000001f4f04
- (_Bool)hf_isReadable;	// IMP=0x00000000001f4eb6
- (_Bool)hf_isWritable;	// IMP=0x00000000001f4e68
- (id)hf_characteristicTypeDescription;	// IMP=0x00000000001f4dad

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;
@property(readonly, copy, nonatomic) NSUUID *uniqueIdentifier;
@end

