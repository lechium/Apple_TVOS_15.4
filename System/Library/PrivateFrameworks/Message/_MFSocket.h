//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MFStream, NSArray, NSCondition, NSData, NSInvocation, NSString;

@interface _MFSocket : NSObject
{
    NSCondition *_condition;	// 8 = 0x8
    MFStream *_stream;	// 16 = 0x10
    NSString *_protocol;	// 24 = 0x18
    NSString *_host;	// 32 = 0x20
    NSString *_service;	// 40 = 0x28
    struct __CFString *_connectionServiceType;	// 48 = 0x30
    NSInvocation *_eventHandler;	// 56 = 0x38
    NSArray *_clientCertificates;	// 64 = 0x40
    int _lowThroughputCounter;	// 72 = 0x48
    int _numTimeoutSecs;	// 76 = 0x4c
    _Bool _allowsTrustPrompt;	// 80 = 0x50
    _Bool _usesOpportunisticSockets;	// 81 = 0x51
    _Bool _socketCanRead;	// 82 = 0x52
    _Bool _socketCanWrite;	// 83 = 0x53
    _Bool _disableEphemeralDiffieHellmanCiphers;	// 84 = 0x54
    NSString *_sourceApplicationBundleIdentifier;	// 88 = 0x58
    NSString *_accountIdentifier;	// 96 = 0x60
}

@property(copy, nonatomic) NSString *accountIdentifier; // @synthesize accountIdentifier=_accountIdentifier;
@property(copy, nonatomic) NSString *sourceApplicationBundleIdentifier; // @synthesize sourceApplicationBundleIdentifier=_sourceApplicationBundleIdentifier;
@property(retain, nonatomic) NSArray *clientCertificates; // @synthesize clientCertificates=_clientCertificates;
@property(nonatomic) _Bool disableEphemeralDiffieHellmanCiphers; // @synthesize disableEphemeralDiffieHellmanCiphers=_disableEphemeralDiffieHellmanCiphers;
@property(nonatomic) _Bool usesOpportunisticSockets; // @synthesize usesOpportunisticSockets=_usesOpportunisticSockets;
@property(nonatomic) _Bool allowsTrustPrompt; // @synthesize allowsTrustPrompt=_allowsTrustPrompt;
@property(nonatomic) int timeout; // @synthesize timeout=_numTimeoutSecs;
- (void)enableThroughputMonitoring:(_Bool)arg1;	// IMP=0x000000000008e9f8
@property(readonly, nonatomic) _Bool isCellularConnection;
@property(readonly, nonatomic) NSData *sourceIPAddress;
@property(readonly, nonatomic) unsigned int remotePortNumber;
@property(readonly, nonatomic) NSString *remoteHostname;
- (void)setEventHandler:(id)arg1;	// IMP=0x000000000008e81d
- (long long)readBytes:(char *)arg1 length:(unsigned long long)arg2;	// IMP=0x000000000008e3e1
- (long long)writeBytes:(const char *)arg1 length:(unsigned long long)arg2;	// IMP=0x000000000008e0c5
- (unsigned int)_bufferedByteCount;	// IMP=0x000000000008e015
- (_Bool)connectToHost:(id)arg1 withPort:(unsigned int)arg2 service:(id)arg3;	// IMP=0x000000000008d67d
@property(readonly, nonatomic) _Bool isValid;
@property(readonly, nonatomic) _Bool isWritable;
@property(readonly, nonatomic) _Bool isReadable;
- (void)abort;	// IMP=0x000000000008d5c4
- (void)dealloc;	// IMP=0x000000000008d53d
- (id)init;	// IMP=0x000000000008d370
- (void)setConnectionServiceType:(struct __CFString *)arg1;	// IMP=0x000000000008d31a
@property(readonly, nonatomic) NSArray *serverCertificates;
- (_Bool)setSecurityProtocol:(id)arg1;	// IMP=0x000000000008d061
- (id)securityProtocol;	// IMP=0x000000000008d009
- (_Bool)_waitForSocketOpenAndFlag:(_Bool *)arg1;	// IMP=0x000000000008cf4e
- (_Bool)_startSSLHandshakeWithProtocol:(id)arg1 errorPtr:(id *)arg2;	// IMP=0x000000000008c624
- (id)_negotiatedProtocolVersion;	// IMP=0x000000000008c52b
- (_Bool)_evaluateTrust:(struct __SecTrust *)arg1 errorPtr:(id *)arg2;	// IMP=0x000000000008be15
- (void)_setCertificateIsTrusted:(_Bool)arg1 forAccount:(id)arg2;	// IMP=0x000000000008bdc6
- (_Bool)_certificateIsTrustedForAccount:(id)arg1;	// IMP=0x000000000008bd8e

@end

