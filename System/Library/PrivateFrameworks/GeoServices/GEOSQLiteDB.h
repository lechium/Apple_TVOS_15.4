//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSDictionary, NSError, NSMapTable, NSMutableArray, NSString, NSURL;
@protocol OS_dispatch_group, OS_dispatch_queue, OS_os_log;

@interface GEOSQLiteDB : NSObject
{
    NSObject<OS_os_log> *_log;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_externalFilesQueue;	// 16 = 0x10
    NSObject<OS_dispatch_group> *_externalFilesGroup;	// 24 = 0x18
    NSMutableArray *_externalFilesActiveChannels;	// 32 = 0x20
    _Bool _didEncounterExternalResourceErrorInTransaction;	// 40 = 0x28
    struct sqlite3 *_db;	// 48 = 0x30
    NSError *_lastError;	// 56 = 0x38
    NSURL *_databaseFileURL;	// 64 = 0x40
    int _sqliteFlags;	// 72 = 0x48
    NSDictionary *_pragmas;	// 80 = 0x50
    CDUnknownBlockType _setupBlock;	// 88 = 0x58
    NSObject<OS_dispatch_queue> *_queue;	// 96 = 0x60
    NSMapTable *_preparedStatements;	// 104 = 0x68
    _Bool _isInTransaction;	// 112 = 0x70
    _Bool _isTemporaryInMemoryDatabase;	// 113 = 0x71
    NSMutableArray *_filesAddedDuringTransaction;	// 120 = 0x78
    NSMutableArray *_filesDeletedDuringTransaction;	// 128 = 0x80
    NSMapTable *_virtualTables;	// 136 = 0x88
    struct atomic_flag _didTearDown;	// 144 = 0x90
}

+ (_Bool)renameAllDBFilesFrom:(id)arg1 to:(id)arg2;	// IMP=0x000000000060d473
+ (id)_findAllDBFilesForURL:(id)arg1 error:(id *)arg2;	// IMP=0x000000000060cd11
+ (id)defaultPragmas;	// IMP=0x000000000060b9ee
- (void).cxx_destruct;	// IMP=0x0000000000610a75
@property(readonly, nonatomic) NSObject<OS_os_log> *log; // @synthesize log=_log;
@property(readonly, nonatomic) NSError *lastError; // @synthesize lastError=_lastError;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *isolationQueue; // @synthesize isolationQueue=_queue;
@property(readonly, nonatomic) int sqliteFlags; // @synthesize sqliteFlags=_sqliteFlags;
@property(readonly, nonatomic) struct sqlite3 *sqliteDB; // @synthesize sqliteDB=_db;
@property(readonly, nonatomic) NSURL *databaseFileURL; // @synthesize databaseFileURL=_databaseFileURL;
- (_Bool)writeBlobData:(id)arg1 toTable:(const char *)arg2 column:(const char *)arg3 rowID:(long long)arg4 error:(id *)arg5;	// IMP=0x0000000000610853
- (long long)lastInsertRowID;	// IMP=0x0000000000610839
- (_Bool)deleteExternalResourceAtURL:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000610763
- (_Bool)moveExternalResourceAtURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000610665
- (_Bool)writeExternalResourceWithData:(id)arg1 toURL:(id)arg2 error:(id *)arg3;	// IMP=0x000000000061054c
- (_Bool)reportSQLiteErrorCode:(int)arg1 method:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000610295
- (id)noCopyBlobForColumn:(int)arg1 inStatment:(struct sqlite3_stmt *)arg2;	// IMP=0x000000000061027d
- (id)blobForColumn:(int)arg1 inStatment:(struct sqlite3_stmt *)arg2;	// IMP=0x0000000000610268
- (id)_blobForColumn:(int)arg1 inStatment:(struct sqlite3_stmt *)arg2 noCopy:(_Bool)arg3;	// IMP=0x00000000006101bd
- (id)stringForColumn:(int)arg1 inStatment:(struct sqlite3_stmt *)arg2;	// IMP=0x0000000000610155
- (double)doubleForColumn:(int)arg1 inStatment:(struct sqlite3_stmt *)arg2;	// IMP=0x000000000061010f
- (long long)int64ForColumn:(int)arg1 inStatment:(struct sqlite3_stmt *)arg2;	// IMP=0x00000000006100ca
- (int)intForColumn:(int)arg1 inStatment:(struct sqlite3_stmt *)arg2;	// IMP=0x0000000000610085
- (_Bool)executeInTransaction:(CDUnknownBlockType)arg1;	// IMP=0x000000000060fa1c
- (_Bool)vacuum;	// IMP=0x000000000060f993
- (_Bool)executeStatement:(id)arg1 statementBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000000060f7e8
- (_Bool)executeStatement:(struct sqlite3_stmt *)arg1 error:(id *)arg2;	// IMP=0x000000000060f6d7
- (_Bool)bindRealParameter:(const char *)arg1 toValue:(double)arg2 inStatement:(struct sqlite3_stmt *)arg3 error:(id *)arg4;	// IMP=0x000000000060f66f
- (_Bool)bindInt64Parameter:(const char *)arg1 toValue:(long long)arg2 inStatement:(struct sqlite3_stmt *)arg3 error:(id *)arg4;	// IMP=0x000000000060f601
- (_Bool)bindIntParameter:(const char *)arg1 toValue:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3 error:(id *)arg4;	// IMP=0x000000000060f594
- (_Bool)bindNullParameter:(const char *)arg1 inStatement:(struct sqlite3_stmt *)arg2 error:(id *)arg3;	// IMP=0x000000000060f53a
- (_Bool)bindZeroBlobParameter:(const char *)arg1 length:(unsigned long long)arg2 inStatement:(struct sqlite3_stmt *)arg3 error:(id *)arg4;	// IMP=0x000000000060f4cc
- (_Bool)bindBlobNoCopyParameter:(const char *)arg1 toValue:(id)arg2 inStatement:(struct sqlite3_stmt *)arg3 error:(id *)arg4;	// IMP=0x000000000060f39a
- (_Bool)bindBlobParameter:(const char *)arg1 toValue:(id)arg2 inStatement:(struct sqlite3_stmt *)arg3 error:(id *)arg4;	// IMP=0x000000000060f264
- (_Bool)bindTextParameter:(const char *)arg1 toValue:(id)arg2 inStatement:(struct sqlite3_stmt *)arg3 error:(id *)arg4;	// IMP=0x000000000060f16a
- (_Bool)_bindParameter:(const char *)arg1 inStatement:(struct sqlite3_stmt *)arg2 error:(id *)arg3 withBinder:(CDUnknownBlockType)arg4;	// IMP=0x000000000060f0e0
- (_Bool)statementForKey:(id)arg1 statementBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000000060ef8c
- (struct sqlite3_stmt *)statementForKey:(id)arg1;	// IMP=0x000000000060ef3a
- (void)clearStatement:(id)arg1;	// IMP=0x000000000060eec6
- (_Bool)prepareStatement:(const char *)arg1 forKey:(id)arg2;	// IMP=0x000000000060ed5f
- (_Bool)dropTablesLike:(id)arg1;	// IMP=0x000000000060ea93
- (_Bool)dropAllTables;	// IMP=0x000000000060ea7a
- (id)getTablesLike:(id)arg1;	// IMP=0x000000000060e8f9
- (id)getAllTables;	// IMP=0x000000000060e8e0
- (_Bool)createTable:(const char *)arg1 withDrop:(const char *)arg2;	// IMP=0x000000000060e74d
- (_Bool)unregisterVirtualTable:(id)arg1;	// IMP=0x000000000060e5ad
- (_Bool)registerVirtualTable:(id)arg1;	// IMP=0x000000000060e178
- (void)_debug_lockDB:(id)arg1;	// IMP=0x000000000060e051
- (void)_debug_unlockDB:(id)arg1;	// IMP=0x000000000060df0a
- (void)dealloc;	// IMP=0x000000000060ded5
- (void)_closeDB;	// IMP=0x000000000060dce2
- (void)tearDown;	// IMP=0x000000000060dbf6
- (_Bool)deleteAllDBFiles;	// IMP=0x000000000060dbb7
- (int)_setPragmas;	// IMP=0x000000000060d98a
- (_Bool)_deleteAllDBFiles;	// IMP=0x000000000060d0c1
- (_Bool)_deleteAllDatabaseFilesIfCorrupt:(int)arg1;	// IMP=0x000000000060cce4
- (void)_deleteAndReopenDatabaseIfCorrupt:(int)arg1;	// IMP=0x000000000060cc2e
- (void)_createParentDirectory;	// IMP=0x000000000060cac2
- (int)_openDatabaseFile;	// IMP=0x000000000060c809
- (int)_openAndConfigure;	// IMP=0x000000000060c6b1
- (_Bool)_openAndConfigureWithRetryIfCorrupt;	// IMP=0x000000000060c647
- (_Bool)setup;	// IMP=0x000000000060c26b
- (void)_execute:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000060c102
- (void)executeAsync:(CDUnknownBlockType)arg1;	// IMP=0x000000000060c0ee
- (void)executeAsync:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000060bfea
- (void)executeSync:(CDUnknownBlockType)arg1;	// IMP=0x000000000060bfd6
- (void)executeSync:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000060beaa
- (id)description;	// IMP=0x000000000060bdb2
- (id)initWithQueueName:(const char *)arg1 log:(id)arg2 databaseFileURL:(id)arg3 sqliteFlags:(int)arg4 pragmas:(id)arg5 setupBlock:(CDUnknownBlockType)arg6;	// IMP=0x000000000060bc19
- (id)initWithQueueName:(const char *)arg1 logFacility:(const char *)arg2 dbFilePath:(id)arg3 sqliteFlags:(int)arg4 pragmas:(id)arg5 setupBlock:(CDUnknownBlockType)arg6;	// IMP=0x000000000060bb0e
- (id)init;	// IMP=0x000000000060bae4
@property(nonatomic) long long user_version;
@property(readonly, nonatomic) NSDictionary *pragmas;
@property(readonly, nonatomic) _Bool isDBReady;
@property(readonly, nonatomic) NSString *dbFilePath;
- (id)UUIDForColumn:(int)arg1 inStatment:(struct sqlite3_stmt *)arg2;	// IMP=0x0000000000610bfa
- (_Bool)bindParameter:(const char *)arg1 toUUID:(id)arg2 inStatement:(struct sqlite3_stmt *)arg3 error:(id *)arg4;	// IMP=0x0000000000610b1c
- (_Bool)_waitForAllTransactionExternalResources;	// IMP=0x0000000001292277
- (void)_channelEncounteredError:(int)arg1;	// IMP=0x00000000012921f2
- (void)_channelCleanupFailedWithError:(int)arg1;	// IMP=0x000000000129216d
- (void)_doneWritingToChannel:(id)arg1;	// IMP=0x000000000129212c
- (void)_writeTransactionExternalResourceWithData:(id)arg1 toURL:(id)arg2;	// IMP=0x0000000001291bd8

@end

