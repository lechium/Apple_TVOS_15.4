//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <VectorKit/VKGesturingCameraController-Protocol.h>
#import <VectorKit/VKNavContextObserver-Protocol.h>
#import <VectorKit/VKNavigationCameraController-Protocol.h>

@class GEOMapRegion, NSString, VKAttachedNavGestureCameraBehavior, VKDaVinciGestureCameraController, VKDetachedNavGestureCameraBehavior, VKGestureCameraBehavior, VKNavContext, VKSceneConfiguration, VKScreenCanvas, VKTimedAnimation;
@protocol VKInteractiveMap;

__attribute__((visibility("hidden")))
@interface VKNavCameraController <VKNavigationCameraController, VKGesturingCameraController, VKNavContextObserver>
{
    unsigned char _cameraType;	// 8 = 0x8
    unsigned char _headingType;	// 9 = 0x9
    Unit_3d259e8a _puckCourse;	// 16 = 0x10
    Coordinate3D_bc242218 _puckCoordinate;	// 24 = 0x18
    Unit_3d259e8a _headingDelta;	// 48 = 0x30
    Unit_3d259e8a _headingMinDelta;	// 56 = 0x38
    CameraFrame_406dbd31 _lastCalculatedCameraFrame;	// 64 = 0x40
    CameraFrame_406dbd31 _cameraFrame;	// 120 = 0x78
    _Bool _needsUpdate;	// 176 = 0xb0
    struct Spring<double, 1, gdc::SpringType::Linear> _pitchSpring;	// 184 = 0xb8
    struct Spring<double, 1, gdc::SpringType::Angular> _headingSpring;	// 224 = 0xe0
    struct Spring<double, 1, gdc::SpringType::Linear> _distanceFromTargetSpring;	// 264 = 0x108
    struct Spring<double, 2, gdc::SpringType::Linear> _screenPositionSpring;	// 304 = 0x130
    Unit_09325524 _cameraDistanceFromTarget;	// 368 = 0x170
    Unit_3d259e8a _cameraPitch;	// 376 = 0x178
    double _previousUpdateTime;	// 384 = 0x180
    double _maxZoomScale;	// 392 = 0x188
    double _minZoomScale;	// 400 = 0x190
    VKGestureCameraBehavior *_gestureBehavior;	// 408 = 0x198
    VKAttachedNavGestureCameraBehavior *_attachedGestureBehavior;	// 416 = 0x1a0
    VKDetachedNavGestureCameraBehavior *_detachedGestureBehavior;	// 424 = 0x1a8
    VKDaVinciGestureCameraController *_davinciGestureCameraController;	// 432 = 0x1b0
    _Bool _isDetached;	// 440 = 0x1b8
    _Bool _panning;	// 441 = 0x1b9
    _Bool _rotating;	// 442 = 0x1ba
    _Bool _pitching;	// 443 = 0x1bb
    _Bool _zooming;	// 444 = 0x1bc
    VKTimedAnimation *_transitionAnimation;	// 448 = 0x1c0
    VKTimedAnimation *_snapPitchAnimation;	// 456 = 0x1c8
    VKTimedAnimation *_snapHeadingAnimation;	// 464 = 0x1d0
    CameraFrame_406dbd31 _transitionFrame;	// 472 = 0x1d8
    struct basic_string<char, std::char_traits<char>, std::allocator<char>> _currentStyleName;	// 528 = 0x210
    struct vector<geo::Coordinate3D<Radians, double>, std::allocator<geo::Coordinate3D<Radians, double>>> _coordinatesToFrame;	// 552 = 0x228
    unsigned char _styleManeuversToFrame;	// 576 = 0x240
    unsigned char _maneuversToFrame;	// 577 = 0x241
    unsigned char _styleLegsToFrame;	// 578 = 0x242
    unsigned char _segmentsToFrame;	// 579 = 0x243
    double _minCameraHeight;	// 584 = 0x248
    double _maxCameraHeight;	// 592 = 0x250
    Unit_3d259e8a _minCameraPitch;	// 600 = 0x258
    Unit_3d259e8a _maxCameraPitch;	// 608 = 0x260
    struct VKEdgeInsets _previousMapEdgeInsets;	// 616 = 0x268
    struct VKEdgeInsets _framingEdgeInset;	// 632 = 0x278
    struct VKEdgeInsets _framingEdgeInsetProportional;	// 648 = 0x288
    struct VKEdgeInsets _clientFramingInsets;	// 664 = 0x298
    Matrix_8746f91e _puckMovementBoundsMin;	// 680 = 0x2a8
    Matrix_8746f91e _puckMovementBoundsMax;	// 688 = 0x2b0
    Matrix_8746f91e _puckScreenPosition;	// 696 = 0x2b8
    double _minHeightDeltaChangeHorizontal;	// 704 = 0x2c0
    double _maxHeightDeltaChangeHorizontal;	// 712 = 0x2c8
    double _minHeightDeltaChangeVertical;	// 720 = 0x2d0
    double _maxHeightDeltaChangeVertical;	// 728 = 0x2d8
    double _halfPuckSize;	// 736 = 0x2e0
    Box_3d7e3c2c _viewableScreenRect;	// 744 = 0x2e8
    Box_3d7e3c2c _framingScreenRect;	// 776 = 0x308
    _Bool _enablePan;	// 808 = 0x328
    _Bool _enableZoom;	// 809 = 0x329
    _Bool _enablePitch;	// 810 = 0x32a
    _Bool _enableRotate;	// 811 = 0x32b
    float _panReturnDelayTime;	// 812 = 0x32c
    unsigned char _alternateFramingSource;	// 816 = 0x330
    unsigned char _secondaryAlternateFramingSource;	// 817 = 0x331
    double _maxFramingDistance;	// 824 = 0x338
    double _framingDistanceAfterManeuver;	// 832 = 0x340
    VKNavContext *_navContext;	// 840 = 0x348
    CDStruct_2c43369c _locationCoordinate;	// 848 = 0x350
    struct PolylineCoordinate _routeCoordinate;	// 864 = 0x360
    _Bool _frameAllGroupedManeuvers;	// 872 = 0x368
    unsigned char _maxManeuversToFrame;	// 873 = 0x369
    _Bool _ignorePointsBehind;	// 874 = 0x36a
    Coordinate3D_bc242218 _routeFocusCoordinate;	// 880 = 0x370
    unsigned long long _lastTargetStyleIdentifier;	// 904 = 0x388
    double _desiredZoomScale;	// 912 = 0x390
    float _animationTime;	// 920 = 0x398
    _Bool _isTracking;	// 924 = 0x39c
    shared_ptr_e963992e _taskContext;	// 928 = 0x3a0
    double _depthNear;	// 944 = 0x3b0
    _Bool _leftHanded;	// 952 = 0x3b8
    _Bool _sentZoomNotification;	// 953 = 0x3b9
    _Bool _enableDynamicFrameRate;	// 954 = 0x3ba
    Coordinate3D_bc242218 _cornerCoordinates[4];	// 960 = 0x3c0
    struct WindowedSampler<60UL> _pixelSamples;	// 1056 = 0x420
    struct Sampler _requesteDisplayRateSampler;	// 1584 = 0x630
    long long _requestedDisplayRate;	// 1624 = 0x658
    _Bool _isElevatedRoute;	// 1632 = 0x660
    void *_cameraManager;	// 1640 = 0x668
    long long _defaultMaxDisplayRate;	// 1648 = 0x670
    struct vector<NavCameraPixelFrameRate, std::allocator<NavCameraPixelFrameRate>> _pixelChangeFrameRate;	// 1656 = 0x678
    Matrix_6e1d3589 _lastProjectedPosition;	// 1680 = 0x690
    double _farClipPlaneFactor;	// 1704 = 0x6a8
    VKScreenCanvas<VKInteractiveMap> *_screenCanvas;	// 1712 = 0x6b0
    VKSceneConfiguration *_sceneConfiguration;	// 1720 = 0x6b8
    long long _baseDisplayRate;	// 1728 = 0x6c0
}

- (id).cxx_construct;	// IMP=0x000000000071d435
- (void).cxx_destruct;	// IMP=0x000000000071d3b2
@property(nonatomic) long long baseDisplayRate; // @synthesize baseDisplayRate=_baseDisplayRate;
@property(nonatomic) struct VKEdgeInsets clientFramingInsets; // @synthesize clientFramingInsets=_clientFramingInsets;
@property(nonatomic) VKSceneConfiguration *sceneConfiguration; // @synthesize sceneConfiguration=_sceneConfiguration;
@property(nonatomic) VKScreenCanvas<VKInteractiveMap> *screenCanvas; // @synthesize screenCanvas=_screenCanvas;
- (float)maxPitchForNormalizedZoomLevel:(float)arg1;	// IMP=0x000000000071d282
- (float)idealPitchForNormalizedZoomLevel:(float)arg1;	// IMP=0x000000000071d20d
- (float)minPitchForNormalizedZoomLevel:(float)arg1;	// IMP=0x000000000071d198
- (float)minimumNormalizedZoomLevel;	// IMP=0x000000000071d117
- (float)maximumNormalizedZoomLevel;	// IMP=0x000000000071d0b4
- (long long)tileSize;	// IMP=0x000000000071d03d
- (void)_updateCameraLimits;	// IMP=0x000000000071c6fe
- (void)pitchTo:(double)arg1 animated:(_Bool)arg2;	// IMP=0x000000000071c437
- (void)rotateTo:(double)arg1 animated:(_Bool)arg2;	// IMP=0x000000000071c165
- (_Bool)snapMapIfNecessary:(_Bool)arg1;	// IMP=0x000000000071bf07
- (_Bool)usesVKCamera;	// IMP=0x000000000071beff
- (float)_currentRoadSignOffset;	// IMP=0x000000000071bea8
- (void)_setNavCameraIsDetached:(_Bool)arg1;	// IMP=0x000000000071bdd0
- (unsigned char)cameraHeadingType;	// IMP=0x000000000071bd63
- (void)canvasDidLayout;	// IMP=0x000000000071bd28
- (void)setCamera:(shared_ptr_46708168)arg1;	// IMP=0x000000000071bc48
- (void)setVkCamera:(id)arg1;	// IMP=0x000000000071bbd0
- (void)stopAnimations;	// IMP=0x000000000071bb3f
- (void)setCameraFrame:(CameraFrame_406dbd31)arg1;	// IMP=0x000000000071bb04
- (CameraFrame_406dbd31)cameraFrame;	// IMP=0x000000000071bad0
- (void)_snapHeading;	// IMP=0x000000000071b826
- (void)_snapPitch;	// IMP=0x000000000071b5de
- (void)setEdgeInsets:(struct VKEdgeInsets)arg1;	// IMP=0x000000000071b582
- (void)setEdgeInsetsAnimating:(_Bool)arg1;	// IMP=0x000000000071b4dd
- (Unit_3d259e8a)maxCameraPitch;	// IMP=0x000000000071b4c4
- (Unit_3d259e8a)minCameraPitch;	// IMP=0x000000000071b4ab
- (double)maxZoomHeight;	// IMP=0x000000000071b49d
- (double)minZoomHeight;	// IMP=0x000000000071b48f
- (double)maxZoomScale;	// IMP=0x000000000071b47d
- (double)minZoomScale;	// IMP=0x000000000071b46b
- (void)updateState;	// IMP=0x000000000071b465
@property(nonatomic) double zoomScale;
- (void)_updateZoomScaleLimts;	// IMP=0x000000000071b2f2
- (void)_setNeedsUpdate;	// IMP=0x000000000071b2c6
- (void)navContextCameraHeadingOverrideDidChange:(id)arg1;	// IMP=0x000000000071b270
- (void)navContextStateDidChange:(id)arg1;	// IMP=0x000000000071b25e
- (void)_updateForAnimatedEdgeInsets;	// IMP=0x000000000071b184
- (void)updateSpringsForFramingCamera;	// IMP=0x000000000071aa5b
- (void)_updateRouteSinuosity;	// IMP=0x000000000071a7bf
- (void)_addAdditionalRoutePointsToFrameToList:(void *)arg1;	// IMP=0x000000000071a5c8
- (Coordinate3D_bc242218)_coordinateForGeoLocation:(CDStruct_071ac149)arg1;	// IMP=0x000000000071a594
- (void)updatePointsToFrame;	// IMP=0x000000000071959a
- (_Bool)_addStepToFraming:(unsigned long long)arg1 forRoute:(id)arg2;	// IMP=0x00000000007192a6
- (void)updateManeuversToFrame;	// IMP=0x0000000000719238
- (Coordinate3D_bc242218)routeCoordinateAtDistance:(double)arg1;	// IMP=0x00000000007190ef
- (Coordinate3D_bc242218)routeLocationAtDistance:(double)arg1 fromManeuver:(unsigned long long)arg2;	// IMP=0x0000000000718e71
- (double)distanceToManeuver:(unsigned long long)arg1;	// IMP=0x0000000000718d9e
- (void)updateSpringsForTrackingCamera;	// IMP=0x0000000000718cda
- (Box_3d7e3c2c)calculateViewableScreenRect;	// IMP=0x0000000000718c90
- (Box_3d7e3c2c)calculateViewableScreenRectForEdgeInsets:(struct VKEdgeInsets)arg1;	// IMP=0x000000000071894d
- (Unit_3d259e8a)calculateHeading;	// IMP=0x000000000071849c
- (void)stop;	// IMP=0x0000000000718292
- (_Bool)isRotateEnabled;	// IMP=0x000000000071828a
- (_Bool)isPitchEnabled;	// IMP=0x0000000000718282
- (void)stopSnappingAnimations;	// IMP=0x000000000071827c
- (_Bool)_canZoomOut;	// IMP=0x0000000000718244
- (_Bool)canZoomOutForTileSize:(long long)arg1;	// IMP=0x0000000000718232
- (_Bool)_canZoomIn;	// IMP=0x00000000007181fa
- (_Bool)canZoomInForTileSize:(long long)arg1;	// IMP=0x00000000007181e8
- (double)topDownMinimumZoomLevel;	// IMP=0x000000000071814f
- (double)currentZoomLevel;	// IMP=0x0000000000717ff8
- (double)maximumZoomLevel;	// IMP=0x0000000000717f5f
- (double)minimumZoomLevel;	// IMP=0x0000000000717ec6
- (double)_normalizedZoomLevelForDisplayZoomLevel:(double)arg1;	// IMP=0x0000000000717e22
- (_Bool)canEnter3DMode;	// IMP=0x0000000000717e1a
- (void)setNavContext:(id)arg1;	// IMP=0x0000000000717d9b
- (void)returnToPuck;	// IMP=0x0000000000717d81
- (void)returnToTrackingWithDelay:(double)arg1 resetZoom:(_Bool)arg2;	// IMP=0x00000000007176ef
- (void)animateCameraWithDuration:(float)arg1 fromFrame:(const void *)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000071717a
- (CameraFrame_406dbd31)restingCameraFrame;	// IMP=0x000000000071700b
- (CameraFrame_406dbd31)currentCameraFrame;	// IMP=0x0000000000716e88
@property(nonatomic) double pitch;
@property(nonatomic) double heading;
@property(readonly, nonatomic) double altitude;
@property(nonatomic) double distanceFromCenterCoordinate;
@property(nonatomic) CDStruct_c3b9c2ee centerCoordinate;
- (void)_updateStyles;	// IMP=0x00000000007169a7
- (void)_updateSceneStyles:(_Bool)arg1;	// IMP=0x0000000000715703
- (void)stylesheetDidReload;	// IMP=0x00000000007156e2
- (void)stylesheetDidChange;	// IMP=0x00000000007156d0
- (_Bool)_updateSprings:(double)arg1;	// IMP=0x000000000071504b
- (Matrix_2bdd42a3)puckScreenPoint;	// IMP=0x0000000000714fc4
- (void)_updateDebugOverlay;	// IMP=0x0000000000713a9e
- (void)_updateDebugText;	// IMP=0x0000000000713815
- (shared_ptr_60abd8cc)_getActiveSceneManager;	// IMP=0x000000000071378b
- (id)_debugText:(_Bool)arg1 showNavCameraDebugConsoleAttributes:(_Bool)arg2;	// IMP=0x00000000007127f5
- (id)detailedDescription;	// IMP=0x000000000071273d
- (_Bool)_hasRunningAnimation;	// IMP=0x00000000007126dd
- (double)_calculateMaxPixelChangeAndUpdateCorners;	// IMP=0x0000000000712559
- (void)updateWithTimestamp:(double)arg1 withContext:(void *)arg2;	// IMP=0x000000000071204d
- (long long)displayRate;	// IMP=0x0000000000711fe2
- (long long)defaultDisplayRate;	// IMP=0x0000000000711dda
- (void)_updateClipPlanes;	// IMP=0x0000000000711c35
- (void)resetSpringsToResting;	// IMP=0x0000000000711bd0
- (void)updateCameraState;	// IMP=0x0000000000711b26
- (_Bool)wantsTimerTick;	// IMP=0x0000000000711b16
- (void)puckAnimator:(id)arg1 updatedTargetPosition:(const void *)arg2;	// IMP=0x0000000000711af4
- (void)puckAnimatorDidStop:(id)arg1;	// IMP=0x0000000000711aee
- (void)updateLocation:(const void *)arg1 andCourse:(const void *)arg2;	// IMP=0x00000000007116db
- (void)puckAnimator:(id)arg1 getElevation:(double *)arg2 withCoordinate:(const void *)arg3;	// IMP=0x0000000000711671
- (void)puckAnimator:(id)arg1 updatedPosition:(const void *)arg2 course:(const void *)arg3;	// IMP=0x0000000000711603
- (void)puckAnimator:(id)arg1 runAnimation:(id)arg2;	// IMP=0x00000000007115c6
- (_Bool)isGesturing;	// IMP=0x0000000000711589
- (_Bool)tapAtPoint:(struct CGPoint)arg1;	// IMP=0x0000000000711581
- (void)transferGestureState:(id)arg1;	// IMP=0x000000000071157b
- (void)stopPitchingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x00000000007114fc
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 degrees:(double)arg2;	// IMP=0x00000000007114b1
- (void)updatePitchWithFocusPoint:(struct CGPoint)arg1 translation:(double)arg2;	// IMP=0x0000000000711466
- (void)startPitchingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x000000000071137e
- (void)stopRotatingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x00000000007112ca
- (void)updateRotationWithFocusPoint:(struct CGPoint)arg1 newValue:(double)arg2;	// IMP=0x000000000071127f
- (void)startRotatingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x0000000000711197
- (void)stopPanningAtPoint:(struct CGPoint)arg1;	// IMP=0x0000000000711125
- (void)updatePanWithTranslation:(struct CGPoint)arg1;	// IMP=0x00000000007110da
- (void)startPanningAtPoint:(struct CGPoint)arg1 panAtStartPoint:(_Bool)arg2;	// IMP=0x0000000000710ff5
- (void)_updateObserverCouldZoomIn:(_Bool)arg1 couldZoomOut:(_Bool)arg2;	// IMP=0x0000000000710e7a
- (void)stopPinchingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x0000000000710cdd
- (void)updatePinchWithFocusPoint:(struct CGPoint)arg1 oldFactor:(double)arg2 newFactor:(double)arg3;	// IMP=0x0000000000710c92
- (void)startPinchingWithFocusPoint:(struct CGPoint)arg1;	// IMP=0x0000000000710bef
- (void)zoom:(double)arg1 withFocusPoint:(struct CGPoint)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000710aff
- (void)_setDetached:(_Bool)arg1;	// IMP=0x0000000000710a1a
- (id)_detachedGestureController;	// IMP=0x00000000007109d8
- (void)startWithPounce:(_Bool)arg1 startLocation:(CDStruct_c3b9c2ee)arg2 startCourse:(double)arg3 pounceCompletionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000071025b
- (void)dealloc;	// IMP=0x0000000000710105
- (id)initWithTaskContext:(shared_ptr_e963992e)arg1 device:(void *)arg2 mapDataAccess:(void *)arg3 animationRunner:(struct AnimationRunner *)arg4 runLoopController:(struct RunLoopController *)arg5 cameraDelegate:(id)arg6;	// IMP=0x000000000070f84f
- (id)init;	// IMP=0x000000000070f820

// Remaining properties
@property(readonly, nonatomic) struct AnimationRunner *animationRunner;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, nonatomic) _Bool isFullyPitched;
@property(readonly, nonatomic) _Bool isPitched;
@property(readonly, nonatomic) _Bool isRotated;
@property(readonly, nonatomic) void *mapDataAccess;
@property(readonly, nonatomic) GEOMapRegion *mapRegion;
@property(readonly, nonatomic) GEOMapRegion *mapRegionIgnoringEdgeInsets;
@property(readonly, nonatomic) double maxPitch;
@property(readonly, nonatomic) double minPitch;
@property(readonly, nonatomic) struct RunLoopController *runLoopController;
@property(readonly) Class superclass;

@end

