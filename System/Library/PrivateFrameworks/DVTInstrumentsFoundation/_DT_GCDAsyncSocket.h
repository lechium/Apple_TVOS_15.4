//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSData, NSMutableArray, NSString, _DT_GCDAsyncReadPacket, _DT_GCDAsyncSocketPreBuffer, _DT_GCDAsyncWritePacket;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface _DT_GCDAsyncSocket : NSObject
{
    unsigned int flags;	// 8 = 0x8
    unsigned short config;	// 12 = 0xc
    id delegate;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *delegateQueue;	// 24 = 0x18
    int socket4FD;	// 32 = 0x20
    int socket6FD;	// 36 = 0x24
    int stateIndex;	// 40 = 0x28
    NSData *connectInterface4;	// 48 = 0x30
    NSData *connectInterface6;	// 56 = 0x38
    NSObject<OS_dispatch_queue> *socketQueue;	// 64 = 0x40
    NSObject<OS_dispatch_source> *accept4Source;	// 72 = 0x48
    NSObject<OS_dispatch_source> *accept6Source;	// 80 = 0x50
    NSObject<OS_dispatch_source> *connectTimer;	// 88 = 0x58
    NSObject<OS_dispatch_source> *readSource;	// 96 = 0x60
    NSObject<OS_dispatch_source> *writeSource;	// 104 = 0x68
    NSObject<OS_dispatch_source> *readTimer;	// 112 = 0x70
    NSObject<OS_dispatch_source> *writeTimer;	// 120 = 0x78
    NSMutableArray *readQueue;	// 128 = 0x80
    NSMutableArray *writeQueue;	// 136 = 0x88
    _DT_GCDAsyncReadPacket *currentRead;	// 144 = 0x90
    _DT_GCDAsyncWritePacket *currentWrite;	// 152 = 0x98
    unsigned long long socketFDBytesAvailable;	// 160 = 0xa0
    _DT_GCDAsyncSocketPreBuffer *preBuffer;	// 168 = 0xa8
    struct {
        long long version;
        void *info;
        CDUnknownFunctionPointerType retain;
        CDUnknownFunctionPointerType release;
        CDUnknownFunctionPointerType copyDescription;
    } streamContext;	// 176 = 0xb0
    struct __CFReadStream *readStream;	// 216 = 0xd8
    struct __CFWriteStream *writeStream;	// 224 = 0xe0
    struct SSLContext *sslContext;	// 232 = 0xe8
    _DT_GCDAsyncSocketPreBuffer *sslPreBuffer;	// 240 = 0xf0
    unsigned long long sslWriteCachedLength;	// 248 = 0xf8
    int sslErrCode;	// 256 = 0x100
    void *IsOnSocketQueueOrTargetQueueKey;	// 264 = 0x108
    id userData;	// 272 = 0x110
}

+ (id)ZeroData;	// IMP=0x00000000000376b9
+ (id)LFData;	// IMP=0x0000000000037694
+ (id)CRData;	// IMP=0x000000000003766f
+ (id)CRLFData;	// IMP=0x000000000003764a
+ (_Bool)getHost:(id *)arg1 port:(unsigned short *)arg2 family:(char *)arg3 fromAddress:(id)arg4;	// IMP=0x0000000000037480
+ (_Bool)getHost:(id *)arg1 port:(unsigned short *)arg2 fromAddress:(id)arg3;	// IMP=0x0000000000037468
+ (_Bool)isIPv6Address:(id)arg1;	// IMP=0x000000000003740d
+ (_Bool)isIPv4Address:(id)arg1;	// IMP=0x00000000000373b2
+ (unsigned short)portFromAddress:(id)arg1;	// IMP=0x0000000000037382
+ (id)hostFromAddress:(id)arg1;	// IMP=0x000000000003731c
+ (unsigned short)portFromSockaddr6:(const struct sockaddr_in6 *)arg1;	// IMP=0x000000000003730b
+ (unsigned short)portFromSockaddr4:(const struct sockaddr_in *)arg1;	// IMP=0x00000000000372fa
+ (id)hostFromSockaddr6:(const struct sockaddr_in6 *)arg1;	// IMP=0x000000000003727d
+ (id)hostFromSockaddr4:(const struct sockaddr_in *)arg1;	// IMP=0x0000000000037200
+ (id)lookupHost:(id)arg1 port:(unsigned short)arg2 error:(id *)arg3;	// IMP=0x0000000000036e79
+ (void)unscheduleCFStreams:(id)arg1;	// IMP=0x000000000003609c
+ (void)scheduleCFStreams:(id)arg1;	// IMP=0x0000000000035f8d
+ (void)cfstreamThread;	// IMP=0x0000000000035df6
+ (void)stopCFStreamThreadIfNeeded;	// IMP=0x0000000000035cfd
+ (void)startCFStreamThreadIfNeeded;	// IMP=0x0000000000035bca
+ (void)ignore:(id)arg1;	// IMP=0x0000000000035bc4
+ (id)gaiError:(int)arg1;	// IMP=0x000000000002e106
- (void).cxx_destruct;	// IMP=0x00000000000376de
- (struct SSLContext *)sslContext;	// IMP=0x0000000000036e4d
- (struct __CFWriteStream *)writeStream;	// IMP=0x0000000000036e05
- (struct __CFReadStream *)readStream;	// IMP=0x0000000000036dbd
- (int)socket6FD;	// IMP=0x0000000000036d92
- (int)socket4FD;	// IMP=0x0000000000036d67
- (int)socketFD;	// IMP=0x0000000000036d34
- (void)performBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000036cfc
- (void)unmarkSocketQueueTargetQueue:(id)arg1;	// IMP=0x0000000000036ce4
- (void)markSocketQueueTargetQueue:(id)arg1;	// IMP=0x0000000000036cc8
@property _Bool autoDisconnectOnClosedReadStream;
- (_Bool)openStreams;	// IMP=0x0000000000036a0d
- (void)removeStreamsFromRunLoop;	// IMP=0x00000000000368b4
- (_Bool)addStreamsToRunLoop;	// IMP=0x0000000000036759
- (_Bool)registerForStreamCallbacksIncludingReadWrite:(_Bool)arg1;	// IMP=0x0000000000036333
- (_Bool)createReadAndWriteStream;	// IMP=0x00000000000361ab
- (void)cf_startTLS;	// IMP=0x00000000000358c8
- (void)cf_abortSSLHandshake:(id)arg1;	// IMP=0x000000000003589d
- (void)cf_finishSSLHandshake;	// IMP=0x0000000000035763
- (void)ssl_shouldTrustPeer:(_Bool)arg1 stateIndex:(int)arg2;	// IMP=0x00000000000356dc
- (void)ssl_continueSSLHandshake;	// IMP=0x0000000000035031
- (void)ssl_startTLS;	// IMP=0x0000000000033bd1
- (int)sslWriteWithBuffer:(const void *)arg1 length:(unsigned long long *)arg2;	// IMP=0x0000000000033b37
- (int)sslReadWithBuffer:(void *)arg1 length:(unsigned long long *)arg2;	// IMP=0x00000000000338d4
- (void)maybeStartTLS;	// IMP=0x00000000000337e5
- (void)startTLS:(id)arg1;	// IMP=0x0000000000033672
- (void)doWriteTimeoutWithExtension:(double)arg1;	// IMP=0x00000000000335ad
- (void)doWriteTimeout;	// IMP=0x00000000000333f0
- (void)setupWriteTimerWithTimeout:(double)arg1;	// IMP=0x00000000000332b2
- (void)endCurrentWrite;	// IMP=0x000000000003326b
- (void)completeCurrentWrite;	// IMP=0x00000000000330f1
- (void)doWriteData;	// IMP=0x0000000000032aaa
- (void)maybeDequeueWrite;	// IMP=0x00000000000328cd
- (float)progressOfWriteReturningTag:(long long *)arg1 bytesDone:(unsigned long long *)arg2 total:(unsigned long long *)arg3;	// IMP=0x00000000000326c4
- (void)writeData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;	// IMP=0x0000000000032586
- (void)doReadTimeoutWithExtension:(double)arg1;	// IMP=0x00000000000324c1
- (void)doReadTimeout;	// IMP=0x0000000000032304
- (void)setupReadTimerWithTimeout:(double)arg1;	// IMP=0x00000000000321c6
- (void)endCurrentRead;	// IMP=0x000000000003217f
- (void)completeCurrentRead;	// IMP=0x0000000000031ebd
- (void)doReadEOF;	// IMP=0x0000000000031c43
- (void)doReadData;	// IMP=0x0000000000030f14
- (void)flushSSLBuffers;	// IMP=0x0000000000030c21
- (void)maybeDequeueRead;	// IMP=0x00000000000309e7
- (float)progressOfReadReturningTag:(long long *)arg1 bytesDone:(unsigned long long *)arg2 total:(unsigned long long *)arg3;	// IMP=0x00000000000307e7
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 maxLength:(unsigned long long)arg5 tag:(long long)arg6;	// IMP=0x000000000003063d
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 maxLength:(unsigned long long)arg3 tag:(long long)arg4;	// IMP=0x0000000000030616
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5;	// IMP=0x00000000000305f4
- (void)readDataToData:(id)arg1 withTimeout:(double)arg2 tag:(long long)arg3;	// IMP=0x00000000000305cd
- (void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 buffer:(id)arg3 bufferOffset:(unsigned long long)arg4 tag:(long long)arg5;	// IMP=0x000000000003046e
- (void)readDataToLength:(unsigned long long)arg1 withTimeout:(double)arg2 tag:(long long)arg3;	// IMP=0x0000000000030451
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 maxLength:(unsigned long long)arg4 tag:(long long)arg5;	// IMP=0x00000000000302fb
- (void)readDataWithTimeout:(double)arg1 buffer:(id)arg2 bufferOffset:(unsigned long long)arg3 tag:(long long)arg4;	// IMP=0x00000000000302e0
- (void)readDataWithTimeout:(double)arg1 tag:(long long)arg2;	// IMP=0x00000000000302c1
- (void)resumeWriteSource;	// IMP=0x000000000003029e
- (void)suspendWriteSource;	// IMP=0x000000000003027b
- (void)resumeReadSource;	// IMP=0x0000000000030258
- (void)suspendReadSource;	// IMP=0x0000000000030235
- (_Bool)usingSecureTransportForTLS;	// IMP=0x0000000000030222
- (_Bool)usingCFStreamForTLS;	// IMP=0x000000000003020f
- (void)setupReadAndWriteSourcesForNewlyConnectedSocket:(int)arg1;	// IMP=0x000000000002ff26
- (void)getInterfaceAddress4:(id *)arg1 address6:(id *)arg2 fromDescription:(id)arg3 port:(unsigned short)arg4;	// IMP=0x000000000002fa8b
@property(readonly) _Bool isSecure;
@property(readonly) _Bool isIPv6;
@property(readonly) _Bool isIPv4;
@property(readonly) NSData *localAddress;
@property(readonly) NSData *connectedAddress;
- (unsigned short)localPortFromSocket6:(int)arg1;	// IMP=0x000000000002f3f7
- (unsigned short)localPortFromSocket4:(int)arg1;	// IMP=0x000000000002f383
- (id)localHostFromSocket6:(int)arg1;	// IMP=0x000000000002f326
- (id)localHostFromSocket4:(int)arg1;	// IMP=0x000000000002f2a6
- (unsigned short)connectedPortFromSocket6:(int)arg1;	// IMP=0x000000000002f255
- (unsigned short)connectedPortFromSocket4:(int)arg1;	// IMP=0x000000000002f1e1
- (id)connectedHostFromSocket6:(int)arg1;	// IMP=0x000000000002f184
- (id)connectedHostFromSocket4:(int)arg1;	// IMP=0x000000000002f104
- (unsigned short)localPort6;	// IMP=0x000000000002f0e6
- (unsigned short)localPort4;	// IMP=0x000000000002f0c8
- (id)localHost6;	// IMP=0x000000000002f09a
- (id)localHost4;	// IMP=0x000000000002f06c
- (unsigned short)connectedPort6;	// IMP=0x000000000002f04e
- (unsigned short)connectedPort4;	// IMP=0x000000000002f030
- (id)connectedHost6;	// IMP=0x000000000002f002
- (id)connectedHost4;	// IMP=0x000000000002efd4
@property(readonly) unsigned short localPort;
@property(readonly) NSString *localHost;
@property(readonly) unsigned short connectedPort;
@property(readonly) NSString *connectedHost;
@property(readonly) _Bool isConnected;
@property(readonly) _Bool isDisconnected;
- (id)otherError:(id)arg1;	// IMP=0x000000000002e840
- (id)connectionClosedError;	// IMP=0x000000000002e768
- (id)writeTimeoutError;	// IMP=0x000000000002e690
- (id)readTimeoutError;	// IMP=0x000000000002e5b8
- (id)readMaxedOutError;	// IMP=0x000000000002e4e0
- (id)connectTimeoutError;	// IMP=0x000000000002e408
- (id)sslError:(int)arg1;	// IMP=0x000000000002e383
- (id)errnoError;	// IMP=0x000000000002e2b7
- (id)errnoErrorWithReason:(id)arg1;	// IMP=0x000000000002e1be
- (id)badParamError:(id)arg1;	// IMP=0x000000000002e092
- (id)badConfigError:(id)arg1;	// IMP=0x000000000002e01e
- (void)maybeClose;	// IMP=0x000000000002df03
- (void)disconnectAfterReadingAndWriting;	// IMP=0x000000000002de77
- (void)disconnectAfterWriting;	// IMP=0x000000000002ddeb
- (void)disconnectAfterReading;	// IMP=0x000000000002dd5f
- (void)disconnect;	// IMP=0x000000000002dcaa
- (void)closeWithError:(id)arg1;	// IMP=0x000000000002d867
- (void)doConnectTimeout;	// IMP=0x000000000002d80e
- (void)endConnectTimeout;	// IMP=0x000000000002d7a7
- (void)startConnectTimeout:(double)arg1;	// IMP=0x000000000002d669
- (void)didNotConnect:(int)arg1 error:(id)arg2;	// IMP=0x000000000002d5a4
- (void)didConnect:(int)arg1;	// IMP=0x000000000002d040
- (_Bool)connectWithAddress4:(id)arg1 address6:(id)arg2 error:(id *)arg3;	// IMP=0x000000000002cb39
- (void)lookup:(int)arg1 didFail:(id)arg2;	// IMP=0x000000000002ca63
- (void)lookup:(int)arg1 didSucceedWithAddress4:(id)arg2 address6:(id)arg3;	// IMP=0x000000000002c869
- (_Bool)connectToAddress:(id)arg1 viaInterface:(id)arg2 withTimeout:(double)arg3 error:(id *)arg4;	// IMP=0x000000000002c438
- (_Bool)connectToAddress:(id)arg1 withTimeout:(double)arg2 error:(id *)arg3;	// IMP=0x000000000002c421
- (_Bool)connectToAddress:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002c402
- (_Bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 viaInterface:(id)arg3 withTimeout:(double)arg4 error:(id *)arg5;	// IMP=0x000000000002bb6a
- (_Bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 withTimeout:(double)arg3 error:(id *)arg4;	// IMP=0x000000000002bb4f
- (_Bool)connectToHost:(id)arg1 onPort:(unsigned short)arg2 error:(id *)arg3;	// IMP=0x000000000002bb35
- (_Bool)preConnectWithInterface:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002b884
- (_Bool)doAccept:(int)arg1;	// IMP=0x000000000002b550
- (_Bool)acceptOnInterface:(id)arg1 port:(unsigned short)arg2 error:(id *)arg3;	// IMP=0x000000000002a9b2
- (_Bool)acceptOnPort:(unsigned short)arg1 error:(id *)arg2;	// IMP=0x000000000002a999
@property(retain) id userData;
@property(getter=isIPv4PreferredOverIPv6) _Bool IPv4PreferredOverIPv6;
@property(getter=isIPv6Enabled) _Bool IPv6Enabled;
@property(getter=isIPv4Enabled) _Bool IPv4Enabled;
- (void)synchronouslySetDelegate:(id)arg1 delegateQueue:(id)arg2;	// IMP=0x000000000002a345
- (void)setDelegate:(id)arg1 delegateQueue:(id)arg2;	// IMP=0x000000000002a330
- (void)setDelegate:(id)arg1 delegateQueue:(id)arg2 synchronously:(_Bool)arg3;	// IMP=0x000000000002a1e2
- (void)getDelegate:(id *)arg1 delegateQueue:(id *)arg2;	// IMP=0x000000000002a036
- (void)synchronouslySetDelegateQueue:(id)arg1;	// IMP=0x000000000002a01f
@property(retain) NSObject<OS_dispatch_queue> *delegateQueue;
- (void)setDelegateQueue:(id)arg1 synchronously:(_Bool)arg2;	// IMP=0x0000000000029f2d
- (void)synchronouslySetDelegate:(id)arg1;	// IMP=0x0000000000029e1c
@property __weak id delegate;
- (void)setDelegate:(id)arg1 synchronously:(_Bool)arg2;	// IMP=0x0000000000029d2a
- (void)dealloc;	// IMP=0x0000000000029b16
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2 socketQueue:(id)arg3;	// IMP=0x000000000002976f
- (id)initWithDelegate:(id)arg1 delegateQueue:(id)arg2;	// IMP=0x000000000002975a
- (id)initWithSocketQueue:(id)arg1;	// IMP=0x0000000000029741
- (id)init;	// IMP=0x0000000000029728

@end

