//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MTLDebugCommandBuffer, MTLDepthStencilDescriptor, MTLRenderPassDescriptor, NSMutableSet;
@protocol MTLDepthStencilState, MTLRenderPipelineState;

@interface MTLDebugRenderCommandEncoder
{
    unsigned int _dirtyBits;	// 36 = 0x24
    _Bool _openGLModeEnabled;	// 40 = 0x28
    CDStruct_4bcfbbae *_vertexBuiltinArguments;	// 48 = 0x30
    struct {
        unsigned long long pixelFormat;
        unsigned long long sampleCount;
    } _attachmentInfo[10];	// 56 = 0x38
    id <MTLRenderPipelineState> _previousRenderPipelineStateWithWritesToImageBlock;	// 216 = 0xd8
    unsigned long long _resolvedRasterSampleCount;	// 224 = 0xe0
    CDStruct_0f4bf8df _vertexBuffers[36];	// 232 = 0xe8
    CDStruct_0f4bf8df _vertexTextures[96];	// 3112 = 0xc28
    CDStruct_0f4bf8df _vertexSamplers[16];	// 10792 = 0x2a28
    CDStruct_0f4bf8df _fragmentBuffers[31];	// 12072 = 0x2f28
    CDStruct_0f4bf8df _fragmentTextures[96];	// 14552 = 0x38d8
    CDStruct_0f4bf8df _fragmentSamplers[16];	// 22232 = 0x56d8
    CDStruct_0f4bf8df _tileBuffers[31];	// 23512 = 0x5bd8
    CDStruct_0f4bf8df _tileTextures[96];	// 25992 = 0x6588
    CDStruct_0f4bf8df _tileSamplers[16];	// 33672 = 0x8388
    CDStruct_0f4bf8df _threadgroupMemoryArguments[31];	// 34952 = 0x8888
    unsigned int _encoderState;	// 37432 = 0x9238
    unsigned int _unknownStoreActions;	// 37436 = 0x923c
    void *_visibilityOffsets;	// 37440 = 0x9240
    struct vector<MTLViewport, std::allocator<MTLViewport>> _viewports;	// 37448 = 0x9248
    struct vector<MTLScissorRect, std::allocator<MTLScissorRect>> _scissorRects;	// 37472 = 0x9260
    struct deque<id, std::allocator<id>> _updatedFences;	// 37496 = 0x9278
    NSMutableSet *_storingRenderTargets;	// 37544 = 0x92a8
    MTLDebugCommandBuffer *_commandBuffer;	// 37552 = 0x92b0
    unsigned long long _maxVertexBuffers;	// 37560 = 0x92b8
    unsigned long long _attachmentWriteMask;	// 37568 = 0x92c0
    CDStruct_da2e99ad _objectThreadsPerTG;	// 37576 = 0x92c8
    CDStruct_da2e99ad _meshThreadsPerTG;	// 37600 = 0x92e0
    float _lineWidth;	// 37624 = 0x92f8
    float _depthBias;	// 37628 = 0x92fc
    float _depthBiasSlopeScale;	// 37632 = 0x9300
    float _depthBiasClamp;	// 37636 = 0x9304
    unsigned int _frontStencilRef;	// 37640 = 0x9308
    unsigned int _backStencilRef;	// 37644 = 0x930c
    float _blendColorRed;	// 37648 = 0x9310
    float _blendColorGreen;	// 37652 = 0x9314
    float _blendColorBlue;	// 37656 = 0x9318
    float _blendColorAlpha;	// 37660 = 0x931c
    float _tessellationFactorScale;	// 37664 = 0x9320
    MTLRenderPassDescriptor *_descriptor;	// 37672 = 0x9328
    unsigned long long _frontFacingWinding;	// 37680 = 0x9330
    unsigned long long _cullMode;	// 37688 = 0x9338
    unsigned long long _depthClipMode;	// 37696 = 0x9340
    unsigned long long _triangleFillMode;	// 37704 = 0x9348
    id <MTLRenderPipelineState> _renderPipelineState;	// 37712 = 0x9350
    unsigned long long _peakPerSampleStorage;	// 37720 = 0x9358
    unsigned long long _resolvedSampleCount;	// 37728 = 0x9360
    id <MTLDepthStencilState> _depthStencilState;	// 37736 = 0x9368
    MTLDepthStencilDescriptor *_defaultDepthStencilDescriptor;	// 37744 = 0x9370
    unsigned long long _visibilityResultMode;	// 37752 = 0x9378
    unsigned long long _visibilityResultOffset;	// 37760 = 0x9380
    unsigned long long _width;	// 37768 = 0x9388
    unsigned long long _height;	// 37776 = 0x9390
    unsigned long long _tessellationFactorBufferInstanceStride;	// 37784 = 0x9398
    CDStruct_0f4bf8df _tessellationFactorBufferArgument;	// 37792 = 0x93a0
}

- (id).cxx_construct;	// IMP=0x000000000007e990
- (void).cxx_destruct;	// IMP=0x000000000007e937
@property(readonly, nonatomic) float tessellationFactorScale; // @synthesize tessellationFactorScale=_tessellationFactorScale;
@property(readonly, nonatomic) unsigned long long tessellationFactorBufferInstanceStride; // @synthesize tessellationFactorBufferInstanceStride=_tessellationFactorBufferInstanceStride;
@property(readonly, nonatomic) CDStruct_0f4bf8df tessellationFactorBufferArgument; // @synthesize tessellationFactorBufferArgument=_tessellationFactorBufferArgument;
@property(readonly) unsigned long long height; // @synthesize height=_height;
@property(readonly) unsigned long long width; // @synthesize width=_width;
@property(readonly, nonatomic) float blendColorAlpha; // @synthesize blendColorAlpha=_blendColorAlpha;
@property(readonly, nonatomic) float blendColorBlue; // @synthesize blendColorBlue=_blendColorBlue;
@property(readonly, nonatomic) float blendColorGreen; // @synthesize blendColorGreen=_blendColorGreen;
@property(readonly, nonatomic) float blendColorRed; // @synthesize blendColorRed=_blendColorRed;
@property(readonly, nonatomic) unsigned long long visibilityResultOffset; // @synthesize visibilityResultOffset=_visibilityResultOffset;
@property(readonly, nonatomic) unsigned long long visibilityResultMode; // @synthesize visibilityResultMode=_visibilityResultMode;
@property(readonly, nonatomic) unsigned int backStencilRef; // @synthesize backStencilRef=_backStencilRef;
@property(readonly, nonatomic) unsigned int frontStencilRef; // @synthesize frontStencilRef=_frontStencilRef;
@property(readonly, nonatomic) MTLDepthStencilDescriptor *defaultDepthStencilDescriptor; // @synthesize defaultDepthStencilDescriptor=_defaultDepthStencilDescriptor;
@property(readonly, nonatomic) id <MTLDepthStencilState> depthStencilState; // @synthesize depthStencilState=_depthStencilState;
@property(readonly, nonatomic) unsigned long long resolvedSampleCount; // @synthesize resolvedSampleCount=_resolvedSampleCount;
@property(readonly, nonatomic) unsigned long long peakPerSampleStorage; // @synthesize peakPerSampleStorage=_peakPerSampleStorage;
@property(readonly, nonatomic) id <MTLRenderPipelineState> renderPipelineState; // @synthesize renderPipelineState=_renderPipelineState;
@property(readonly, nonatomic) unsigned long long triangleFillMode; // @synthesize triangleFillMode=_triangleFillMode;
@property(readonly, nonatomic) float depthBiasClamp; // @synthesize depthBiasClamp=_depthBiasClamp;
@property(readonly, nonatomic) float depthBiasSlopeScale; // @synthesize depthBiasSlopeScale=_depthBiasSlopeScale;
@property(readonly, nonatomic) float depthBias; // @synthesize depthBias=_depthBias;
@property(readonly, nonatomic) float lineWidth; // @synthesize lineWidth=_lineWidth;
@property(readonly, nonatomic) unsigned long long depthClipMode; // @synthesize depthClipMode=_depthClipMode;
@property(readonly, nonatomic) unsigned long long cullMode; // @synthesize cullMode=_cullMode;
@property(readonly, nonatomic) unsigned long long frontFacingWinding; // @synthesize frontFacingWinding=_frontFacingWinding;
@property(readonly, copy, nonatomic) MTLRenderPassDescriptor *descriptor; // @synthesize descriptor=_descriptor;
@property(readonly, nonatomic) unsigned long long attachmentWriteMask; // @synthesize attachmentWriteMask=_attachmentWriteMask;
- (void)sampleCountersInBuffer:(id)arg1 atSampleIndex:(unsigned long long)arg2 withBarrier:(_Bool)arg3;	// IMP=0x000000000007e55f
- (void)executeCommandsInBuffer:(id)arg1 indirectBuffer:(id)arg2 indirectBufferOffset:(unsigned long long)arg3;	// IMP=0x000000000007e4ac
- (void)executeCommandsInBuffer:(id)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x000000000007e34d
- (void)memoryBarrierWithResources:(const id *)arg1 count:(unsigned long long)arg2 afterStages:(unsigned long long)arg3 beforeStages:(unsigned long long)arg4;	// IMP=0x000000000007dfee
- (void)memoryBarrierWithScope:(unsigned long long)arg1 afterStages:(unsigned long long)arg2 beforeStages:(unsigned long long)arg3;	// IMP=0x000000000007df77
- (void)textureBarrier;	// IMP=0x000000000007df53
- (void)filterCounterRangeWithFirstBatch:(unsigned int)arg1 lastBatch:(unsigned int)arg2 filterIndex:(unsigned int)arg3;	// IMP=0x000000000007ded6
- (void)drawIndexedPatches:(unsigned long long)arg1 patchIndexBuffer:(id)arg2 patchIndexBufferOffset:(unsigned long long)arg3 controlPointIndexBuffer:(id)arg4 controlPointIndexBufferOffset:(unsigned long long)arg5 indirectBuffer:(id)arg6 indirectBufferOffset:(unsigned long long)arg7;	// IMP=0x000000000007dc2b
- (void)drawIndexedPatches:(unsigned long long)arg1 patchStart:(unsigned long long)arg2 patchCount:(unsigned long long)arg3 patchIndexBuffer:(id)arg4 patchIndexBufferOffset:(unsigned long long)arg5 controlPointIndexBuffer:(id)arg6 controlPointIndexBufferOffset:(unsigned long long)arg7 instanceCount:(unsigned long long)arg8 baseInstance:(unsigned long long)arg9;	// IMP=0x000000000007d9b3
- (void)drawPatches:(unsigned long long)arg1 patchIndexBuffer:(id)arg2 patchIndexBufferOffset:(unsigned long long)arg3 indirectBuffer:(id)arg4 indirectBufferOffset:(unsigned long long)arg5;	// IMP=0x000000000007d7ac
- (void)drawPatches:(unsigned long long)arg1 patchStart:(unsigned long long)arg2 patchCount:(unsigned long long)arg3 patchIndexBuffer:(id)arg4 patchIndexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6 baseInstance:(unsigned long long)arg7;	// IMP=0x000000000007d157
- (void)setTessellationFactorScale:(float)arg1;	// IMP=0x000000000007d05f
- (void)setTessellationFactorBuffer:(id)arg1 offset:(unsigned long long)arg2 instanceStride:(unsigned long long)arg3;	// IMP=0x000000000007cddc
- (void)endEncoding;	// IMP=0x000000000007c850
- (void)waitForFence:(id)arg1 beforeStages:(unsigned long long)arg2;	// IMP=0x000000000007c6fb
- (void)updateFence:(id)arg1 afterStages:(unsigned long long)arg2;	// IMP=0x000000000007c5f2
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexType:(unsigned long long)arg2 indexBuffer:(id)arg3 indexBufferOffset:(unsigned long long)arg4 indirectBuffer:(id)arg5 indirectBufferOffset:(unsigned long long)arg6;	// IMP=0x000000000007c355
- (void)drawPrimitives:(unsigned long long)arg1 indirectBuffer:(id)arg2 indirectBufferOffset:(unsigned long long)arg3;	// IMP=0x000000000007c0a1
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6 baseVertex:(long long)arg7 baseInstance:(unsigned long long)arg8;	// IMP=0x000000000007be48
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3 instanceCount:(unsigned long long)arg4 baseInstance:(unsigned long long)arg5;	// IMP=0x000000000007bcdc
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5;	// IMP=0x000000000007bc2a
- (void)drawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6;	// IMP=0x000000000007bb79
- (void)validateDrawIndexedPrimitives:(unsigned long long)arg1 indexCount:(unsigned long long)arg2 indexType:(unsigned long long)arg3 indexBuffer:(id)arg4 indexBufferOffset:(unsigned long long)arg5 instanceCount:(unsigned long long)arg6 function:(const char *)arg7;	// IMP=0x000000000007b9bc
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3;	// IMP=0x000000000007b94d
- (void)drawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3 instanceCount:(unsigned long long)arg4;	// IMP=0x000000000007b8db
- (void)validateDrawPrimitives:(unsigned long long)arg1 vertexStart:(unsigned long long)arg2 vertexCount:(unsigned long long)arg3 instanceCount:(unsigned long long)arg4 function:(const char *)arg5;	// IMP=0x000000000007b771
- (void)_validateAllFunctionArguments:(struct _MTLMessageContext *)arg1;	// IMP=0x000000000007b62c
- (void)validateCommonDrawErrors:(unsigned long long)arg1;	// IMP=0x000000000007ab1c
- (void)validateCommonDrawErrors:(unsigned long long)arg1 instanceCount:(unsigned long long)arg2 baseInstance:(unsigned long long)arg3 maxVertexID:(unsigned long long)arg4;	// IMP=0x000000000007a67d
- (void)updatePipelineData;	// IMP=0x000000000007a63f
- (void)setStencilResolveTexture:(id)arg1 slice:(unsigned long long)arg2 depthPlane:(unsigned long long)arg3 level:(unsigned long long)arg4 yInvert:(_Bool)arg5;	// IMP=0x000000000007a48f
- (void)setStencilResolveTexture:(id)arg1 slice:(unsigned long long)arg2 depthPlane:(unsigned long long)arg3 level:(unsigned long long)arg4;	// IMP=0x000000000007a2dd
- (void)setDepthResolveTexture:(id)arg1 slice:(unsigned long long)arg2 depthPlane:(unsigned long long)arg3 level:(unsigned long long)arg4 yInvert:(_Bool)arg5;	// IMP=0x000000000007a12d
- (void)setDepthResolveTexture:(id)arg1 slice:(unsigned long long)arg2 depthPlane:(unsigned long long)arg3 level:(unsigned long long)arg4;	// IMP=0x0000000000079f7b
- (void)setColorResolveTexture:(id)arg1 slice:(unsigned long long)arg2 depthPlane:(unsigned long long)arg3 level:(unsigned long long)arg4 yInvert:(_Bool)arg5 atIndex:(unsigned long long)arg6;	// IMP=0x0000000000079d95
- (void)setColorResolveTexture:(id)arg1 slice:(unsigned long long)arg2 depthPlane:(unsigned long long)arg3 level:(unsigned long long)arg4 atIndex:(unsigned long long)arg5;	// IMP=0x0000000000079bad
- (void)setBlendColorRed:(float)arg1 green:(float)arg2 blue:(float)arg3 alpha:(float)arg4;	// IMP=0x0000000000079972
- (void)setVisibilityResultMode:(unsigned long long)arg1 offset:(unsigned long long)arg2;	// IMP=0x00000000000795ea
- (void)setStencilStoreActionOptions:(unsigned long long)arg1;	// IMP=0x00000000000794f7
- (void)setDepthStoreActionOptions:(unsigned long long)arg1;	// IMP=0x0000000000079404
- (void)setColorStoreActionOptions:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000079290
- (void)setStencilStoreAction:(unsigned long long)arg1;	// IMP=0x0000000000078fff
- (void)setDepthStoreAction:(unsigned long long)arg1;	// IMP=0x0000000000078f0c
- (void)setColorStoreAction:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000078d98
- (void)setStencilFrontReferenceValue:(unsigned int)arg1 backReferenceValue:(unsigned int)arg2;	// IMP=0x000000000007880c
- (void)setStencilReferenceValue:(unsigned int)arg1;	// IMP=0x00000000000786b0
- (void)setDepthStencilState:(id)arg1;	// IMP=0x00000000000784be
- (void)setTriangleFillMode:(unsigned long long)arg1;	// IMP=0x000000000007835f
- (void)setTriangleFrontFillMode:(unsigned long long)arg1 backFillMode:(unsigned long long)arg2;	// IMP=0x0000000000078251
- (void)setTransformFeedbackState:(unsigned long long)arg1;	// IMP=0x00000000000781a2
- (void)setScissorRects:(const CDStruct_33dcf794 *)arg1 count:(unsigned long long)arg2;	// IMP=0x0000000000077e08
- (void)setScissorRect:(CDStruct_33dcf794)arg1;	// IMP=0x0000000000077bb7
- (void)setDepthBias:(float)arg1 slopeScale:(float)arg2 clamp:(float)arg3;	// IMP=0x00000000000779f4
- (void)setLineWidth:(float)arg1;	// IMP=0x0000000000077858
- (void)setDepthClipMode:(unsigned long long)arg1;	// IMP=0x00000000000776d9
- (void)setCullMode:(unsigned long long)arg1;	// IMP=0x000000000007757f
- (void)setFrontFacingWinding:(unsigned long long)arg1;	// IMP=0x0000000000077425
- (void)setViewports:(const CDStruct_8727d297 *)arg1 count:(unsigned long long)arg2;	// IMP=0x0000000000076fe2
- (void)setViewport:(CDStruct_8727d297)arg1;	// IMP=0x0000000000076c65
- (void)useHeaps:(const id *)arg1 count:(unsigned long long)arg2 stages:(unsigned long long)arg3;	// IMP=0x0000000000076a83
- (void)useHeaps:(const id *)arg1 count:(unsigned long long)arg2;	// IMP=0x00000000000768f5
- (void)useHeap:(id)arg1 stages:(unsigned long long)arg2;	// IMP=0x00000000000767aa
- (void)useHeap:(id)arg1;	// IMP=0x000000000007670a
- (void)useResources:(const id *)arg1 count:(unsigned long long)arg2 usage:(unsigned long long)arg3 stages:(unsigned long long)arg4;	// IMP=0x00000000000764ea
- (void)useResources:(const id *)arg1 count:(unsigned long long)arg2 usage:(unsigned long long)arg3;	// IMP=0x000000000007632c
- (void)useResource:(id)arg1 usage:(unsigned long long)arg2 stages:(unsigned long long)arg3;	// IMP=0x00000000000761ac
- (void)useResource:(id)arg1 usage:(unsigned long long)arg2;	// IMP=0x0000000000076089
- (void)setThreadgroupMemoryLength:(unsigned long long)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x0000000000075cfc
- (void)_dispatchThreadsPerTile:(CDStruct_14f26992)arg1 inRegion:(CDStruct_1e3be3a8 *)arg2;	// IMP=0x0000000000073ce6
- (void)dispatchThreadsPerTile:(CDStruct_14f26992)arg1 inRegion:(CDStruct_1e3be3a8)arg2;	// IMP=0x0000000000073cb6
- (void)dispatchThreadsPerTile:(CDStruct_14f26992)arg1;	// IMP=0x0000000000073ca2
- (void)setTileSamplerStates:(const id *)arg1 lodMinClamps:(const float *)arg2 lodMaxClamps:(const float *)arg3 withRange:(struct _NSRange)arg4;	// IMP=0x0000000000073827
- (void)setTileSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 atIndex:(unsigned long long)arg4;	// IMP=0x000000000007351c
- (void)setTileSamplerStates:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x000000000007312b
- (void)setTileSamplerState:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000072e5b
- (void)setTileTextures:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x0000000000072a67
- (void)setTileTexture:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000072794
- (void)setTileBuffers:(const id *)arg1 offsets:(const unsigned long long *)arg2 withRange:(struct _NSRange)arg3;	// IMP=0x0000000000072298
- (void)setTileBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x0000000000071fe6
- (void)setTileBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x0000000000071c6f
- (void)setTileBytes:(const void *)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x0000000000071a85
- (void)setFragmentTexture:(id)arg1 atTextureIndex:(unsigned long long)arg2 samplerState:(id)arg3 atSamplerIndex:(unsigned long long)arg4;	// IMP=0x0000000000071565
- (void)setFragmentSamplerStates:(const id *)arg1 lodMinClamps:(const float *)arg2 lodMaxClamps:(const float *)arg3 withRange:(struct _NSRange)arg4;	// IMP=0x00000000000710e1
- (void)setFragmentSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 lodBias:(float)arg4 atIndex:(unsigned long long)arg5;	// IMP=0x0000000000070dc7
- (void)setFragmentSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 atIndex:(unsigned long long)arg4;	// IMP=0x0000000000070aa1
- (void)setFragmentSamplerStates:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x000000000007069b
- (void)setFragmentSamplerState:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x00000000000703b0
- (void)setFragmentTextures:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x000000000006ff71
- (void)setFragmentTexture:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x000000000006fc51
- (void)setFragmentBuffers:(const id *)arg1 offsets:(const unsigned long long *)arg2 withRange:(struct _NSRange)arg3;	// IMP=0x000000000006f777
- (void)setFragmentBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x000000000006f4a2
- (void)setFragmentBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x000000000006f11f
- (void)setFragmentBytes:(const void *)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x000000000006ef29
- (void)setVertexSamplerStates:(const id *)arg1 lodMinClamps:(const float *)arg2 lodMaxClamps:(const float *)arg3 withRange:(struct _NSRange)arg4;	// IMP=0x000000000006eaa5
- (void)setVertexSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 lodBias:(float)arg4 atIndex:(unsigned long long)arg5;	// IMP=0x000000000006e78b
- (void)setVertexSamplerState:(id)arg1 lodMinClamp:(float)arg2 lodMaxClamp:(float)arg3 atIndex:(unsigned long long)arg4;	// IMP=0x000000000006e465
- (void)setVertexSamplerStates:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x000000000006e05f
- (void)setVertexSamplerState:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x000000000006dd74
- (void)setVertexTextures:(const id *)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x000000000006d935
- (void)setVertexTexture:(id)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x000000000006d62f
- (void)setVertexBuffers:(const id *)arg1 offsets:(const unsigned long long *)arg2 withRange:(struct _NSRange)arg3;	// IMP=0x000000000006d16e
- (void)setVertexBufferOffset:(unsigned long long)arg1 atIndex:(unsigned long long)arg2;	// IMP=0x000000000006cecf
- (void)setVertexBuffer:(id)arg1 offset:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x000000000006cb72
- (void)setVertexBytes:(const void *)arg1 length:(unsigned long long)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x000000000006c92f
- (void)setRenderPipelineState:(id)arg1;	// IMP=0x000000000006c531
- (void)validateFramebufferWithRenderPipelineState:(id)arg1 context:(struct _MTLMessageContext *)arg2;	// IMP=0x000000000006c022
- (id)description;	// IMP=0x000000000006c00e
- (id)formattedDescription:(unsigned long long)arg1;	// IMP=0x000000000006aecb
- (void)dealloc;	// IMP=0x000000000006adbb
- (id)initWithRenderCommandEncoder:(id)arg1 parent:(id)arg2 descriptor:(id)arg3;	// IMP=0x000000000006a7f8
- (void)_setDefaults;	// IMP=0x000000000006a09f
- (void)enumerateThreadgroupMemoryUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000006a042
- (void)enumerateTileSamplersUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069fe5
- (void)enumerateTileTexturesUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069f88
- (void)enumerateTileBuffersUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069f2b
- (void)enumerateFragmentSamplersUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069ece
- (void)enumerateFragmentTexturesUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069e71
- (void)enumerateFragmentBuffersUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069e14
- (void)enumerateVertexSamplersUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069db7
- (void)enumerateVertexTexturesUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069d5a
- (void)enumerateVertexBuffersUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000069cfd
@property(readonly, nonatomic) CDStruct_33dcf794 scissorRect;
@property(readonly, nonatomic) CDStruct_8727d297 viewport;
@property(readonly, nonatomic) void *scissorRects;
@property(readonly, nonatomic) void *viewports;

@end

