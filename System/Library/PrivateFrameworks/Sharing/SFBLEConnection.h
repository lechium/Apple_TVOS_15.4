//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CURetrier, NSMutableArray, NSMutableSet, SFBLEData, SFBLEDevice;
@protocol OS_dispatch_queue;

@interface SFBLEConnection : NSObject
{
    _Bool _acceptor;	// 8 = 0x8
    _Bool _activateCalled;	// 9 = 0x9
    NSMutableSet *_clients;	// 16 = 0x10
    _Bool _connected;	// 24 = 0x18
    _Bool _connecting;	// 25 = 0x19
    double _connectStartTime;	// 32 = 0x20
    CURetrier *_connectRetrier;	// 40 = 0x28
    SFBLEData *_currentData;	// 48 = 0x30
    NSMutableArray *_dataSendQueue;	// 56 = 0x38
    _Bool _invalidateCalled;	// 64 = 0x40
    struct LogCategory *_ucat;	// 72 = 0x48
    _Bool _bleEncrypted;	// 80 = 0x50
    _Bool _latencyCritical;	// 81 = 0x51
    _Bool _lePipeCapable;	// 82 = 0x52
    unsigned int _sessionFlags;	// 84 = 0x54
    CDUnknownBlockType _bluetoothBandwidthChangedHandler;	// 88 = 0x58
    CDUnknownBlockType _bluetoothStateChangedHandler;	// 96 = 0x60
    CDUnknownBlockType _connectionStateChangedHandler;	// 104 = 0x68
    CDUnknownBlockType _dataHandler;	// 112 = 0x70
    NSObject<OS_dispatch_queue> *_dispatchQueue;	// 120 = 0x78
    CDUnknownBlockType _invalidationHandler;	// 128 = 0x80
    SFBLEDevice *_peerDevice;	// 136 = 0x88
}

- (void).cxx_destruct;	// IMP=0x0000000000078b75
@property(nonatomic) _Bool lePipeCapable; // @synthesize lePipeCapable=_lePipeCapable;
@property(nonatomic) _Bool latencyCritical; // @synthesize latencyCritical=_latencyCritical;
@property(nonatomic) _Bool bleEncrypted; // @synthesize bleEncrypted=_bleEncrypted;
@property(nonatomic) unsigned int sessionFlags; // @synthesize sessionFlags=_sessionFlags;
@property(retain, nonatomic) SFBLEDevice *peerDevice; // @synthesize peerDevice=_peerDevice;
@property(copy, nonatomic) CDUnknownBlockType invalidationHandler; // @synthesize invalidationHandler=_invalidationHandler;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *dispatchQueue; // @synthesize dispatchQueue=_dispatchQueue;
@property(copy, nonatomic) CDUnknownBlockType dataHandler; // @synthesize dataHandler=_dataHandler;
@property(copy, nonatomic) CDUnknownBlockType connectionStateChangedHandler; // @synthesize connectionStateChangedHandler=_connectionStateChangedHandler;
@property(copy, nonatomic) CDUnknownBlockType bluetoothStateChangedHandler; // @synthesize bluetoothStateChangedHandler=_bluetoothStateChangedHandler;
@property(copy, nonatomic) CDUnknownBlockType bluetoothBandwidthChangedHandler; // @synthesize bluetoothBandwidthChangedHandler=_bluetoothBandwidthChangedHandler;
@property(nonatomic) _Bool acceptor; // @synthesize acceptor=_acceptor;
- (_Bool)removeClient:(id)arg1;	// IMP=0x00000000000789e4
- (void)addClient:(id)arg1;	// IMP=0x0000000000078945
- (void)_cleanupQueuedData:(int)arg1;	// IMP=0x00000000000784a3
- (void)_processQueuedData;	// IMP=0x0000000000078362
- (void)_connectIfNeeded;	// IMP=0x00000000000782f9
- (void)sendDataDirect:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000007823c
- (void)sendData:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000078163
- (void)_invalidate;	// IMP=0x0000000000078001
- (void)invalidate;	// IMP=0x0000000000077fa0
- (void)_activate;	// IMP=0x0000000000077e2c
- (void)activateDirect;	// IMP=0x0000000000077ddb
- (void)activate;	// IMP=0x0000000000077d55
@property(readonly, nonatomic) long long connectionState;
- (id)description;	// IMP=0x0000000000077a2e
- (void)dealloc;	// IMP=0x00000000000779cc
- (id)initWithDevice:(id)arg1 acceptor:(_Bool)arg2;	// IMP=0x0000000000077849

@end

