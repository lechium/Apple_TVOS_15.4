//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <PhotoLibraryServices/PLCloudDeletable-Protocol.h>
#import <PhotoLibraryServices/PLFileSystemMetadataPersistence-Protocol.h>
#import <PhotoLibraryServices/PLSyncablePerson-Protocol.h>
#import <PhotoLibraryServices/PLUserFeedbackSupporting-Protocol.h>

@class NSDictionary, NSSet, NSString, PLDetectedFace, PLDetectedFaceGroup;

@interface PLPerson <PLSyncablePerson, PLCloudDeletable, PLFileSystemMetadataPersistence, PLUserFeedbackSupporting>
{
}

+ (id)fetchFinalMergeTargetPersonForPersonWithUUID:(id)arg1 context:(id)arg2 predicate:(id)arg3;	// IMP=0x00000000005593ed
+ (_Bool)resetAllInLibrary:(id)arg1 error:(id *)arg2;	// IMP=0x00000000005591e2
+ (id)predicateToExcludeTorsoOnlyPerson;	// IMP=0x00000000005591b9
+ (id)predicateForIncludedDetectionTypes:(id)arg1;	// IMP=0x00000000005590e0
+ (id)predicateForPersistence;	// IMP=0x00000000005590a1
+ (id)predicateForVisibleKeyFace;	// IMP=0x0000000000558efe
+ (id)predicateForPersonsNeedingFaceCropGenerationForFaceObjectID:(id)arg1;	// IMP=0x0000000000558b44
+ (id)_stringFromContact:(id)arg1 preferGivenName:(_Bool)arg2;	// IMP=0x0000000000558aa7
+ (id)displayNameFromContact:(id)arg1;	// IMP=0x0000000000558a90
+ (id)fullNameFromContact:(id)arg1;	// IMP=0x0000000000558a7c
+ (void)batchFetchAssociatedPersonByFaceGroupUUIDWithFaceGroupUUIDs:(id)arg1 predicate:(id)arg2 library:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000000055899e
+ (id)fetchPersonCountByAssetUUIDForAssetUUIDs:(id)arg1 predicate:(id)arg2 library:(id)arg3 error:(id *)arg4;	// IMP=0x00000000005587b4
+ (void)batchFetchPersonsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 library:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x00000000005586a0
+ (void)batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 inManagedObjectContext:(id)arg3 completion:(CDUnknownBlockType)arg4;	// IMP=0x000000000055858f
+ (id)_batchFetchPersonUUIDsByAssetUUIDWithAssetUUIDs:(id)arg1 predicate:(id)arg2 inManagedObjectContext:(id)arg3 error:(id *)arg4;	// IMP=0x0000000000557f7e
+ (id)listOfPropertiesToResetAgeAndGender;	// IMP=0x0000000000557f28
+ (id)entityName;	// IMP=0x0000000000557f1b
+ (void)createAssociatedPersonForFaceGroup:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x0000000000557e16
+ (void)createAssociatedPersonForFaceGroup:(id)arg1;	// IMP=0x0000000000557da4
+ (id)cloudUUIDKeyForDeletion;	// IMP=0x0000000000557d97
+ (long long)cloudDeletionTypeForTombstone:(id)arg1;	// IMP=0x0000000000557d8c
+ (id)personsWithUUIDs:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x0000000000557ce8
+ (id)personsWithPersonUri:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x0000000000557c19
+ (id)allPersonsInManagedObjectContext:(id)arg1;	// IMP=0x0000000000557bf0
+ (id)personWithUUID:(id)arg1 inManagedObjectContext:(id)arg2;	// IMP=0x0000000000557ac7
+ (id)personsMatchingPredicate:(id)arg1 fetchLimit:(unsigned long long)arg2 sortDescriptors:(id)arg3 relationshipKeyPathsForPrefetching:(id)arg4 inManagedObjectContext:(id)arg5;	// IMP=0x000000000055790a
+ (id)insertIntoManagedObjectContext:(id)arg1 withPersonUUID:(id)arg2 fullName:(id)arg3 verifiedType:(int)arg4;	// IMP=0x0000000000557794
+ (id)insertIntoPhotoLibrary:(id)arg1 withPersonUUID:(id)arg2 fullName:(id)arg3 verifiedType:(int)arg4;	// IMP=0x0000000000557655
+ (void)enumerateAssetUUIDsForSearchIndexingWithPersonUUID:(id)arg1 managedObjectContext:(id)arg2 assetUUIDHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000003aed03
+ (_Bool)person:(id)arg1 isBetterMergeTargetThanPerson:(id)arg2;	// IMP=0x000000000059ecb1
+ (void)resetCloudStateInPhotoLibrary:(id)arg1;	// IMP=0x000000000059ea20
+ (id)personsToPrefetchInManagedObjectContext:(id)arg1;	// IMP=0x000000000059e892
+ (id)personsToUploadInManagedObjectContext:(id)arg1 limit:(long long)arg2;	// IMP=0x000000000059e6ae
+ (id)_predicateForSupportedDetectionTypesForUpload;	// IMP=0x000000000059e68a
+ (id)_predicateForSupportedVerifiedTypesForUpload;	// IMP=0x000000000059e666
+ (id)listOfSyncedProperties;	// IMP=0x000000000059e581
- (_Bool)dedupeGraphPersons:(id)arg1 error:(id *)arg2;	// IMP=0x00000000005568db
- (void)mergePersons:(id)arg1 withOptimalState:(id)arg2;	// IMP=0x0000000000556478
- (void)basicMergePersons:(id)arg1;	// IMP=0x0000000000556406
- (void)_basicMergePersons:(id)arg1;	// IMP=0x0000000000554db1
- (id)finalMergeTargetPerson;	// IMP=0x0000000000554bc7
- (id)pickKeyFaceOptimalStateForContactDedupeWithPersons:(id)arg1;	// IMP=0x00000000005548f4
- (void)prepareForUserInitiatedMergeWithPersons:(id)arg1;	// IMP=0x000000000055408a
- (id)reverseOrderedMergeTargetPersons;	// IMP=0x0000000000553ef5
- (id)pickOptimalStateForUserInitiatedMergeWithPersons:(id)arg1 nominalTarget:(id)arg2;	// IMP=0x000000000055361b
- (id)_nameRelatedMetadataKeys;	// IMP=0x0000000000553593
- (void)removePersistedFileSystemDataWithPathManager:(id)arg1;	// IMP=0x000000000055349d
- (void)persistMetadataToFileSystemWithPathManager:(id)arg1;	// IMP=0x00000000005533a7
- (_Bool)isValidForPersistence;	// IMP=0x0000000000553359
- (void)refreshInvalidMergeCandidates;	// IMP=0x0000000000553340
- (void)refereshMergeCandidates;	// IMP=0x0000000000553327
- (void)refreshFaceCrops;	// IMP=0x0000000000552fe4
- (void)refreshRejectedFaces;	// IMP=0x0000000000552ca1
- (void)refreshFaces;	// IMP=0x000000000055295e
- (void)_refreshRelationshipForKey:(id)arg1;	// IMP=0x00000000005525ed
@property(nonatomic) int effectiveVerifiedType;
- (void)rejectFaceIfPossible:(id)arg1 shouldCreateFaceCrop:(_Bool)arg2;	// IMP=0x0000000000552453
- (void)resetAllFacesToDefault;	// IMP=0x00000000005520cd
- (id)faceGroupDescription;	// IMP=0x0000000000552018
- (id)debugLogDescription;	// IMP=0x0000000000551f06
- (void)setKeyFace:(id)arg1 pickSource:(short)arg2;	// IMP=0x0000000000551ea1
- (id)mutableInvalidMergeCandidates;	// IMP=0x0000000000551e88
- (id)mutableMergeCandidates;	// IMP=0x0000000000551e6f
- (id)mutableFaceCrops;	// IMP=0x0000000000551e56
- (id)mutableRejectedFacesNeedingFaceCrops;	// IMP=0x0000000000551e3d
- (id)mutableRejectedFaces;	// IMP=0x0000000000551e24
- (id)mutableFaces;	// IMP=0x0000000000551e0b
- (void)willSave;	// IMP=0x0000000000551620
- (void)disconnectFaceGroup;	// IMP=0x00000000005515a7
@property(readonly, copy) NSString *cloudUUIDForDeletion;
@property(readonly) long long cloudDeletionType;
- (void)prepareForDeletion;	// IMP=0x000000000055146d
@property(readonly, nonatomic) _Bool shouldIndexForSearch;
- (_Bool)validForPersistenceChangedForChangedKeys:(id)arg1;	// IMP=0x000000000042a525
- (id)payloadIDForTombstone:(id)arg1;	// IMP=0x000000000042a4b8
- (id)payloadForChangedKeys:(id)arg1;	// IMP=0x000000000042a450
- (id)payloadID;	// IMP=0x000000000042a3ed
- (id)syncDescription;	// IMP=0x000000000059e469
@property(readonly, nonatomic) _Bool isTombstone;
@property(readonly, nonatomic) _Bool graphVerified;
@property(readonly, nonatomic) _Bool userVerified;
- (void)setKeyFaceToPicked;	// IMP=0x000000000059e407
@property(readonly, nonatomic) _Bool keyFaceIsPicked;
@property(readonly, retain, nonatomic) id localID;
- (void)setCPLSyncedMergeTarget:(id)arg1;	// IMP=0x000000000059e209
- (id)cplPersonChange;	// IMP=0x000000000059deda
- (id)momentShare;	// IMP=0x000000000059ded2
- (void)applyCPLChangeForContactMatchingDictionary:(id)arg1;	// IMP=0x000000000059db36
- (id)cplFullRecord;	// IMP=0x000000000059db24
- (_Bool)isSyncableChange;	// IMP=0x000000000059d986
- (_Bool)supportsCloudUpload;	// IMP=0x000000000059d8de

// Remaining properties
@property(nonatomic) unsigned short ageType; // @dynamic ageType;
@property(retain, nonatomic) PLDetectedFaceGroup *associatedFaceGroup; // @dynamic associatedFaceGroup;
@property(nonatomic) short cloudDeleteState; // @dynamic cloudDeleteState;
@property(nonatomic) short cloudLocalState; // @dynamic cloudLocalState;
@property(nonatomic) int cloudVerifiedType; // @dynamic cloudVerifiedType;
@property(retain, nonatomic) NSSet *clusterRejectedFaces; // @dynamic clusterRejectedFaces;
@property(retain, nonatomic) NSDictionary *contactMatchingDictionary; // @dynamic contactMatchingDictionary;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(retain, nonatomic) NSSet *detectedFaces; // @dynamic detectedFaces;
@property(nonatomic) short detectionType; // @dynamic detectionType;
@property(retain, nonatomic) NSString *displayName; // @dynamic displayName;
@property(readonly, nonatomic) int faceCount; // @dynamic faceCount;
@property(retain, nonatomic) NSSet *faceCrops; // @dynamic faceCrops;
@property(retain, nonatomic) NSString *fullName; // @dynamic fullName;
@property(nonatomic) unsigned short genderType; // @dynamic genderType;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool inPersonNamingModel; // @dynamic inPersonNamingModel;
@property(retain, nonatomic) NSSet *invalidMergeCandidates; // @dynamic invalidMergeCandidates;
@property(retain, nonatomic) PLDetectedFace *keyFace; // @dynamic keyFace;
@property(nonatomic) short keyFacePickSource; // @dynamic keyFacePickSource;
@property(nonatomic) unsigned int manualOrder; // @dynamic manualOrder;
@property(retain, nonatomic) NSSet *mergeCandidates; // @dynamic mergeCandidates;
@property(retain, nonatomic) NSSet *mergeSourcePersons; // @dynamic mergeSourcePersons;
@property(retain, nonatomic) PLPerson *mergeTargetPerson; // @dynamic mergeTargetPerson;
@property(retain, nonatomic) NSSet *personReferences; // @dynamic personReferences;
@property(retain, nonatomic) NSString *personUUID; // @dynamic personUUID;
@property(retain, nonatomic) NSString *personUri; // @dynamic personUri;
@property(nonatomic) short questionType; // @dynamic questionType;
@property(retain, nonatomic) NSSet *rejectedFaces; // @dynamic rejectedFaces;
@property(retain, nonatomic) NSSet *rejectedFacesNeedingFaceCrops; // @dynamic rejectedFacesNeedingFaceCrops;
@property(nonatomic) unsigned short suggestedForClientType; // @dynamic suggestedForClientType;
@property(readonly) Class superclass;
@property(nonatomic) int type; // @dynamic type;
@property(retain, nonatomic) NSSet *userFeedbacks; // @dynamic userFeedbacks;
@property(nonatomic) int verifiedType; // @dynamic verifiedType;

@end

