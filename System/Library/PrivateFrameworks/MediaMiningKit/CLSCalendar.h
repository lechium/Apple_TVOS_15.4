//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@interface CLSCalendar : NSObject
{
}

+ (id)localStartSeasonDateForLocalDate:(id)arg1;	// IMP=0x0000000000079e6f
+ (_Bool)supportsSeasonsWithLocale:(id)arg1;	// IMP=0x0000000000079dc4
+ (_Bool)currentLocaleSupportsSeasons;	// IMP=0x0000000000079d6a
+ (id)localStartDateForNextSeasonAfterLocalDate:(id)arg1;	// IMP=0x0000000000079d03
+ (_Bool)isLastMonthOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079c9a
+ (_Bool)isMiddleMonthOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079c32
+ (id)localDateIntervalOfFirstTenDaysOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079b37
+ (_Bool)isFirstTenDaysOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079ac0
+ (_Bool)isFirstMonthOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079a57
+ (_Bool)isSecondHalfOfSeasonForLocalDate:(id)arg1;	// IMP=0x0000000000079958
+ (id)seasonNameForLocalDate:(id)arg1 locale:(id)arg2;	// IMP=0x00000000000798ca
+ (id)seasonNameForDateComponents:(id)arg1 locale:(id)arg2;	// IMP=0x0000000000079793
+ (_Bool)isCountryCodePartOfSouthernHemisphere:(id)arg1;	// IMP=0x00000000000796f7
+ (_Bool)isCountryCodePartOfNorthernHemisphere:(id)arg1;	// IMP=0x000000000007965b
+ (id)s_seasonCountryCodesDictionary;	// IMP=0x00000000000795f8
+ (id)southernMeteorologicalSeasonNameForDateComponents:(id)arg1;	// IMP=0x00000000000795aa
+ (id)northernMeteorologicalSeasonNameForDateComponents:(id)arg1;	// IMP=0x000000000007955c
+ (id)components:(unsigned long long)arg1 fromDateComponents:(id)arg2 toDateComponents:(id)arg3 options:(unsigned long long)arg4;	// IMP=0x000000000007948a
+ (_Bool)isFirstTwoWeeksOfMonthForLocalDate:(id)arg1;	// IMP=0x0000000000079400
+ (_Bool)isLastTwoWeeksOfMonthForLocalDate:(id)arg1;	// IMP=0x0000000000079376
+ (_Bool)isLastWeekOfMonthForLocalDate:(id)arg1;	// IMP=0x00000000000792ec
+ (struct _NSRange)rangeOfUnit:(unsigned long long)arg1 inUnit:(unsigned long long)arg2 forDate:(id)arg3;	// IMP=0x0000000000079226
+ (long long)compareDate:(id)arg1 toDate:(id)arg2 toUnitGranularity:(unsigned long long)arg3;	// IMP=0x000000000007916c
+ (long long)numberOfDaysBetweenDate:(id)arg1 andDate:(id)arg2;	// IMP=0x000000000007910e
+ (id)dateFromComponents:(unsigned long long)arg1 ofDate:(id)arg2;	// IMP=0x000000000007900f
+ (id)dateByAddingWeeksOfYear:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078f0c
+ (id)dateByAddingYears:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078e09
+ (id)dateByAddingMonths:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078d06
+ (id)dateByAddingDays:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078c03
+ (id)dateByAddingHours:(long long)arg1 toDate:(id)arg2;	// IMP=0x0000000000078b00
+ (long long)hourFromDate:(id)arg1;	// IMP=0x0000000000078a57
+ (long long)dayOfWeekFromDate:(id)arg1;	// IMP=0x000000000007899d
+ (long long)dayFromDate:(id)arg1;	// IMP=0x00000000000788f4
+ (long long)weekOfMonthFromDate:(id)arg1;	// IMP=0x000000000007884b
+ (long long)weekOfYearFromDate:(id)arg1;	// IMP=0x00000000000787a2
+ (long long)monthFromDate:(id)arg1;	// IMP=0x00000000000786f9
+ (long long)yearForWeekOfYearFromDate:(id)arg1;	// IMP=0x0000000000078650
+ (long long)yearFromDate:(id)arg1;	// IMP=0x00000000000785a7
+ (id)components:(unsigned long long)arg1 fromDate:(id)arg2;	// IMP=0x00000000000784f8
+ (id)endOfMonthForDate:(id)arg1;	// IMP=0x0000000000078407
+ (id)startOfMonthForDate:(id)arg1;	// IMP=0x0000000000078309
+ (id)endOfWeekForDate:(id)arg1;	// IMP=0x0000000000078218
+ (id)startOfWeekForDate:(id)arg1;	// IMP=0x000000000007811a
+ (id)endOfDayForDate:(id)arg1;	// IMP=0x0000000000078029
+ (id)startOfDayForDate:(id)arg1;	// IMP=0x0000000000077f65
+ (id)timeZoneFromLocation:(id)arg1;	// IMP=0x0000000000077f50
+ (id)localDateFormatterWithFormat:(id)arg1;	// IMP=0x0000000000077eba
+ (id)dateBySettingYear:(long long)arg1 ofDate:(id)arg2;	// IMP=0x0000000000077da6
+ (id)localDateFromUniversalDate:(id)arg1 atLocation:(id)arg2;	// IMP=0x0000000000077cc2
+ (id)universalDateFromLocalDate:(id)arg1 atLocation:(id)arg2;	// IMP=0x0000000000077bde
+ (id)localDateFromUniversalDate:(id)arg1;	// IMP=0x0000000000077b51
+ (id)localDateFromUniversalDate:(id)arg1 inTimeZone:(id)arg2;	// IMP=0x00000000000779ea
+ (id)universalDateFromLocalDate:(id)arg1;	// IMP=0x000000000007795d
+ (id)universalDateFromLocalDate:(id)arg1 inTimeZone:(id)arg2;	// IMP=0x000000000007781e
+ (id)componentsFromDate:(id)arg1 inTimeZone:(id)arg2;	// IMP=0x000000000007773e
+ (id)dateFromComponents:(id)arg1 inTimeZone:(id)arg2;	// IMP=0x0000000000077648
+ (id)dateComponentsWithLocalDate:(id)arg1;	// IMP=0x000000000007757d
+ (id)dateComponentsWithUTCDate:(id)arg1 localDate:(id)arg2;	// IMP=0x0000000000077450
+ (id)currentLocalDate;	// IMP=0x00000000000773af
+ (id)validDateForDate:(id)arg1;	// IMP=0x00000000000771c6
+ (_Bool)isDateValid:(id)arg1;	// IMP=0x0000000000077109
+ (void)initialize;	// IMP=0x00000000000770a8

@end

