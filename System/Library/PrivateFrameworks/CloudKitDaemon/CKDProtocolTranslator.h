//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CKDPIdentifier, NSMutableDictionary, NSString;
@protocol CKDProtocolTranslatorIdentityDelegate;

@interface CKDProtocolTranslator : NSObject
{
    _Bool _dontCreateValidatingParentReferences;	// 8 = 0x8
    NSString *_packageStagingDirectory;	// 16 = 0x10
    NSString *_orgAdminUserID;	// 24 = 0x18
    long long _databaseScope;	// 32 = 0x20
    id <CKDProtocolTranslatorIdentityDelegate> _identityDelegate;	// 40 = 0x28
    NSString *_containerScopedUserID;	// 48 = 0x30
    NSString *_overriddenContainerScopedUserID;	// 56 = 0x38
    NSMutableDictionary *_downloadPreauthorizationMap;	// 64 = 0x40
}

+ (id)translatorIgnoringUserIDsWithPackageStagingDirectory:(id)arg1 databaseScope:(long long)arg2;	// IMP=0x00000000002d2aba
- (void).cxx_destruct;	// IMP=0x00000000002e1309
@property(retain, nonatomic) NSMutableDictionary *downloadPreauthorizationMap; // @synthesize downloadPreauthorizationMap=_downloadPreauthorizationMap;
@property(copy, nonatomic) NSString *overriddenContainerScopedUserID; // @synthesize overriddenContainerScopedUserID=_overriddenContainerScopedUserID;
@property(copy, nonatomic) NSString *containerScopedUserID; // @synthesize containerScopedUserID=_containerScopedUserID;
@property(nonatomic) __weak id <CKDProtocolTranslatorIdentityDelegate> identityDelegate; // @synthesize identityDelegate=_identityDelegate;
@property(readonly, nonatomic) long long databaseScope; // @synthesize databaseScope=_databaseScope;
@property(copy, nonatomic) NSString *orgAdminUserID; // @synthesize orgAdminUserID=_orgAdminUserID;
@property(copy, nonatomic) NSString *packageStagingDirectory; // @synthesize packageStagingDirectory=_packageStagingDirectory;
@property(nonatomic) _Bool dontCreateValidatingParentReferences; // @synthesize dontCreateValidatingParentReferences=_dontCreateValidatingParentReferences;
- (id)throttleFromPThrottlingConfig:(id)arg1;	// IMP=0x00000000002e0a22
- (id)identityFromPUser:(id)arg1;	// IMP=0x00000000002e0859
- (id)pAliasWithUserRecordID:(id)arg1;	// IMP=0x00000000002e077b
- (id)pAliasWithHashedStringID:(id)arg1 type:(int)arg2;	// IMP=0x00000000002e061c
- (id)pAliasWithPhoneNumber:(id)arg1;	// IMP=0x00000000002e05c7
- (id)pAliasWithEmailAddress:(id)arg1;	// IMP=0x00000000002e05b0
- (id)pAliasWithIdentityLookupInfo:(id)arg1;	// IMP=0x00000000002e0430
- (id)notificationFromPPushMessage:(id)arg1;	// IMP=0x00000000002dfc5e
- (id)pParticipantFromShareParticipant:(id)arg1 forCache:(_Bool)arg2;	// IMP=0x00000000002dede8
- (id)shareParticipantFromPParticipant:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002de208
- (id)pShareFromShare:(id)arg1 forCache:(_Bool)arg2;	// IMP=0x00000000002ddb8b
- (id)shareFromPShare:(id)arg1 asAnonymousCKUserID:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002dcfe4
- (id)shareFromPShare:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002dcfcd
- (id)containerPrivacySettingsFromPContainerPrivacySettings:(id)arg1;	// IMP=0x00000000002dcd8c
- (unsigned long long)capabilitiesFromPZoneCapabilities:(id)arg1;	// IMP=0x00000000002dccf5
- (id)pRecordZoneFromRecordZone:(id)arg1;	// IMP=0x00000000002dc991
- (id)recordZoneFromPRecordZone:(id)arg1 asAnonymousCKUserID:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002dc5a7
- (id)recordZoneFromPRecordZone:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002dc590
- (id)pSubscriptionFromSubscription:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002db33b
- (id)subscriptionFromPSubscription:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002da346
- (id)pQueryFromQuery:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d9dd5
- (id)streamingAssetFromPStreamingAsset:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d99f2
- (id)pStreamingAssetFromStreamingAsset:(id)arg1 forCache:(_Bool)arg2;	// IMP=0x00000000002d95cd
- (id)pPackageFromPackage:(id)arg1;	// IMP=0x00000000002d9374
- (id)packageFromPPackage:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d900f
- (id)pAssetFromAsset:(id)arg1;	// IMP=0x00000000002d8ccc
- (id)assetFromPAsset:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d86b8
- (id)deltaPRecordFromRecord:(id)arg1 withAllFields:(_Bool)arg2 outDeletedMergeFields:(id *)arg3 outKeysToSend:(id *)arg4;	// IMP=0x00000000002d7ad2
- (id)pRecordFromRecord:(id)arg1;	// IMP=0x00000000002d7abe
- (id)pRecordFromRecord:(id)arg1 forCache:(_Bool)arg2;	// IMP=0x00000000002d7001
- (id)_pRecordFromRecordSansValues:(id)arg1 forCache:(_Bool)arg2;	// IMP=0x00000000002d5e39
- (_Bool)_valueTypeIsAnEncryptedBytesTypeForField:(id)arg1;	// IMP=0x00000000002d5d95
- (id)recordFromPRecord:(id)arg1 asAnonymousCKUserID:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002d4528
- (id)recordFromPRecord:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d4511
- (id)pReferenceFromReference:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d4428
- (id)referenceFromPReference:(id)arg1 asAnonymousCKUserID:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002d4237
- (id)referenceFromPReference:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d4220
- (id)recordIDFromPShareIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d4209
- (id)recordIDFromPShareIdentifier:(id)arg1 asAnonymousCKUserID:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002d4061
- (id)pShareIdentifierFromRecordID:(id)arg1;	// IMP=0x00000000002d3f60
- (id)pContainerScopedRecordZoneIdentifierFromFromPRecordZoneIdentifier:(id)arg1;	// IMP=0x00000000002d3e25
- (id)pRecordZoneIdentifierFromRecordZoneID:(id)arg1;	// IMP=0x00000000002d3d24
- (id)recordZoneIDFromPRecordZoneIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d3d0d
- (id)recordZoneIDFromPRecordZoneIdentifier:(id)arg1 asAnonymousCKUserID:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002d3b3f
- (id)pContainerScopedRecordIdentifierWithPRecordIdentifier:(id)arg1;	// IMP=0x00000000002d3a20
- (id)pRecordIdentifierFromRecordID:(id)arg1;	// IMP=0x00000000002d3919
- (id)recordIDFromPRecordIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d3902
- (id)recordIDFromPRecordIdentifier:(id)arg1 asAnonymousCKUserID:(id)arg2 error:(id *)arg3;	// IMP=0x00000000002d363a
- (id)userNameFromPIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d3527
- (id)pRecordIdentifierFromUserRecordName:(id)arg1;	// IMP=0x00000000002d34a3
- (id)pContainerScopedUserIdentifierFromPUserIdentifier:(id)arg1;	// IMP=0x00000000002d341f
- (id)pUserIdentifierFromUserRecordName:(id)arg1;	// IMP=0x00000000002d3358
- (id)pIdentifierFromUserRecordID:(id)arg1;	// IMP=0x00000000002d32bb
- (id)recordIDFromPUserName:(id)arg1 error:(id *)arg2;	// IMP=0x00000000002d3209
@property(readonly, nonatomic) CKDPIdentifier *pUserID;
- (_Bool)_isDefaultUserNameFromClient:(id)arg1;	// IMP=0x00000000002d3128
- (_Bool)_isDefaultUserNameFromServer:(id)arg1;	// IMP=0x00000000002d309a
- (void)consumeResponseHeader:(id)arg1;	// IMP=0x00000000002d2b2d
- (id)initWithPackageStagingDirectory:(id)arg1 databaseScope:(long long)arg2;	// IMP=0x00000000002d2a9e
- (id)initWithContainerScopedUserID:(id)arg1 orgAdminUserID:(id)arg2 packageStagingDirectory:(id)arg3 databaseScope:(long long)arg4;	// IMP=0x00000000002d29ab
- (id)_initWithContainerScopedUserID:(id)arg1 orgAdminUserID:(id)arg2 packageStagingDirectory:(id)arg3 databaseScope:(long long)arg4;	// IMP=0x00000000002d28e8
- (id)pFieldActionWithLocation:(long long)arg1 length:(unsigned long long)arg2 values:(id)arg3;	// IMP=0x00000000000e196a
- (id)pFieldWithKey:(id)arg1 value:(id)arg2;	// IMP=0x00000000000e1955
- (id)pFieldWithKey:(id)arg1 value:(id)arg2 forCache:(_Bool)arg3;	// IMP=0x00000000000e15f8
- (id)objectRepresentationFromField:(id)arg1 inRecord:(id)arg2 asAnonymousCKUserID:(id)arg3;	// IMP=0x00000000000e0b5f
- (id)objectRepresentationFromFieldValue:(id)arg1;	// IMP=0x00000000000e0ad0
- (id)encryptedObjectRepresentationFromFieldValue:(id)arg1;	// IMP=0x00000000000e0665
- (id)locationFieldValueWithLatitude:(double)arg1 longitude:(double)arg2;	// IMP=0x00000000000e054d
- (id)fieldValueOfType:(int)arg1 withObject:(id)arg2;	// IMP=0x00000000000e0538
- (id)fieldValueOfType:(int)arg1 withObject:(id)arg2 forCache:(_Bool)arg3;	// IMP=0x00000000000dfd48
- (id)encryptedFieldValueOfType:(int)arg1 withObject:(id)arg2;	// IMP=0x00000000000df80d
- (id)fieldValueFromObject:(id)arg1;	// IMP=0x00000000000df7f9
- (id)fieldValueFromObject:(id)arg1 forCache:(_Bool)arg2;	// IMP=0x00000000000df73d
- (_Bool)objectIsAnEncryptedType:(id)arg1;	// IMP=0x00000000000df6b3
- (int)fieldValueTypeFromObject:(id)arg1;	// IMP=0x00000000000df1d2
- (int)fieldValueTypeFromEncryptedDataObject:(id)arg1 isInList:(_Bool)arg2;	// IMP=0x00000000000defcd

@end

