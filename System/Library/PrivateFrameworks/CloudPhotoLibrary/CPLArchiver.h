//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <Foundation/NSCoder.h>

@interface CPLArchiver : NSCoder
{
    id _archive;	// 8 = 0x8
    id _archiveCursor;	// 16 = 0x10
    id _rootObject;	// 24 = 0x18
    _Bool _forDisplay;	// 32 = 0x20
}

+ (id)displayableDictionaryForDictionary:(id)arg1;	// IMP=0x00000000000628fa
+ (id)_displayableObjectForObject:(id)arg1;	// IMP=0x000000000006283f
+ (id)_displayableArrayForArray:(id)arg1;	// IMP=0x000000000006265d
+ (id)unarchiveObjectWithData:(id)arg1 ofClass:(Class)arg2;	// IMP=0x00000000000624f8
+ (id)fullDescriptionForObject:(id)arg1;	// IMP=0x0000000000062430
+ (id)displayablePropertyListWithRootObject:(id)arg1;	// IMP=0x00000000000623b4
+ (id)unarchivedObjectWithPropertyList:(id)arg1 ofClass:(Class)arg2;	// IMP=0x000000000006232e
+ (id)archivedDataWithRootObject:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000621d0
+ (id)archivedPropertyListWithRootObject:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000000062137
+ (id)archivedPropertyListWithRootObject:(id)arg1;	// IMP=0x00000000000620be
+ (id)archivedDataWithRootObject:(id)arg1;	// IMP=0x0000000000061f66
+ (void)_initializeSmallKeyMapping;	// IMP=0x0000000000061f46
- (void).cxx_destruct;	// IMP=0x0000000000061c16
@property(retain, nonatomic) id archiveCursor; // @synthesize archiveCursor=_archiveCursor;
@property(readonly, nonatomic) _Bool forDisplay; // @synthesize forDisplay=_forDisplay;
- (struct CGRect)decodeRectForKey:(id)arg1;	// IMP=0x0000000000061774
- (struct CGSize)decodeSizeForKey:(id)arg1;	// IMP=0x00000000000613b0
- (struct CGPoint)decodePointForKey:(id)arg1;	// IMP=0x0000000000060fec
- (void)encodeRect:(struct CGRect)arg1 forKey:(id)arg2;	// IMP=0x0000000000060d1f
- (void)encodeSize:(struct CGSize)arg1 forKey:(id)arg2;	// IMP=0x0000000000060aee
- (void)encodePoint:(struct CGPoint)arg1 forKey:(id)arg2;	// IMP=0x00000000000608bd
- (id)decodePropertyListForKey:(id)arg1;	// IMP=0x000000000006070f
- (id)decodeObjectOfClasses:(id)arg1 forKey:(id)arg2;	// IMP=0x000000000005ff9e
- (id)decodeObjectOfClass:(Class)arg1 forKey:(id)arg2;	// IMP=0x000000000005fe08
- (long long)decodeIntegerForKey:(id)arg1;	// IMP=0x000000000005fcec
- (void)encodeInteger:(long long)arg1 forKey:(id)arg2;	// IMP=0x000000000005fbe3
- (const char *)decodeBytesForKey:(id)arg1 returnedLength:(unsigned long long *)arg2;	// IMP=0x000000000005fa35
- (double)decodeDoubleForKey:(id)arg1;	// IMP=0x000000000005f915
- (float)decodeFloatForKey:(id)arg1;	// IMP=0x000000000005f7f5
- (long long)decodeInt64ForKey:(id)arg1;	// IMP=0x000000000005f6d9
- (int)decodeInt32ForKey:(id)arg1;	// IMP=0x000000000005f5bf
- (int)decodeIntForKey:(id)arg1;	// IMP=0x000000000005f4a5
- (_Bool)decodeBoolForKey:(id)arg1;	// IMP=0x000000000005f38b
- (id)decodeObjectForKey:(id)arg1;	// IMP=0x000000000005f1dd
- (_Bool)containsValueForKey:(id)arg1;	// IMP=0x000000000005f19f
- (void)encodeBytes:(const char *)arg1 length:(unsigned long long)arg2 forKey:(id)arg3;	// IMP=0x000000000005f045
- (void)encodeDouble:(double)arg1 forKey:(id)arg2;	// IMP=0x000000000005ef29
- (void)encodeFloat:(float)arg1 forKey:(id)arg2;	// IMP=0x000000000005ee10
- (void)encodeInt64:(long long)arg1 forKey:(id)arg2;	// IMP=0x000000000005ed07
- (void)encodeInt32:(int)arg1 forKey:(id)arg2;	// IMP=0x000000000005ebfe
- (void)encodeInt:(int)arg1 forKey:(id)arg2;	// IMP=0x000000000005eaf5
- (void)encodeBool:(_Bool)arg1 forKey:(id)arg2;	// IMP=0x000000000005e9ea
- (void)encodeConditionalObject:(id)arg1 forKey:(id)arg2;	// IMP=0x000000000005e886
- (void)encodeObject:(id)arg1 forKey:(id)arg2;	// IMP=0x000000000005e749
- (id)decodePropertyList;	// IMP=0x000000000005e67a
- (void)encodePropertyList:(id)arg1;	// IMP=0x000000000005e5a0
- (void *)decodeBytesWithReturnedLength:(unsigned long long *)arg1;	// IMP=0x000000000005e4d1
- (void)decodeArrayOfObjCType:(const char *)arg1 count:(unsigned long long)arg2 at:(void *)arg3;	// IMP=0x000000000005e402
- (void)decodeValuesOfObjCTypes:(const char *)arg1;	// IMP=0x000000000005e333
- (id)decodeObject;	// IMP=0x000000000005e264
- (void)encodeBytes:(const void *)arg1 length:(unsigned long long)arg2;	// IMP=0x000000000005e195
- (void)encodeArrayOfObjCType:(const char *)arg1 count:(unsigned long long)arg2 at:(const void *)arg3;	// IMP=0x000000000005e0c6
- (void)encodeValuesOfObjCTypes:(const char *)arg1;	// IMP=0x000000000005dff7
- (void)encodeConditionalObject:(id)arg1;	// IMP=0x000000000005df1d
- (void)encodeByrefObject:(id)arg1;	// IMP=0x000000000005de43
- (void)encodeBycopyObject:(id)arg1;	// IMP=0x000000000005dd69
- (void)encodeRootObject:(id)arg1;	// IMP=0x000000000005dc8f
- (void)encodeObject:(id)arg1;	// IMP=0x000000000005dbb5
- (id)initWithArchive:(id)arg1 rootClass:(Class)arg2;	// IMP=0x000000000005d82b
- (id)rootObject;	// IMP=0x000000000005d816
- (id)initWithRootObject:(id)arg1 forDisplay:(_Bool)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x000000000005d663
- (id)initWithRootObject:(id)arg1 forDisplay:(_Bool)arg2;	// IMP=0x000000000005d4f1
- (id)archivedPropertyList;	// IMP=0x000000000005d4dc
- (_Bool)allowsKeyedCoding;	// IMP=0x000000000005d4d4
- (id)_decodeKey:(id)arg1 class:(Class)arg2 inDictionary:(id)arg3;	// IMP=0x000000000005d385
- (id)_encodeKey:(id)arg1;	// IMP=0x000000000005d2e4

@end

