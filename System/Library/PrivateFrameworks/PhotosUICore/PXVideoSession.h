//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <PhotosUICore/AVPlayerItemOutputPullDelegate-Protocol.h>
#import <PhotosUICore/ISChangeObserver-Protocol.h>
#import <PhotosUICore/ISWrappedAVPlayerDelegate-Protocol.h>
#import <PhotosUICore/PXChangeObserver-Protocol.h>

@class AVPlayerItem, AVPlayerItemVideoOutput, ISWrappedAVAudioSession, ISWrappedAVPlayer, NSError, NSLock, NSMutableArray, NSMutableDictionary, NSMutableSet, NSObject, NSString, NSTimer, PXDisplayLink, PXNumberAnimator, PXVideoContentProvider;
@protocol OS_dispatch_queue, PXVideoSessionDelegate;

@interface PXVideoSession <ISChangeObserver, AVPlayerItemOutputPullDelegate, PXChangeObserver, ISWrappedAVPlayerDelegate>
{
    long long _tokenCounter;	// 8 = 0x8
    NSTimer *_playerTimeAdvancementTimer;	// 16 = 0x10
    void *_updateQueueIdentifier;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *_audioSessionQueue;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *_videoWorkQueue;	// 40 = 0x28
    NSObject<OS_dispatch_queue> *_stateQueue;	// 48 = 0x30
    NSObject<OS_dispatch_queue> *_updateQueue;	// 56 = 0x38
    NSMutableArray *_mainQueue_videoViewQueue;	// 64 = 0x40
    NSMutableDictionary *_stateQueue_presentationStatesByContext;	// 72 = 0x48
    NSMutableSet *_stateQueue_pixelBufferOutputTokens;	// 80 = 0x50
    NSMutableDictionary *_stateQueue_pixelBufferOutputSizesByTokens;	// 88 = 0x58
    NSMutableSet *_stateQueue_pixelBufferPausedOutputTokens;	// 96 = 0x60
    PXDisplayLink *_stateQueue_displayLink;	// 104 = 0x68
    id _stateQueue_playbackTimeRangeEndBoundaryObserver;	// 112 = 0x70
    long long _stateQueue_playState;	// 120 = 0x78
    NSString *_stateQueue_audioSessionCategory;	// 128 = 0x80
    unsigned long long _stateQueue_audioSessionCategoryOptions;	// 136 = 0x88
    NSString *_stateQueue_audioSessionMode;	// 144 = 0x90
    unsigned long long _stateQueue_audioSessionRouteSharingPolicy;	// 152 = 0x98
    _Bool _stateQueue_isUpdatingAudioSession;	// 160 = 0xa0
    _Bool _stateQueue_buffering;	// 161 = 0xa1
    long long _stateQueue_desiredPlayState;	// 168 = 0xa8
    AVPlayerItemVideoOutput *_stateQueue_videoOutput;	// 176 = 0xb0
    struct CGSize _stateQueue_videoOutputSize;	// 184 = 0xb8
    _Bool _stateQueue_videoOutputIsReady;	// 200 = 0xc8
    CDStruct_1b6d18a9 _stateQueue_videoDuration;	// 204 = 0xcc
    AVPlayerItem *_stateQueue_currentPlayerItem;	// 232 = 0xe8
    _Bool _stateQueue_isPlayerTimeAdvancing;	// 240 = 0xf0
    long long _stateQueue_audioStatus;	// 248 = 0xf8
    AVPlayerItem *_stateQueue_playerItem;	// 256 = 0x100
    CDStruct_e83c9415 _stateQueue_segmentTimeRangeOfOriginalVideo;	// 264 = 0x108
    _Bool _stateQueue_isPlayable;	// 312 = 0x138
    _Bool _stateQueue_isStalled;	// 313 = 0x139
    _Bool _stateQueue_isLoopingEnabled;	// 314 = 0x13a
    CDStruct_e83c9415 _stateQueue_playbackTimeRange;	// 316 = 0x13c
    float _stateQueue_volume;	// 364 = 0x16c
    _Bool _stateQueue_shouldFadeVolumeChange;	// 368 = 0x170
    _Bool _stateQueue_seekToBeginningAtEnd;	// 369 = 0x171
    _Bool _stateQueue_isAtEnd;	// 370 = 0x172
    _Bool _stateQueue_isAtBeginning;	// 371 = 0x173
    struct CGAffineTransform _stateQueue_preferredTransform;	// 376 = 0x178
    struct CGSize _stateQueue_naturalSize;	// 424 = 0x1a8
    float _stateQueue_nominalFrameRate;	// 440 = 0x1b8
    struct __CVBuffer *_stateQueue_currentPixelBuffer;	// 448 = 0x1c0
    _Bool _stateQueue_obtainedFirstPixelBuffer;	// 456 = 0x1c8
    long long _stateQueue_pixelBufferFrameDrops;	// 464 = 0x1d0
    _Bool _stateQueue_readyForSeeking;	// 472 = 0x1d8
    CDStruct_1b6d18a9 _stateQueue_currentTime;	// 476 = 0x1dc
    NSLock *_stateQueue_isPlayableLock;	// 504 = 0x1f8
    NSLock *_stateQueue_readyForSeekingLock;	// 512 = 0x200
    NSLock *_stateQueue_videoOutputReadyLock;	// 520 = 0x208
    _Bool _stateQueue_shouldDisableAutomaticPixelBufferUpdates;	// 528 = 0x210
    ISWrappedAVPlayer *_stateQueue_videoPlayer;	// 536 = 0x218
    id _stateQueue_playerTimeObservationToken;	// 544 = 0x220
    ISWrappedAVAudioSession *_stateQueue_audioSession;	// 552 = 0x228
    CDStruct_af00bf4e _updateQueue_updateFlags;	// 560 = 0x230
    long long _updateQueue_pendingPlayerItemSeekCount;	// 584 = 0x248
    _Bool _updateQueue_didFinishInitializingAudioSession;	// 592 = 0x250
    CDStruct_1b6d18a9 _updateQueue_lastPlayerTime;	// 596 = 0x254
    long long _updateQueue_playRequestIntervalSignpost;	// 624 = 0x270
    PXNumberAnimator *_mainQueue_volumeAnimator;	// 632 = 0x278
    _Bool _sharedLock_has4k60Allowance;	// 640 = 0x280
    _Bool _allowsExternalPlayback;	// 641 = 0x281
    _Bool _isUpdatingAudioSession;	// 642 = 0x282
    _Bool _isExpectingVideoView;	// 643 = 0x283
    id <PXVideoSessionDelegate> _delegate;	// 648 = 0x288
    PXVideoContentProvider *_contentProvider;	// 656 = 0x290
    NSError *_error;	// 664 = 0x298
    CDStruct_1b6d18a9 _currentTime;	// 672 = 0x2a0
}

- (void).cxx_destruct;	// IMP=0x00000000007dd89c
@property(readonly, nonatomic) _Bool isExpectingVideoView; // @synthesize isExpectingVideoView=_isExpectingVideoView;
@property(nonatomic, setter=setUpdatingAudioSession:) _Bool isUpdatingAudioSession; // @synthesize isUpdatingAudioSession=_isUpdatingAudioSession;
@property(nonatomic) CDStruct_1b6d18a9 currentTime; // @synthesize currentTime=_currentTime;
@property(readonly, nonatomic) _Bool allowsExternalPlayback; // @synthesize allowsExternalPlayback=_allowsExternalPlayback;
@property(readonly, nonatomic) NSError *error; // @synthesize error=_error;
@property(readonly, nonatomic) PXVideoContentProvider *contentProvider; // @synthesize contentProvider=_contentProvider;
@property(nonatomic) __weak id <PXVideoSessionDelegate> delegate; // @synthesize delegate=_delegate;
- (void)_performBlockOnUpdateQueue:(CDUnknownBlockType)arg1;	// IMP=0x00000000007dd7a1
- (void)_assertOnUpdateQueue;	// IMP=0x00000000007dd70a
- (_Bool)_isOnUpdateQueue;	// IMP=0x00000000007dd6e0
@property(readonly, nonatomic) NSString *statusDescription;
@property(readonly, nonatomic) NSString *debugDetailedDescription;
- (void)_handleAudioSessionOutputVolumeDidChangeFromVolume:(float)arg1 toVolume:(float)arg2;	// IMP=0x00000000007dd1bb
- (void)_handleAssetTracksDidLoadForAsset:(id)arg1;	// IMP=0x00000000007dd0e0
- (void)_loadAssetTracksIfNeeded;	// IMP=0x00000000007dcf14
- (id)_playbackStateDescription;	// IMP=0x00000000007dcbbd
- (void)_logPlaybackState;	// IMP=0x00000000007dcaf6
- (void)_handleDidReachPlaybackTimeRangeEnd;	// IMP=0x00000000007dc9e6
- (void)_updateQueue_decrementPendingPlayerItemSeekCount;	// IMP=0x00000000007dc9d5
- (void)_handlePlayerItemSeekDidFinish;	// IMP=0x00000000007dc94b
- (void)_updateQueue_seekToPlaybackTimeRangeStartIfNeeded;	// IMP=0x00000000007dc776
- (void)_removeAllVideoOutputs;	// IMP=0x00000000007dc6d0
- (void)_updateAVPlayerPlayState;	// IMP=0x00000000007dc511
- (void)_updateCurrentPlayerItem;	// IMP=0x00000000007dc4a2
- (void)_updatePlayState;	// IMP=0x00000000007dbef5
- (void)_updateReadyForSeeking;	// IMP=0x00000000007dbe53
- (void)_updatePlayerVolume;	// IMP=0x00000000007dbd48
- (void)_updateVolumeAnimator;	// IMP=0x00000000007dbc16
- (void)_updatePlayerItemInPlayer;	// IMP=0x00000000007dbb2c
- (void)_updatePlayerItem;	// IMP=0x00000000007dbac6
- (void)_updateStalled;	// IMP=0x00000000007dba40
- (void)_updateBuffering;	// IMP=0x00000000007db991
- (void)_updateAtBeginningOrEndWithPlayerItemDuration:(CDStruct_1b6d18a9)arg1 success:(_Bool)arg2 error:(id)arg3;	// IMP=0x00000000007db704
- (void)_updateAtBeginningOrEnd;	// IMP=0x00000000007db58e
@property(nonatomic) float nominalFrameRate;
@property(nonatomic) struct CGSize naturalSize;
@property(nonatomic) struct CGAffineTransform preferredTransform;
- (void)_updateTrackGeometry;	// IMP=0x00000000007dadf3
- (void)_updateAudioStatus;	// IMP=0x00000000007dad34
- (void)_setPlayabilityFromAsset:(id)arg1;	// IMP=0x00000000007dac84
- (void)_handlePlayabilityDidLoadForAsset:(id)arg1;	// IMP=0x00000000007dab2e
- (void)_updatePlayability;	// IMP=0x00000000007da8ab
- (void)_handlePlayerTimeAdvancementTimer:(id)arg1;	// IMP=0x00000000007da85f
- (void)_avPlayerTimeDidChange:(CDStruct_1b6d18a9)arg1;	// IMP=0x00000000007da7e9
- (void)_handleTrackGeometryDidLoad;	// IMP=0x00000000007da79d
- (id)pixelBufferOutputSizes;	// IMP=0x00000000007da6dd
- (unsigned long long)pixelBufferOutputTokenCount;	// IMP=0x00000000007da64a
@property(nonatomic, setter=setAtEnd:) _Bool isAtEnd;
@property(nonatomic, setter=setAtBeginning:) _Bool isAtBeginning;
- (void)setDesiredPlayState:(long long)arg1;	// IMP=0x00000000007da26e
@property(readonly, nonatomic) long long desiredPlayState;
- (void)setPlayState:(long long)arg1;	// IMP=0x00000000007d9d16
@property(readonly, nonatomic) long long playState;
- (void)setIsReadyForSeeking:(_Bool)arg1;	// IMP=0x00000000007d9baa
@property(readonly, nonatomic) _Bool isReadyForSeeking;
@property(nonatomic, getter=isBuffering) _Bool buffering;
@property(nonatomic, setter=setStalled:) _Bool isStalled;
- (void)setPlayable:(_Bool)arg1;	// IMP=0x00000000007d960e
@property(readonly, nonatomic) _Bool isPlayable;
@property(readonly, nonatomic) _Bool isSegmentOfOriginalVideo;
@property(readonly, nonatomic) CDStruct_e83c9415 segmentTimeRangeOfOriginalVideo;
- (void)setPlayerItem:(id)arg1 segmentTimeRangeOfOriginalVideo:(CDStruct_e83c9415)arg2;	// IMP=0x00000000007d9216
@property(readonly, nonatomic) AVPlayerItem *playerItem;
@property(nonatomic) long long audioStatus;
- (void)setPlayerTimeAdvancing:(_Bool)arg1;	// IMP=0x00000000007d8e6f
- (_Bool)isPlayerTimeAdvancing;	// IMP=0x00000000007d8dde
- (void)setAllowsExternalPlayback:(_Bool)arg1;	// IMP=0x00000000007d8d92
- (void)setSeekToBeginningAtEnd:(_Bool)arg1;	// IMP=0x00000000007d8d3d
@property(readonly, nonatomic) _Bool seekToBeginningAtEnd;
- (void)setPlaybackTimeRange:(CDStruct_e83c9415)arg1;	// IMP=0x00000000007d8ad8
@property(readonly, nonatomic) CDStruct_e83c9415 playbackTimeRange;
- (void)setLoopingEnabled:(_Bool)arg1;	// IMP=0x00000000007d8982
@property(readonly, nonatomic, getter=isLoopingEnabled) _Bool loopingEnabled;
@property(readonly, nonatomic) _Bool preventsSleepDuringVideoPlayback;
- (void)setPreventsSleepDuringVideoPlayback:(_Bool)arg1;	// IMP=0x00000000007d88e3
@property(readonly, nonatomic) float volume;
- (void)setVolume:(float)arg1 withFade:(_Bool)arg2;	// IMP=0x00000000007d8751
- (void)setCurrentPlayerItem:(id)arg1;	// IMP=0x00000000007d83eb
- (id)currentPlayerItem;	// IMP=0x00000000007d832b
@property(nonatomic) CDStruct_1b6d18a9 videoDuration;
@property(nonatomic) _Bool isVideoOutputReady;
- (void)setVideoOutput:(id)arg1 size:(struct CGSize)arg2;	// IMP=0x00000000007d7fd6
@property(readonly, nonatomic) struct CGSize videoOutputSize;
@property(readonly, nonatomic) AVPlayerItemVideoOutput *videoOutput;
- (void)_updateDuration;	// IMP=0x00000000007d7d6c
- (void)incrementPixelBufferFrameDropsCount;	// IMP=0x00000000007d7d1a
- (long long)pixelBufferFrameDropsCount;	// IMP=0x00000000007d7c89
@property(nonatomic) struct __CVBuffer *currentPixelBuffer;
@property(retain, nonatomic) PXDisplayLink *displayLink;
- (void)_updateDisplayLinkState;	// IMP=0x00000000007d7934
- (void)_videoWorkQueue_updateCurrentPixelBufferWithVideoOutput:(id)arg1 outputTime:(double)arg2;	// IMP=0x00000000007d77a3
- (void)_updateCurrentPixelBuffer;	// IMP=0x00000000007d7579
- (void)_addOutput:(id)arg1 toPlayerItem:(id)arg2;	// IMP=0x00000000007d74ae
- (void)_updateVideoOutput;	// IMP=0x00000000007d6b5b
- (void)_handleDisplayLink:(id)arg1;	// IMP=0x00000000007d6b0f
- (id)_newVideoView;	// IMP=0x00000000007d6a83
- (void)setPlaybackTimeRangeEndBoundaryObserver:(id)arg1;	// IMP=0x00000000007d69ef
- (id)playbackTimeRangeEndBoundaryObserver;	// IMP=0x00000000007d692f
- (void)_didFinishInitializingAudioSession;	// IMP=0x00000000007d68c9
- (void)_audioSessionQueue_initializeAudioSession;	// IMP=0x00000000007d65fb
- (void)_updateFromCurrentPresentationState;	// IMP=0x00000000007d64d9
- (void)_handleContentLoadingResult:(id)arg1;	// IMP=0x00000000007d6447
- (void)_handleMediaServicesWereResetNotification:(id)arg1;	// IMP=0x00000000007d6372
- (void)observable:(id)arg1 didChange:(unsigned long long)arg2 context:(void *)arg3;	// IMP=0x00000000007d61e6
- (void)avPlayer:(id)arg1 itemDidPlayToEnd:(id)arg2;	// IMP=0x00000000007d604d
- (void)outputMediaDataWillChange:(id)arg1;	// IMP=0x00000000007d6001
- (id)mutableChangeObject;	// IMP=0x00000000007d5ff8
- (void)didPerformChanges;	// IMP=0x00000000007d518d
- (void)_performChanges:(CDUnknownBlockType)arg1;	// IMP=0x00000000007d50fb
- (void)performChanges:(CDUnknownBlockType)arg1;	// IMP=0x00000000007d505c
- (void)_relinquishAny4k60StreamAllowance;	// IMP=0x00000000007d4f76
- (_Bool)_request4k60StreamAllowance;	// IMP=0x00000000007d4efb
- (void)setAudioSession:(id)arg1;	// IMP=0x00000000007d4e69
- (id)audioSession;	// IMP=0x00000000007d4da9
- (void)setVideoPlayer:(id)arg1;	// IMP=0x00000000007d4bd9
@property(readonly, nonatomic) ISWrappedAVPlayer *videoPlayer;
- (void)setShouldDisableAutomaticPixelBufferUpdates:(_Bool)arg1;	// IMP=0x00000000007d499e
@property(readonly, nonatomic) _Bool shouldDisableAutomaticPixelBufferUpdates;
- (void)_updateCurrenPixelBufferAfterSeekingToTime:(CDStruct_1b6d18a9)arg1 completionLock:(id)arg2;	// IMP=0x00000000007d4867
- (void)seekToExactTime:(CDStruct_1b6d18a9)arg1 updatePixelBuffer:(_Bool)arg2 waitUntilComplete:(_Bool)arg3;	// IMP=0x00000000007d4383
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 toleranceBefore:(CDStruct_1b6d18a9)arg2 toleranceAfter:(CDStruct_1b6d18a9)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000007d429b
- (void)seekToTime:(CDStruct_1b6d18a9)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000007d4227
- (struct CGImage *)generateSnapshotImage;	// IMP=0x00000000007d3e0f
- (void)cancelLoading;	// IMP=0x00000000007d3dd2
- (void)loadIfNeededWithPriority:(long long)arg1;	// IMP=0x00000000007d3d86
@property(readonly, nonatomic) unsigned long long audioSessionRouteSharingPolicy;
@property(readonly, nonatomic) NSString *audioSessionMode;
@property(readonly, copy, nonatomic) NSString *audioSessionCategory;
@property(readonly, nonatomic) unsigned long long audioSessionCategoryOptions;
- (void)_audioSessionQueue_updateAudioSessionWithCategory:(id)arg1 mode:(id)arg2 routeSharingPolicy:(unsigned long long)arg3 options:(unsigned long long)arg4;	// IMP=0x00000000007d394d
- (void)setAudioSessionCategory:(id)arg1 mode:(id)arg2 routeSharingPolicy:(unsigned long long)arg3 options:(unsigned long long)arg4;	// IMP=0x00000000007d36b7
- (void)cancelPixelBufferOutputWithRequestIdentifier:(id)arg1;	// IMP=0x00000000007d357f
- (void)requestPixelBufferOutputWithRequestIdentifier:(id)arg1 maxOutputSize:(struct CGSize)arg2;	// IMP=0x00000000007d3426
- (void)recycleVideoView:(id)arg1;	// IMP=0x00000000007d339b
- (id)dequeueVideoView;	// IMP=0x00000000007d330b
- (void)_mainQueue_actuallyPrewarmVideoView;	// IMP=0x00000000007d3285
- (void)prewarmVideoView;	// IMP=0x00000000007d31b2
- (void)dealloc;	// IMP=0x00000000007d3164
- (id)performFinalCleanup;	// IMP=0x00000000007d3039
- (void)performChanges:(CDUnknownBlockType)arg1 withPresentationContext:(long long)arg2 presenter:(void *)arg3;	// IMP=0x00000000007d2f1e
- (void)leavePresentationContext:(long long)arg1 presenter:(void *)arg2;	// IMP=0x00000000007d2e58
- (void)enterPresentationContext:(long long)arg1 presenter:(void *)arg2;	// IMP=0x00000000007d2de1
- (id)_stateQueue_newPresentationStateFromCurrentWithPresenter:(void *)arg1;	// IMP=0x00000000007d2c8d
- (id)init;	// IMP=0x00000000007d2c13
- (id)initWithContentProvider:(id)arg1 videoPlayer:(id)arg2;	// IMP=0x00000000007d24c1
- (id)initWithContentProvider:(id)arg1;	// IMP=0x00000000007d245d

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

