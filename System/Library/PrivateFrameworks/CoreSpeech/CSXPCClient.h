//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <CoreSpeech/CSAudioAlertProviding-Protocol.h>
#import <CoreSpeech/CSAudioMeterProviding-Protocol.h>
#import <CoreSpeech/CSAudioMetricProviding-Protocol.h>
#import <CoreSpeech/CSAudioSessionInfoProviding-Protocol.h>
#import <CoreSpeech/CSAudioSessionProviding-Protocol.h>
#import <CoreSpeech/CSAudioStreamProviding-Protocol.h>
#import <CoreSpeech/CSAudioTimeConversionProviding-Protocol.h>
#import <CoreSpeech/CSFallbackAudioSessionReleaseProviding-Protocol.h>
#import <CoreSpeech/CSTriggerInfoProviding-Protocol.h>

@class CSAudioStream, NSHashTable, NSMutableSet, NSString;
@protocol CSAudioAlertProvidingDelegate, CSAudioSessionProvidingDelegate, CSAudioStreamProvidingDelegate, CSXPCClientDelegate, OS_dispatch_queue, OS_xpc_object;

@interface CSXPCClient : NSObject <CSAudioSessionProviding, CSFallbackAudioSessionReleaseProviding, CSAudioStreamProviding, CSAudioAlertProviding, CSAudioSessionInfoProviding, CSAudioMeterProviding, CSAudioMetricProviding, CSAudioTimeConversionProviding, CSTriggerInfoProviding>
{
    id <CSAudioSessionProvidingDelegate> _audioSessionProvidingDelegate;	// 8 = 0x8
    id <CSAudioStreamProvidingDelegate> _audioStreamProvidingDelegate;	// 16 = 0x10
    id <CSAudioAlertProvidingDelegate> _audioAlertProvidingDelegate;	// 24 = 0x18
    id <CSXPCClientDelegate> _delegate;	// 32 = 0x20
    NSString *_UUID;	// 40 = 0x28
    NSObject<OS_xpc_object> *_xpcConnection;	// 48 = 0x30
    NSObject<OS_dispatch_queue> *_targetQueue;	// 56 = 0x38
    NSObject<OS_dispatch_queue> *_xpcReplyQueue;	// 64 = 0x40
    NSObject<OS_dispatch_queue> *_xpcClientQueue;	// 72 = 0x48
    CSAudioStream *_audioStream;	// 80 = 0x50
    NSMutableSet *_activationAssertions;	// 88 = 0x58
    NSHashTable *_audioSessionInfoObservers;	// 96 = 0x60
    unsigned long long _xpcClientType;	// 104 = 0x68
}

+ (id)createStopAudioStreamMessage;	// IMP=0x00000000000582bd
+ (id)createStartAudioStreamMessageWithOption:(id)arg1;	// IMP=0x0000000000058051
+ (id)createPrepareAudioStreamMessageWithRequest:(id)arg1;	// IMP=0x0000000000057cd8
+ (id)createAudioStreamMessageWithRequest:(id)arg1;	// IMP=0x0000000000057147
- (void).cxx_destruct;	// IMP=0x000000000005cf3b
@property(nonatomic) unsigned long long xpcClientType; // @synthesize xpcClientType=_xpcClientType;
@property(retain, nonatomic) NSHashTable *audioSessionInfoObservers; // @synthesize audioSessionInfoObservers=_audioSessionInfoObservers;
@property(retain, nonatomic) NSMutableSet *activationAssertions; // @synthesize activationAssertions=_activationAssertions;
@property(retain, nonatomic) CSAudioStream *audioStream; // @synthesize audioStream=_audioStream;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *xpcClientQueue; // @synthesize xpcClientQueue=_xpcClientQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *xpcReplyQueue; // @synthesize xpcReplyQueue=_xpcReplyQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *targetQueue; // @synthesize targetQueue=_targetQueue;
@property(retain, nonatomic) NSObject<OS_xpc_object> *xpcConnection; // @synthesize xpcConnection=_xpcConnection;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
@property(nonatomic) __weak id <CSXPCClientDelegate> delegate; // @synthesize delegate=_delegate;
@property(nonatomic) __weak id <CSAudioAlertProvidingDelegate> audioAlertProvidingDelegate; // @synthesize audioAlertProvidingDelegate=_audioAlertProvidingDelegate;
@property(nonatomic) __weak id <CSAudioStreamProvidingDelegate> audioStreamProvidingDelegate; // @synthesize audioStreamProvidingDelegate=_audioStreamProvidingDelegate;
@property(nonatomic) __weak id <CSAudioSessionProvidingDelegate> audioSessionProvidingDelegate; // @synthesize audioSessionProvidingDelegate=_audioSessionProvidingDelegate;
- (void)_handleStreamProvidingDelegateHardwareConfigChange:(id)arg1;	// IMP=0x000000000005cd0e
- (void)_handleStreamProvidingDelegateChunkForTVAvailable:(id)arg1;	// IMP=0x000000000005cc20
- (void)_handleStreamProvidingDelegateChunkAvailable:(id)arg1;	// IMP=0x000000000005cb32
- (void)_handleStreamProvidingDelegateDidStopUnexpectly:(id)arg1;	// IMP=0x000000000005ca7c
- (void)_handleStreamProvidingDelegateMessageBody:(id)arg1;	// IMP=0x000000000005c9be
- (void)_handleSessionInfoProvidingDelegateMediaServicesWereResetNotification:(id)arg1;	// IMP=0x000000000005c7fe
- (void)_handleSessionInfoProvidingDelegateMediaServicesWereLostNotification:(id)arg1;	// IMP=0x000000000005c63e
- (void)_handleSessionInfoProvidingDelegateRouteChangeNotification:(id)arg1;	// IMP=0x000000000005c3d3
- (void)_handleSessionInfoProvidingDelegateInterruptionNotification:(id)arg1;	// IMP=0x000000000005c168
- (void)_handleSessionInfoProvidingDelegateMessageBody:(id)arg1;	// IMP=0x000000000005c022
- (void)_handleSessionProvidingDelegateDidChangeContext:(id)arg1;	// IMP=0x000000000005bf6b
- (void)_handleSessionProvidingDelegateStreamHandleIdInvalidation:(id)arg1;	// IMP=0x000000000005beb4
- (void)_handleSessionProvidingDelegateDidSetAudioSession:(id)arg1;	// IMP=0x000000000005bdfd
- (void)_handleSessionProvidingDelegateWillSetAudioSession:(id)arg1;	// IMP=0x000000000005bd46
- (void)_handleSessionProvidingDelegateEndInterruption:(id)arg1;	// IMP=0x000000000005bca9
- (void)_handleSessionProvidingDelegateBeginInterruptionWithContext:(id)arg1;	// IMP=0x000000000005bb05
- (void)_handleSessionProvidingDelegateBeginInterruption:(id)arg1;	// IMP=0x000000000005ba68
- (void)_handleSessionProvidingDelegateMessageBody:(id)arg1;	// IMP=0x000000000005b8e8
- (void)_handleAlertProvidingDelegateDidFinishAlertPlayback:(id)arg1;	// IMP=0x000000000005b773
- (void)_handleAlertProvidingDelegateMessageBody:(id)arg1;	// IMP=0x000000000005b671
- (void)_handleListenerDisconnectedError:(id)arg1;	// IMP=0x000000000005b566
- (void)_handleListenerError:(id)arg1;	// IMP=0x000000000005b434
- (void)_handleListenerMessage:(id)arg1;	// IMP=0x000000000005b314
- (void)_handleListenerEvent:(id)arg1;	// IMP=0x000000000005b26b
- (_Bool)sendMessageAndReplySync:(id)arg1 error:(id *)arg2;	// IMP=0x000000000005b023
- (id)_decodeError:(id)arg1;	// IMP=0x000000000005af59
- (void)_sendMessageAsync:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000005ad85
- (void)sendMessageAsync:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x000000000005acac
- (_Bool)fallbackDeactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x000000000005ab81
- (unsigned long long)sampleCountFromHostTime:(unsigned long long)arg1;	// IMP=0x000000000005a88d
- (unsigned long long)hostTimeFromSampleCount:(unsigned long long)arg1;	// IMP=0x000000000005a599
- (unsigned int)audioSessionIdForDeviceId:(id)arg1;	// IMP=0x000000000005a2b6
- (void)unregisterObserver:(id)arg1;	// IMP=0x000000000005a299
- (void)registerObserver:(id)arg1;	// IMP=0x000000000005a27c
- (void)attachTandemStream:(id)arg1 toPrimaryStream:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000005a24a
- (void)setAnnounceCallsEnabled:(_Bool)arg1 withStreamHandleID:(unsigned long long)arg2;	// IMP=0x000000000005a218
- (_Bool)isRecording;	// IMP=0x000000000005a1e4
- (void)cancelAudioStreamHold:(id)arg1;	// IMP=0x000000000005a1b2
- (id)holdAudioStreamWithDescription:(id)arg1 timeout:(double)arg2;	// IMP=0x000000000005a17e
- (void)saveRecordingBufferToEndFrom:(unsigned long long)arg1 toURL:(id)arg2;	// IMP=0x000000000005a14c
- (void)saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x000000000005a11a
- (id)audioChunkToEndFrom:(unsigned long long)arg1 channelIdx:(unsigned long long)arg2;	// IMP=0x000000000005a0e6
- (id)audioChunkToEndFrom:(unsigned long long)arg1;	// IMP=0x000000000005a0b2
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 channelIdx:(unsigned long long)arg3;	// IMP=0x000000000005a07e
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x000000000005a04a
- (unsigned long long)audioStreamId;	// IMP=0x000000000005a016
- (id)playbackRoute;	// IMP=0x0000000000059d94
- (_Bool)isNarrowBand;	// IMP=0x0000000000059b6e
- (id)recordSettings;	// IMP=0x00000000000598be
- (id)audioDeviceInfo;	// IMP=0x000000000005962d
- (id)recordDeviceInfo;	// IMP=0x0000000000059395
- (id)recordRoute;	// IMP=0x0000000000059113
- (void)triggerInfoForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000058aba
- (void)acousticSLResultForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000584c5
- (void)stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000005839c
- (void)startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x000000000005817b
- (void)prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000000057e02
- (_Bool)prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000577c9
- (void)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x0000000000057271
- (id)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000056bb8
- (_Bool)setCurrentContext:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000567a3
- (id)audioMetric;	// IMP=0x000000000005635c
- (float)averagePowerForChannel:(unsigned long long)arg1;	// IMP=0x0000000000056075
- (float)peakPowerForChannel:(unsigned long long)arg1;	// IMP=0x0000000000055d8e
- (void)updateMeters;	// IMP=0x0000000000055c95
- (void)setMeteringEnabled:(_Bool)arg1;	// IMP=0x0000000000055b7a
- (void)configureAlertBehavior:(id)arg1;	// IMP=0x0000000000055a33
- (unsigned long long)alertStartTime;	// IMP=0x000000000005570b
- (_Bool)playRecordStartingAlertAndResetEndpointer;	// IMP=0x0000000000055606
- (_Bool)playAlertSoundForType:(long long)arg1;	// IMP=0x00000000000554e5
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;	// IMP=0x000000000005532b
- (void)setAudioAlertDelegate:(id)arg1;	// IMP=0x0000000000055319
- (void)reportsDynamicActivityAttribute:(unsigned long long)arg1 bundleId:(id)arg2;	// IMP=0x00000000000551b4
- (void)setAudioSessionDelegate:(id)arg1;	// IMP=0x00000000000551a2
- (void)enableMiniDucking:(_Bool)arg1;	// IMP=0x0000000000055081
- (void)enableSmartRoutingConsideration:(_Bool)arg1;	// IMP=0x0000000000054f60
- (void)setDuckOthersOption:(_Bool)arg1;	// IMP=0x0000000000054e3f
- (_Bool)duckOthersOption;	// IMP=0x0000000000054d40
- (_Bool)deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0000000000054c12
- (_Bool)activateAudioSessionWithReason:(unsigned long long)arg1 dynamicAttribute:(unsigned long long)arg2 bundleID:(id)arg3 error:(id *)arg4;	// IMP=0x0000000000054a75
- (_Bool)prewarmAudioSessionWithError:(id *)arg1;	// IMP=0x000000000005496d
- (void)pingpong:(CDUnknownBlockType)arg1;	// IMP=0x0000000000054833
- (_Bool)prepareAudioProviderWithContext:(id)arg1 clientType:(unsigned long long)arg2 error:(id *)arg3;	// IMP=0x000000000005465d
- (void)_sendXPCClientType;	// IMP=0x00000000000544fb
- (void)dealloc;	// IMP=0x00000000000544bd
- (void)_disconnect;	// IMP=0x0000000000054471
- (void)disconnect;	// IMP=0x0000000000054410
- (void)connect;	// IMP=0x00000000000541d0
- (_Bool)isConnected;	// IMP=0x0000000000054124
- (id)initWithType:(unsigned long long)arg1;	// IMP=0x0000000000053fc0

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

