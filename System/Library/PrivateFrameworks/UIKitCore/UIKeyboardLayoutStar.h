//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <UIKitCore/UIKBEmojiHitTestResponder-Protocol.h>
#import <UIKitCore/UIKBKeyplaneViewDelegate-Protocol.h>
#import <UIKitCore/UIKBResizingKeyplaneCoordinatorCoordinatorDelegate-Protocol.h>
#import <UIKitCore/UIKeyboardPinchGestureRecognizerDelegate-Protocol.h>
#import <UIKitCore/UIKeyboardTypingStyleEstimatorDelegate-Protocol.h>

@class CADisplayLink, NSArray, NSDate, NSLayoutConstraint, NSMutableArray, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSTimer, UIButton, UIDelayedAction, UIGestureKeyboardIntroduction, UIImageView, UIKBBackgroundView, UIKBKeyViewAnimator, UIKBKeyplaneView, UIKBRenderConfig, UIKBResizingKeyplaneCoordinator, UIKBTree, UIKeyboardEmojiKeyDisplayController, UIKeyboardPathEffectView, UIKeyboardPinchGestureRecognizer, UIKeyboardSplitTransitionView, UISwipeGestureRecognizer, UIView, _UIKeyboardTypingSpeedLogger;
@protocol UIKeyboardLayoutStarDelegate, UITextCursorAssertion;

__attribute__((visibility("hidden")))
@interface UIKeyboardLayoutStar <UIKBEmojiHitTestResponder, UIKBResizingKeyplaneCoordinatorCoordinatorDelegate, UIKeyboardPinchGestureRecognizerDelegate, UIKeyboardTypingStyleEstimatorDelegate, UIKBKeyplaneViewDelegate>
{
    UIKBTree *_keyboard;	// 176 = 0xb0
    UIKBTree *_keyplane;	// 184 = 0xb8
    NSString *_keyboardName;	// 192 = 0xc0
    NSString *_keyplaneName;	// 200 = 0xc8
    long long _appearance;	// 208 = 0xd0
    UIKBTree *_activeKey;	// 216 = 0xd8
    UIKBTree *_inactiveLanguageIndicator;	// 224 = 0xe0
    UIKBKeyplaneView *_keyplaneView;	// 232 = 0xe8
    UIKBBackgroundView *_backgroundView;	// 240 = 0xf0
    UIKBKeyViewAnimator *_keyViewAnimator;	// 248 = 0xf8
    UIKeyboardEmojiKeyDisplayController *_emojiKeyManager;	// 256 = 0x100
    double _prevTouchUpTime;	// 264 = 0x108
    double _prevTouchUpFinishedTime;	// 272 = 0x110
    double _prevTouchDownTime;	// 280 = 0x118
    unsigned long long _prevUpActions;	// 288 = 0x120
    NSMutableDictionary *_keyboards;	// 296 = 0x128
    NSMutableDictionary *_allKeyplaneViews;	// 304 = 0x130
    NSMutableSet *_allKeyplaneKeycaps;	// 312 = 0x138
    NSMutableSet *_validInputStrings;	// 320 = 0x140
    NSString *_localizedInputKey;	// 328 = 0x148
    struct __CFDictionary *_extendedTouchInfoMap;	// 336 = 0x150
    int _preferredTrackingChangeCount;	// 344 = 0x158
    int _shiftTrackingChangeCount;	// 348 = 0x15c
    NSMutableSet *_accentInfo;	// 352 = 0x160
    NSMutableSet *_hasAccents;	// 360 = 0x168
    id _spaceTarget;	// 368 = 0x170
    SEL _spaceAction;	// 376 = 0x178
    SEL _spaceLongAction;	// 384 = 0x180
    id _returnTarget;	// 392 = 0x188
    SEL _returnAction;	// 400 = 0x190
    SEL _returnLongAction;	// 408 = 0x198
    id _deleteTarget;	// 416 = 0x1a0
    SEL _deleteAction;	// 424 = 0x1a8
    SEL _deleteLongAction;	// 432 = 0x1b0
    _Bool _shift;	// 440 = 0x1b8
    _Bool _autoshift;	// 441 = 0x1b9
    _Bool _settingShift;	// 442 = 0x1ba
    _Bool _holdingShift;	// 443 = 0x1bb
    _Bool _didLongPress;	// 444 = 0x1bc
    NSString *_preTouchKeyplaneName;	// 448 = 0x1c0
    _Bool _revertKeyplaneAfterTouch;	// 456 = 0x1c8
    _Bool _wasShifted;	// 457 = 0x1c9
    _Bool _swipeDetected;	// 458 = 0x1ca
    _Bool _showIntlKey;	// 459 = 0x1cb
    _Bool _showDictationKey;	// 460 = 0x1cc
    _Bool _suppressDeactivateKeys;	// 461 = 0x1cd
    _Bool _suppressShiftKeyplaneAnimation;	// 462 = 0x1ce
    _Bool _isTrackpadMode;	// 463 = 0x1cf
    _Bool _shiftLockReady;	// 464 = 0x1d0
    double _shiftLockFirstTapTime;	// 472 = 0x1d8
    UISwipeGestureRecognizer *_rightSwipeRecognizer;	// 480 = 0x1e0
    UISwipeGestureRecognizer *_leftSwipeRecognizer;	// 488 = 0x1e8
    UISwipeGestureRecognizer *_upSwipeRecognizer;	// 496 = 0x1f0
    UIKeyboardPinchGestureRecognizer *_pinchGestureRecognizer;	// 504 = 0x1f8
    UIKeyboardSplitTransitionView *_transitionView;	// 512 = 0x200
    double _initialSplitProgress;	// 520 = 0x208
    double _finalSplitProgress;	// 528 = 0x210
    double _autoSplitLastUpdate;	// 536 = 0x218
    double _autoSplitElapsedTime;	// 544 = 0x220
    CADisplayLink *_displayLink;	// 552 = 0x228
    _Bool _ghostKeysEnabled;	// 560 = 0x230
    UIDelayedAction *_delayedCentroidUpdate;	// 568 = 0x238
    _Bool _isRebuilding;	// 576 = 0x240
    long long _currentHandBias;	// 584 = 0x248
    NSString *_layoutTag;	// 592 = 0x250
    _Bool _preRotateShift;	// 600 = 0x258
    NSString *_preRotateKeyplaneName;	// 608 = 0x260
    _Bool _preRotateTrackpadMode;	// 616 = 0x268
    UIDelayedAction *_multitapAction;	// 624 = 0x270
    _Bool _unshiftAfterMultitap;	// 632 = 0x278
    int _multitapCount;	// 636 = 0x27c
    UIKBTree *_multitapKey;	// 640 = 0x280
    UIView *_flickPopupView;	// 648 = 0x288
    NSMutableDictionary *_compositeImages;	// 656 = 0x290
    NSTimer *_flickPopuptimer;	// 664 = 0x298
    id _touchInfo;	// 672 = 0x2a0
    UIView *_dimKeyboardImageView;	// 680 = 0x2a8
    _Bool _keyboardImageViewIsDim;	// 688 = 0x2b0
    _Bool _isOutOfBounds;	// 689 = 0x2b1
    _Bool _inDealloc;	// 690 = 0x2b2
    NSMutableSet *_keysUnderIndicator;	// 696 = 0x2b8
    _UIKeyboardTypingSpeedLogger *_typingSpeedLogger;	// 704 = 0x2c0
    UIKBRenderConfig *_passcodeRenderConfig;	// 712 = 0x2c8
    long long _setKeyplaneViewCount;	// 720 = 0x2d0
    _Bool _inputTraitsPreventInitialReuse;	// 728 = 0x2d8
    _Bool _settingFloat;	// 729 = 0x2d9
    NSMutableSet *_leftKeySet;	// 736 = 0x2e0
    NSMutableSet *_rightKeySet;	// 744 = 0x2e8
    struct CGPoint _leftDriftOffset;	// 752 = 0x2f0
    struct CGPoint _rightDriftOffset;	// 768 = 0x300
    NSMutableArray *_leftSideReachability;	// 784 = 0x310
    NSMutableArray *_rightSideReachability;	// 792 = 0x318
    NSNumber *_homeRowHint;	// 800 = 0x320
    double _touchDownTimeSpan;	// 808 = 0x328
    NSDate *_prevTouchMoreKeyTime;	// 816 = 0x330
    NSDate *_prevProgressiveCandidateRequestTime;	// 824 = 0x338
    NSTimer *_progressiveCandidateUpdateTimer;	// 832 = 0x340
    NSString *_lastInputMode;	// 840 = 0x348
    _Bool _pendingDictationReload;	// 848 = 0x350
    _Bool _hasPeekedGestureKey;	// 849 = 0x351
    _Bool _lastInputIsGestureKey;	// 850 = 0x352
    UIGestureKeyboardIntroduction *_gestureKeyboardIntroduction;	// 856 = 0x358
    _Bool _dictationUsingServerManualEndpointing;	// 864 = 0x360
    _Bool _splitTransitionNeedsRebuild;	// 865 = 0x361
    UIKBResizingKeyplaneCoordinator *_resizingKeyplaneCoordinator;	// 872 = 0x368
    UIButton *_biasEscapeButton;	// 880 = 0x370
    NSLayoutConstraint *_biasEscapeButtonLeftConstraint;	// 888 = 0x378
    NSLayoutConstraint *_biasEscapeButtonRightConstraint;	// 896 = 0x380
    NSMutableSet *_keyplaneTransformations;	// 904 = 0x388
    UIImageView *_pathEffectGlowView;	// 912 = 0x390
    UIKeyboardPathEffectView *_pathEffectView;	// 920 = 0x398
    NSArray *_pathEffectViewConstraints;	// 928 = 0x3a0
    _Bool _isContinuousPathUnderway;	// 936 = 0x3a8
    UIView *_keyplaneTransformationAreaView;	// 944 = 0x3b0
    _Bool _externalDictationAndInternationalKeys;	// 952 = 0x3b8
    _Bool _showsPunctuationKeysOnPrimaryKeyplane;	// 953 = 0x3b9
    _Bool _preventPaddlesForPointerTouches;	// 954 = 0x3ba
    _Bool _muteNextKeyClickSound;	// 955 = 0x3bb
    int playKeyClickSoundOn;	// 956 = 0x3bc
    UIKBRenderConfig *_renderConfig;	// 960 = 0x3c0
    UIView *_modalDisplayView;	// 968 = 0x3c8
    id <UIKeyboardLayoutStarDelegate> _delegate;	// 976 = 0x3d0
    double _lastTwoFingerTapTimestamp;	// 984 = 0x3d8
    id <UITextCursorAssertion> _blinkAssertion;	// 992 = 0x3e0
}

+ (id)sharedPunctuationCharacterSet;	// IMP=0x00000000008cccdc
+ (id)sharedRivenKeyplaneGenerator;	// IMP=0x00000000008b4087
+ (struct CGSize)keyboardSizeForInputMode:(id)arg1 screenTraits:(id)arg2 keyboardType:(long long)arg3;	// IMP=0x00000000008afc86
+ (id)keyboardWithName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x00000000008afb3d
+ (id)keyboardFromFactoryWithName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x00000000008af99b
+ (void)accessibilitySensitivityChanged;	// IMP=0x00000000008af260
+ (Class)_subclassForScreenTraits:(id)arg1;	// IMP=0x00000000008aeb19
@property(retain, nonatomic) id <UITextCursorAssertion> blinkAssertion; // @synthesize blinkAssertion=_blinkAssertion;
@property(nonatomic) _Bool muteNextKeyClickSound; // @synthesize muteNextKeyClickSound=_muteNextKeyClickSound;
@property(nonatomic) _Bool preventPaddlesForPointerTouches; // @synthesize preventPaddlesForPointerTouches=_preventPaddlesForPointerTouches;
@property(nonatomic) double lastTwoFingerTapTimestamp; // @synthesize lastTwoFingerTapTimestamp=_lastTwoFingerTapTimestamp;
@property(nonatomic) id <UIKeyboardLayoutStarDelegate> delegate; // @synthesize delegate=_delegate;
@property(retain, nonatomic) UIView *modalDisplayView; // @synthesize modalDisplayView=_modalDisplayView;
@property(retain, nonatomic) UIKBRenderConfig *renderConfig; // @synthesize renderConfig=_renderConfig;
@property(copy, nonatomic) NSString *preTouchKeyplaneName; // @synthesize preTouchKeyplaneName=_preTouchKeyplaneName;
@property(nonatomic) int playKeyClickSoundOn; // @synthesize playKeyClickSoundOn;
@property(copy, nonatomic) NSString *localizedInputKey; // @synthesize localizedInputKey=_localizedInputKey;
@property(readonly, nonatomic) _Bool showsDictationKey; // @synthesize showsDictationKey=_showDictationKey;
@property(readonly, nonatomic) _Bool showsInternationalKey; // @synthesize showsInternationalKey=_showIntlKey;
@property(nonatomic) _Bool didLongPress; // @synthesize didLongPress=_didLongPress;
@property(nonatomic) _Bool autoShift; // @synthesize autoShift=_autoshift;
@property(nonatomic) _Bool shift; // @synthesize shift=_shift;
@property(retain, nonatomic) UIKBTree *activeKey; // @synthesize activeKey=_activeKey;
@property(copy, nonatomic) NSString *keyplaneName; // @synthesize keyplaneName=_keyplaneName;
@property(copy, nonatomic) NSString *keyboardName; // @synthesize keyboardName=_keyboardName;
@property(readonly, nonatomic) UIKBTree *keyplane; // @synthesize keyplane=_keyplane;
@property(readonly, nonatomic) UIKBTree *keyboard; // @synthesize keyboard=_keyboard;
- (void)typingStyleEstimator:(id)arg1 didChangeTypingStyleEstimate:(unsigned long long)arg2;	// IMP=0x00000000008da18b
- (void)triggerSpaceKeyplaneSwitchIfNecessary;	// IMP=0x00000000008da0a6
- (_Bool)is10KeyRendering;	// IMP=0x00000000008da02e
- (_Bool)isEmojiKeyplane;	// IMP=0x00000000008da003
- (_Bool)keyplaneContainsEmojiKey;	// IMP=0x00000000008d9fa1
- (_Bool)keyplaneContainsDismissKey;	// IMP=0x00000000008d9f76
- (void)updateGlobeKeyAndLayoutOriginBeforeSnapshotForInputView:(id)arg1;	// IMP=0x00000000008d9dc9
- (id)currentKeyplaneView;	// IMP=0x00000000008d9db8
- (id)currentKeyplane;	// IMP=0x00000000008d9da7
- (void)fadeWithInvocation:(id)arg1;	// IMP=0x00000000008d9cc4
- (id)simulateTouchForCharacter:(id)arg1 errorVector:(struct CGPoint)arg2 shouldTypeVariants:(_Bool)arg3 baseKeyForVariants:(_Bool)arg4;	// IMP=0x00000000008d9a9f
- (id)simulateTouch:(struct CGPoint)arg1;	// IMP=0x00000000008d997a
- (struct CGPoint)applyError:(struct CGPoint)arg1 toKey:(id)arg2;	// IMP=0x00000000008d95d8
- (void)changeToKeyplane:(id)arg1;	// IMP=0x00000000008d9522
- (id)keyplaneNamed:(id)arg1;	// IMP=0x00000000008d94f1
- (id)keyplaneForKey:(id)arg1;	// IMP=0x00000000008d94c0
- (id)baseKeyForString:(id)arg1;	// IMP=0x00000000008d8e39
- (_Bool)shouldRetestKey:(id)arg1 slidOffKey:(id)arg2 withKeyplane:(id)arg3;	// IMP=0x00000000008d8da1
- (_Bool)shouldRetestTouchDraggedFromKey:(id)arg1;	// IMP=0x00000000008d8d8c
- (void)didRotate;	// IMP=0x00000000008d8c1c
- (void)willRotate;	// IMP=0x00000000008d8b4e
- (void)updateKeyCentroids;	// IMP=0x00000000008d8315
- (void)divideKeysIntoLeft:(id)arg1 right:(id)arg2;	// IMP=0x00000000008d7d47
- (_Bool)isShiftKeyBeingHeld;	// IMP=0x00000000008d7d1e
- (void)setAutoshift:(_Bool)arg1;	// IMP=0x00000000008d7ce0
- (void)updateUndoKeyState;	// IMP=0x00000000008d7c18
- (void)setMultitapReverseKeyState;	// IMP=0x00000000008d7ada
- (void)updateShiftKeyState;	// IMP=0x00000000008d742e
- (int)stateForShiftKey:(id)arg1;	// IMP=0x00000000008d725e
- (_Bool)diacriticForwardCompose;	// IMP=0x00000000008d7237
- (_Bool)supportsContinuousPath;	// IMP=0x00000000008d7210
- (_Bool)isKanaPlane;	// IMP=0x00000000008d71f3
- (_Bool)isAlphabeticPlane;	// IMP=0x00000000008d71cc
- (_Bool)ignoresShiftState;	// IMP=0x00000000008d71a5
- (_Bool)usesAutoShift;	// IMP=0x00000000008d717e
- (void)upActionShift;	// IMP=0x00000000008d7060
- (void)downActionShiftWithKey:(id)arg1;	// IMP=0x00000000008d6dda
- (void)refreshDualStringKeys;	// IMP=0x00000000008d6c58
- (unsigned long long)upActionFlagsForKey:(id)arg1;	// IMP=0x00000000008d68b4
- (unsigned long long)downActionFlagsForKey:(id)arg1;	// IMP=0x00000000008d63c5
- (_Bool)keyHasAccentedVariants:(id)arg1;	// IMP=0x00000000008d60ce
- (_Bool)hasActiveContinuousPathInput;	// IMP=0x00000000008d5f91
- (id)activeTouchInfoForShift;	// IMP=0x00000000008d5df4
- (id)touchInfoForKey:(id)arg1;	// IMP=0x00000000008d5ca1
- (void)clearAllTouchInfo;	// IMP=0x00000000008d5b63
- (void)clearInfoForTouch:(id)arg1 forResting:(_Bool)arg2;	// IMP=0x00000000008d5aef
- (void)clearInfoForTouch:(id)arg1;	// IMP=0x00000000008d5adb
- (void)cancelTouchIfNecessaryForInfo:(id)arg1 forResting:(_Bool)arg2;	// IMP=0x00000000008d58a4
- (id)generateInfoForTouch:(id)arg1;	// IMP=0x00000000008d5820
- (id)infoForTouch:(id)arg1;	// IMP=0x00000000008d57ec
- (id)infoForTouchUUID:(id)arg1;	// IMP=0x00000000008d57d4
- (void)swipeDetected:(id)arg1;	// IMP=0x00000000008d5753
- (void)uninstallGestureRecognizers;	// IMP=0x00000000008d560d
- (void)installGestureRecognizers;	// IMP=0x00000000008d5607
- (void)_gestureRecognizerFailed:(id)arg1;	// IMP=0x00000000008d55e0
- (_Bool)gestureRecognizer:(id)arg1 shouldReceiveTouch:(id)arg2;	// IMP=0x00000000008d5576
- (_Bool)gestureRecognizerShouldBegin:(id)arg1;	// IMP=0x00000000008d5478
- (void)touchChanged:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000008d53c4
- (void)touchCancelled:(id)arg1 forResting:(_Bool)arg2 executionContext:(id)arg3;	// IMP=0x00000000008d5102
- (void)touchCancelled:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000008d50eb
- (void)continueFromInternationalActionForTouchUp:(id)arg1 withActions:(unsigned long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(_Bool)arg5 prevActions:(unsigned long long)arg6 executionContext:(id)arg7;	// IMP=0x00000000008d458f
- (void)completeSendStringActionForTouchUp:(id)arg1 withActions:(unsigned long long)arg2 timestamp:(double)arg3 interval:(double)arg4 didLongPress:(_Bool)arg5 prevActions:(unsigned long long)arg6 executionContext:(id)arg7;	// IMP=0x00000000008d3a5b
- (_Bool)shouldSendStringForFlick:(id)arg1;	// IMP=0x00000000008d3964
- (_Bool)shouldYieldToControlCenterForFlickWithInitialPoint:(struct CGPoint)arg1 finalPoint:(struct CGPoint)arg2;	// IMP=0x00000000008d3888
- (void)presentModalDisplayForKey:(id)arg1;	// IMP=0x00000000008d36a6
- (void)completeRetestForTouchUp:(id)arg1 timestamp:(double)arg2 interval:(double)arg3 executionContext:(id)arg4;	// IMP=0x00000000008d1b74
- (void)_recordKeystrokeStatisticForKeyPress;	// IMP=0x00000000008d1b17
- (_Bool)shouldSendTouchUpToInputManager:(id)arg1;	// IMP=0x00000000008d1a51
- (void)handleKeyboardMenusForTouch:(id)arg1;	// IMP=0x00000000008d17be
- (void)touchUp:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000008d0f7e
- (_Bool)shouldRetestTouchUp:(id)arg1;	// IMP=0x00000000008d0c5a
- (void)handleDelayedCentroidUpdate;	// IMP=0x00000000008d0ba0
- (void)cancelDelayedCentroidUpdate;	// IMP=0x00000000008d0b67
- (void)refreshGhostKeyState;	// IMP=0x00000000008d0aac
- (_Bool)performSpaceAction;	// IMP=0x00000000008d0a6e
- (_Bool)performReturnAction;	// IMP=0x00000000008d0a30
- (void)resetPanAlternativesForEndedTouch:(id)arg1;	// IMP=0x00000000008d09cb
- (void)updatePanAlternativesForTouchInfo:(id)arg1;	// IMP=0x00000000008d06a2
- (void)updateSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2 withPoint:(struct CGPoint)arg3;	// IMP=0x00000000008d033e
- (long long)defaultSelectedVariantIndexForKey:(id)arg1 withActions:(unsigned long long)arg2;	// IMP=0x00000000008d0209
- (void)completeHitTestForTouchDragged:(id)arg1 hitKey:(id)arg2;	// IMP=0x00000000008cf24c
- (void)touchDragged:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000008ce339
- (void)touchDragged:(id)arg1;	// IMP=0x00000000008ce263
- (_Bool)touchPassesDragThreshold:(id)arg1;	// IMP=0x00000000008cdf8e
- (_Bool)canForceTouchUUIDCommit:(id)arg1 inWindow:(id)arg2;	// IMP=0x00000000008cdee8
- (void)completeDeleteActionForTouchDownWithActions:(unsigned long long)arg1 executionContext:(id)arg2;	// IMP=0x00000000008cdd95
- (void)completeSendStringActionForTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;	// IMP=0x00000000008cd3c3
- (_Bool)showGestureKeyboardIntroductionIfNeeded;	// IMP=0x00000000008cd18e
- (_Bool)shouldShowGestureKeyboardIntroduction;	// IMP=0x00000000008cd101
- (id)synthesizeTouchUpEventForKey:(id)arg1;	// IMP=0x00000000008cd023
- (id)keyplaneNameForRevertAfterTouch;	// IMP=0x00000000008ccfc3
- (void)completeCommitTouchesPrecedingTouchDownWithKey:(id)arg1 withActions:(unsigned long long)arg2 executionContext:(id)arg3;	// IMP=0x00000000008cce38
- (void)incrementPunctuationIfNeeded:(id)arg1;	// IMP=0x00000000008ccd32
- (_Bool)shouldCommitPrecedingTouchesForTouchDownWithActions:(unsigned long long)arg1;	// IMP=0x00000000008ccc94
- (void)touchDownWithKey:(id)arg1 withTouchInfo:(id)arg2 atPoint:(struct CGPoint)arg3 executionContext:(id)arg4;	// IMP=0x00000000008cbd79
- (void)_cleanUpBlinkAssertionIfNecessary;	// IMP=0x00000000008cbd3c
- (_Bool)isKeyScriptSwitchKey:(id)arg1;	// IMP=0x00000000008cbce8
- (_Bool)shouldSkipResponseToGlobeKey:(id)arg1 atPoint:(struct CGPoint)arg2;	// IMP=0x00000000008cbc38
- (void)playKeyClickSoundOnUpForKey:(id)arg1;	// IMP=0x00000000008cbc26
- (void)playKeyClickSoundOnDownForKey:(id)arg1;	// IMP=0x00000000008cbbeb
- (void)playKeyClickSoundForKey:(id)arg1;	// IMP=0x00000000008cbb2d
- (void)playKeyReleaseSoundForKey:(id)arg1;	// IMP=0x00000000008cbb27
- (void)completeHitTestForTouchDown:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000008cb565
- (void)touchDown:(id)arg1 executionContext:(id)arg2;	// IMP=0x00000000008caee0
- (_Bool)pointInside:(struct CGPoint)arg1 forEvent:(struct __GSEvent *)arg2;	// IMP=0x00000000008ca9b3
- (_Bool)pointInside:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x00000000008ca963
- (_Bool)_pointAllowedInStaticHitBuffer:(struct CGPoint)arg1;	// IMP=0x00000000008ca711
- (double)hitBuffer;	// IMP=0x00000000008ca680
- (struct CGRect)_paddedKeyUnionFrame;	// IMP=0x00000000008ca3e3
- (_Bool)_handleTouchForEmojiInputView;	// IMP=0x00000000008ca316
- (void)prepareForFloatingTransition:(_Bool)arg1;	// IMP=0x00000000008ca288
- (void)setSplit:(_Bool)arg1 animated:(_Bool)arg2;	// IMP=0x00000000008ca11e
- (void)_autoSplit:(id)arg1;	// IMP=0x00000000008c9fdc
- (void)setSplitProgress:(double)arg1;	// IMP=0x00000000008c9f50
- (void)pinchHandler:(id)arg1;	// IMP=0x00000000008c9edc
- (void)pinchDidConsumeTouch:(id)arg1;	// IMP=0x00000000008c9e87
- (void)didDetectPinchWithSeparation:(double)arg1;	// IMP=0x00000000008c9de2
- (_Bool)pinchCanBeginWithTouches:(id)arg1 andScale:(double)arg2;	// IMP=0x00000000008c9ba7
- (_Bool)pinchSplitGestureEnabled;	// IMP=0x00000000008c9b9d
- (_Bool)pinchDetected;	// IMP=0x00000000008c9b80
- (void)finishSplitTransitionWithProgress:(double)arg1;	// IMP=0x00000000008c9b62
- (void)finishSplitTransitionWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000008c9a4c
- (void)finishSplitTransition;	// IMP=0x00000000008c9a38
- (void)finishSplitWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000008c975a
- (void)showSplitTransitionView:(_Bool)arg1;	// IMP=0x00000000008c9606
- (void)prepareForSplitTransition;	// IMP=0x00000000008c953a
- (id)hostViewForResizingKeyplane:(id)arg1;	// IMP=0x00000000008c9531
- (void)resizeKeyplaneAndRedraw:(_Bool)arg1;	// IMP=0x00000000008c90a4
- (_Bool)keyplaneSupportsResizingGesture;	// IMP=0x00000000008c906b
- (_Bool)keyplaneUsesResizingOffset;	// IMP=0x00000000008c8f6f
- (void)_didTapBiasEscapeButton:(id)arg1;	// IMP=0x00000000008c8f08
- (void)_setBiasEscapeButtonVisible:(_Bool)arg1;	// IMP=0x00000000008c89a3
- (void)setKeyboardBias:(long long)arg1;	// IMP=0x00000000008c892b
- (long long)currentHandBias;	// IMP=0x00000000008c88c3
- (double)biasedKeyboardWidthRatio;	// IMP=0x00000000008c8862
- (void)calculateReachabilityScoreWithKey:(id)arg1 keyError:(struct CGPoint)arg2;	// IMP=0x00000000008c837c
- (void)resetHRRLayoutState;	// IMP=0x00000000008c833b
- (void)setNeedsVirtualDriftUpdate;	// IMP=0x00000000008c82e6
- (_Bool)_handRestRecognizerCancelShouldBeEnd;	// IMP=0x00000000008c82c9
- (id)getHorizontalOffsetFromHomeRowForRowRelativeToHomeRow:(long long)arg1;	// IMP=0x00000000008c7fbb
- (struct CGPoint)getCenterForKeyUnderRightIndexFinger;	// IMP=0x00000000008c7ec2
- (struct CGPoint)getCenterForKeyUnderLeftIndexFinger;	// IMP=0x00000000008c7dc9
- (void)handRestRecognizerNotifyRestForBegin:(_Bool)arg1 location:(struct CGPoint)arg2 timestamp:(double)arg3 pathIndex:(int)arg4 touchUUID:(id)arg5 context:(id)arg6;	// IMP=0x00000000008c7cd8
- (CDUnknownBlockType)handRestRecognizerSilenceNextTouchDown;	// IMP=0x00000000008c7cbe
- (struct CGSize)handRestRecognizerStandardKeyPixelSize;	// IMP=0x00000000008c7b3c
- (id)handRestRecognizerGetHomeRowHint;	// IMP=0x00000000008c7947
- (id)getSortedKeysForDisplayRowHint:(int)arg1;	// IMP=0x00000000008c7733
- (_Bool)handRestRecognizerShouldNeverIgnoreTouchState:(id)arg1 fromPoint:(struct CGPoint)arg2 toPoint:(struct CGPoint)arg3 forRestingState:(unsigned long long)arg4 otherRestedTouchLocations:(id)arg5;	// IMP=0x00000000008c72ff
- (unsigned char)getHandRestRecognizerState;	// IMP=0x00000000008c70fe
- (void)layoutSubviews;	// IMP=0x00000000008c707f
- (unsigned long long)targetEdgesForScreenGestureRecognition;	// IMP=0x00000000008c704e
- (_Bool)shouldDeactivateWithoutWindow;	// IMP=0x00000000008c7046
- (id)activationIndicatorView;	// IMP=0x00000000008c569e
- (void)setHideKeysUnderIndicator:(_Bool)arg1;	// IMP=0x00000000008c55ef
- (_Bool)shouldShowIndicator;	// IMP=0x00000000008c5593
- (void)showPopupVariantsForKey:(id)arg1;	// IMP=0x00000000008c423a
- (id)_variantsOfCurrencyKey:(id)arg1 language:(id)arg2;	// IMP=0x00000000008c405d
- (id)_variantsByAppendingDualStringKey:(id)arg1 toVariants:(id)arg2;	// IMP=0x00000000008c3e5e
- (id)_appendingSecondaryStringToVariantsTop:(id)arg1 secondaryString:(id)arg2 withDirection:(id)arg3;	// IMP=0x00000000008c3da8
- (id)_keyplaneVariantsKeyForString:(id)arg1;	// IMP=0x00000000008c3d62
- (id)_keyboardLongPressInteractionRegions;	// IMP=0x00000000008c3b19
- (void)longPressAction;	// IMP=0x00000000008c3044
- (void)showMenu:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000008c2fc7
- (_Bool)shouldShowInternationalMenuForKey:(id)arg1;	// IMP=0x00000000008c2f75
- (_Bool)isLongPressedKey:(id)arg1;	// IMP=0x00000000008c2ef4
- (_Bool)isShiftKeyPlaneChooser;	// IMP=0x00000000008c2e04
- (void)restoreDefaultsForAllKeys;	// IMP=0x00000000008c2dba
- (void)restoreDefaultsForKey:(id)arg1;	// IMP=0x00000000008c2d17
- (void)setLongPressAction:(SEL)arg1 forKey:(id)arg2;	// IMP=0x00000000008c2ce2
- (void)setAction:(SEL)arg1 forKey:(id)arg2;	// IMP=0x00000000008c2cad
- (void)setTarget:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000008c2c78
- (void)setLabel:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000008c279d
- (void)updateLayoutTags;	// IMP=0x00000000008c21e2
@property(retain, nonatomic) NSString *layoutTag; // @synthesize layoutTag=_layoutTag;
- (void)didClearInput;	// IMP=0x00000000008c2136
- (void)touchMultitapTimer;	// IMP=0x00000000008c2071
- (void)cancelMultitapTimer;	// IMP=0x00000000008c2038
- (_Bool)isMultitapKey:(id)arg1;	// IMP=0x00000000008c1fb4
- (void)handleMultitapTimerFired;	// IMP=0x00000000008c1efa
- (void)multitapExpired;	// IMP=0x00000000008c1eb1
- (void)endMultitapForKey:(id)arg1;	// IMP=0x00000000008c1e90
- (void)multitapInterrupted;	// IMP=0x00000000008c1cc3
- (_Bool)canMultitap;	// IMP=0x00000000008c1c64
- (id)multitapForwardKeys;	// IMP=0x00000000008c1c40
- (id)multitapCompleteKeys;	// IMP=0x00000000008c1c1c
- (id)activeMultitapCompleteKey;	// IMP=0x00000000008c190f
- (_Bool)hasAccentKey;	// IMP=0x00000000008c18e4
- (_Bool)hasCandidateKeys;	// IMP=0x00000000008c18b9
- (id)candidateList;	// IMP=0x00000000008c184f
- (void)logHandwritingData;	// IMP=0x00000000008c17d2
- (void)deleteHandwritingStrokesAtIndexes:(id)arg1;	// IMP=0x00000000008c1740
- (void)clearHandwritingStrokesIfNeededAndNotify:(_Bool)arg1;	// IMP=0x00000000008c169d
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 inputFlags:(int)arg3;	// IMP=0x00000000008c12bc
- (id)createKeyEventForStringAction:(id)arg1 forKey:(id)arg2 touchInfo:(id)arg3 inputFlags:(int)arg4;	// IMP=0x00000000008c123b
- (id)currentRepresentedStringForDualDisplayKey:(id)arg1;	// IMP=0x00000000008c113e
- (void)updatePhysicalKeyboardEvent:(id)arg1 withMarkedInput:(id)arg2;	// IMP=0x00000000008c0f8b
- (_Bool)isDeadkeyInput:(id)arg1;	// IMP=0x00000000008c0f35
- (void)performHitTestForTouchInfo:(id)arg1 touchStage:(int)arg2 executionContextPassingUIKBTree:(id)arg3;	// IMP=0x00000000008c0613
- (id)unprocessedTouchEventsForTouchInfo:(id)arg1 touchStage:(int)arg2 forcedKeyCode:(int)arg3;	// IMP=0x00000000008c0374
- (int)keycodeForKey:(id)arg1;	// IMP=0x00000000008c0338
- (_Bool)shouldIgnoreDistantKey;	// IMP=0x00000000008c02b9
- (_Bool)shouldPreventInputManagerHitTestingForKey:(id)arg1;	// IMP=0x00000000008c02a4
- (_Bool)isGeometricShiftOrMoreKeyForTouch:(id)arg1;	// IMP=0x00000000008c020b
- (id)keyHitTest:(struct CGPoint)arg1;	// IMP=0x00000000008c0190
- (id)keyHitTestWithoutCharging:(struct CGPoint)arg1;	// IMP=0x00000000008c00a6
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1 inKeys:(id)arg2;	// IMP=0x00000000008bfe5c
- (id)keyHitTestClosestToPoint:(struct CGPoint)arg1;	// IMP=0x00000000008bfe04
- (id)keyHitTestContainingPoint:(struct CGPoint)arg1;	// IMP=0x00000000008bfc3a
- (id)keyViewHitTestForPoint:(struct CGPoint)arg1;	// IMP=0x00000000008bfa48
- (_Bool)shouldHitTestKey:(id)arg1;	// IMP=0x00000000008bf9e6
- (void)finishSliderBehaviorFeedback;	// IMP=0x00000000008bf9e0
- (void)provideSliderBehaviorFeedback;	// IMP=0x00000000008bf9da
- (void)prepareSliderBehaviorFeedback;	// IMP=0x00000000008bf9d4
- (_Bool)isTrackpadMode;	// IMP=0x00000000008bf9c4
- (void)deactivateActiveKey;	// IMP=0x00000000008bf957
- (void)deactivateActiveKeys;	// IMP=0x00000000008bf8c5
- (void)deactivateActiveKeysClearingTouchInfo:(_Bool)arg1 clearingDimming:(_Bool)arg2;	// IMP=0x00000000008bf793
- (void)cleanupPreviousKeyboardWithNewInputTraits:(id)arg1;	// IMP=0x00000000008bf6f3
- (id)initialKeyplaneNameWithKBStarName:(id)arg1;	// IMP=0x00000000008bf334
- (_Bool)shouldUseDefaultShiftStateFromLayout;	// IMP=0x00000000008bf32c
- (void)setToInitialKeyplane;	// IMP=0x00000000008bf2e0
- (void)showKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;	// IMP=0x00000000008bf2b9
- (void)reloadKeyboardWithInputTraits:(id)arg1 screenTraits:(id)arg2 splitTraits:(id)arg3;	// IMP=0x00000000008bf292
- (void)showKeyboardWithInputMode:(id)arg1 renderConfig:(id)arg2 inputTraits:(id)arg3 screenTraits:(id)arg4 splitTraits:(id)arg5 reload:(_Bool)arg6;	// IMP=0x00000000008bef7a
- (void)showKeyboardWithInputMode:(id)arg1 renderConfig:(id)arg2 inputTraits:(id)arg3 screenTraits:(id)arg4 splitTraits:(id)arg5;	// IMP=0x00000000008bef5e
- (_Bool)_shouldInheritScreenScaleAsContentScaleFactor;	// IMP=0x00000000008bef56
- (void)updateCachedKeyplaneKeycaps;	// IMP=0x00000000008bed30
- (id)cacheTokenForKeyplane:(id)arg1 caseAlternates:(_Bool)arg2;	// IMP=0x00000000008beb82
- (id)cacheIdentifierForKeyplaneNamed:(id)arg1;	// IMP=0x00000000008beb04
@property(readonly, nonatomic) UIKeyboardEmojiKeyDisplayController *emojiKeyManager; // @synthesize emojiKeyManager=_emojiKeyManager;
- (Class)keyViewAnimatorClassForCurrentKeyboardLayout;	// IMP=0x00000000008beaa7
- (id)keyViewAnimator;	// IMP=0x00000000008bea6f
- (void)updateState:(int)arg1 forKey:(id)arg2;	// IMP=0x00000000008bea2a
- (void)setState:(int)arg1 forKey:(id)arg2;	// IMP=0x00000000008bea06
- (int)stateForKey:(id)arg1;	// IMP=0x00000000008be9e9
- (void)refreshForDictationAvailablityDidChange;	// IMP=0x00000000008be94c
- (_Bool)shouldMergeKey:(id)arg1;	// IMP=0x00000000008be66b
- (id)inputModeToMergeCapsLockKey;	// IMP=0x00000000008be628
- (_Bool)canAddRomanSwitchKey;	// IMP=0x00000000008be554
- (void)relayoutForWriteboardKey;	// IMP=0x00000000008be3bd
- (void)transitionToModalContinuousPathKeyplane;	// IMP=0x00000000008be2e4
- (void)updateReturnKeysIfNeeded;	// IMP=0x00000000008be23b
- (void)updateMoreAndInternationalKeys;	// IMP=0x00000000008bda62
- (void)_transformCarPlayIfNecessary;	// IMP=0x00000000008bd9a8
- (void)_transformFloatingKeyboardIfNecessary;	// IMP=0x00000000008bd8fe
- (void)_addResizeTransformationIfNecessary;	// IMP=0x00000000008bd854
- (void)_addExtraControlKeysIfNecessary;	// IMP=0x00000000008bd7aa
- (id)_currentKeyplaneTransformationContext;	// IMP=0x00000000008bd6ac
- (_Bool)_shouldAttemptToAddSupplementaryControlKeys;	// IMP=0x00000000008bd53b
- (void)_updateSupplementaryKeys;	// IMP=0x00000000008bd1b3
- (void)_swapGlobeAndMoreKeysIfNecessary;	// IMP=0x00000000008bcda7
- (void)mergeKeysIfNeeded;	// IMP=0x00000000008bccf1
- (id)keylistContainingKey:(id)arg1;	// IMP=0x00000000008bca65
- (int)stateForKeyplaneSwitchKey:(id)arg1;	// IMP=0x00000000008bc905
- (void)setTextEditingTraits:(id)arg1;	// IMP=0x00000000008bc427
- (unsigned long long)textEditingKeyMask;	// IMP=0x00000000008bc2d4
- (int)stateForManipulationKey:(id)arg1;	// IMP=0x00000000008bc0cf
- (id)highlightedVariantListForStylingKey:(id)arg1;	// IMP=0x00000000008bbfec
- (int)stateForStylingKey:(id)arg1;	// IMP=0x00000000008bbee8
- (_Bool)supportStylingWithKey:(id)arg1;	// IMP=0x00000000008bbdcc
- (int)stateForDictationKey:(id)arg1;	// IMP=0x00000000008bbcce
- (int)stateForCandidateListKey:(id)arg1;	// IMP=0x00000000008bbcc3
- (int)stateForMultitapForwardKey:(id)arg1;	// IMP=0x00000000008bbcb1
- (int)stateForMultitapReverseKey:(id)arg1;	// IMP=0x00000000008bbc20
- (int)displayTypeHintForShiftKey;	// IMP=0x00000000008bbb90
- (int)displayTypeHintForMoreKey;	// IMP=0x00000000008bbadf
- (void)setPercentSignKeysForCurrentLocaleOnKeyplane:(id)arg1;	// IMP=0x00000000008bb532
- (void)setCurrencyKeysForCurrentLocaleOnKeyplane:(id)arg1;	// IMP=0x00000000008bb039
- (void)updateCurrencySymbolForKey:(id)arg1 withCurrencyString:(id)arg2;	// IMP=0x00000000008bae84
- (_Bool)_stringContainsCurrencyCharacters:(id)arg1;	// IMP=0x00000000008bacc0
- (void)_setReturnKeyEnabled:(_Bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;	// IMP=0x00000000008ba9aa
- (void)setReturnKeyEnabled:(_Bool)arg1 withDisplayName:(id)arg2 withType:(int)arg3;	// IMP=0x00000000008ba921
- (void)updateTransitionWithFlags:(unsigned long long)arg1;	// IMP=0x00000000008ba8ad
- (void)clearKeyAnnotationsIfNecessary;	// IMP=0x00000000008ba4f2
- (void)annotateWriteboardDisplayTypeHintForKeyIfNeeded;	// IMP=0x00000000008ba1d7
- (_Bool)useUndoForMessagesWriteboard;	// IMP=0x00000000008ba15e
- (_Bool)useDismissForMessagesWriteboard;	// IMP=0x00000000008b9dfe
- (_Bool)ignoreWriteboard;	// IMP=0x00000000008b9d7a
- (void)annotateKeysWithDeveloperPunctuation;	// IMP=0x00000000008b9886
- (void)reloadCurrentKeyplane;	// IMP=0x00000000008b661b
- (_Bool)_allowPaddle;	// IMP=0x00000000008b65ae
- (_Bool)_allowContinuousPathUI;	// IMP=0x00000000008b6462
- (_Bool)shouldIgnoreContinuousPathRequirements;	// IMP=0x00000000008b63e2
- (_Bool)_allowStartingContinuousPathForTouchInfo:(id)arg1 alreadyActiveKeyExisting:(_Bool)arg2;	// IMP=0x00000000008b61b7
- (unsigned long long)keyplaneShiftState;	// IMP=0x00000000008b610d
- (_Bool)shouldAllowCurrentKeyplaneReload;	// IMP=0x00000000008b60b2
- (_Bool)shouldMergeAssistantBarWithKeyboardLayout;	// IMP=0x00000000008b6023
- (struct CGSize)stretchFactor;	// IMP=0x00000000008b5ea1
- (double)stretchFactorHeight;	// IMP=0x00000000008b5d41
- (_Bool)stretchKeyboardToFitKeyplane:(id)arg1;	// IMP=0x00000000008b5c29
- (_Bool)stretchKeyboardToFit;	// IMP=0x00000000008b5c0c
- (_Bool)showsDedicatedEmojiKeyAlongsideGlobeButton;	// IMP=0x00000000008b5b2d
- (_Bool)globeKeyDisplaysAsEmojiKey;	// IMP=0x00000000008b57b6
- (void)updateGlobeKeyDisplayString;	// IMP=0x00000000008b5731
- (void)setTwoFingerTapTimestamp:(double)arg1;	// IMP=0x00000000008b571f
- (_Bool)shouldAllowSelectionGestures:(_Bool)arg1 atPoint:(struct CGPoint)arg2 toBegin:(_Bool)arg3;	// IMP=0x00000000008b53c2
- (_Bool)isResized;	// IMP=0x00000000008b5376
- (_Bool)isResizing;	// IMP=0x00000000008b5359
- (_Bool)supportsEmoji;	// IMP=0x00000000008b5351
- (_Bool)canReuseKeyplaneView;	// IMP=0x00000000008b51ba
- (_Bool)shouldShowDictationKey;	// IMP=0x00000000008b4f64
- (void)updateBackgroundIfNeeded;	// IMP=0x00000000008b4d6e
- (void)updateBackgroundCorners;	// IMP=0x00000000008b4ccc
- (_Bool)isHandwritingPlane;	// IMP=0x00000000008b4c3d
- (void)didEndIndirectSelectionGesture:(_Bool)arg1;	// IMP=0x00000000008b4970
- (_Bool)isDeveloperGestureKeybaord;	// IMP=0x00000000008b491a
- (void)didEndIndirectSelectionGesture;	// IMP=0x00000000008b4903
- (void)cancelTouchesForTwoFingerTapGesture:(id)arg1;	// IMP=0x00000000008b48b8
- (void)willBeginIndirectSelectionGesture:(_Bool)arg1;	// IMP=0x00000000008b45c8
- (void)willBeginIndirectSelectionGesture;	// IMP=0x00000000008b45b1
- (void)setPasscodeOutlineAlpha:(double)arg1;	// IMP=0x00000000008b44b2
- (void)didTriggerDestructiveRenderConfigChange;	// IMP=0x00000000008b4479
- (void)setRenderConfig:(id)arg1 updateKeyplane:(_Bool)arg2;	// IMP=0x00000000008b42a6
- (void)traitCollectionDidChange;	// IMP=0x00000000008b40cc
- (struct CGImage *)renderedKeyplaneWithToken:(id)arg1 split:(_Bool)arg2;	// IMP=0x00000000008b4035
- (struct CGImage *)renderedImageWithToken:(id)arg1;	// IMP=0x00000000008b3d4e
- (struct CGImage *)renderedImageWithStateFallbacksForToken:(id)arg1;	// IMP=0x00000000008b3ca5
- (struct CGImage *)cachedCompositeImageWithCacheKey:(id)arg1;	// IMP=0x00000000008b3a83
- (void)rebuildSplitTransitionView;	// IMP=0x00000000008b385c
- (_Bool)shouldMatchCaseForDomainKeys;	// IMP=0x00000000008b3854
- (void)updateLocalizedKeysForKeyplane:(id)arg1 updateAllKeyplanes:(_Bool)arg2;	// IMP=0x00000000008b35ec
- (void)updateLocalizedKeys:(_Bool)arg1;	// IMP=0x00000000008b35b4
- (void)updateInputModeLocalizedKeysForKeyplane:(id)arg1;	// IMP=0x00000000008b2c4b
- (void)updateLocalizedDisplayStringsForKeys:(id)arg1;	// IMP=0x00000000008b23c2
- (void)updateAutolocalizedKeysForKeyplane:(id)arg1;	// IMP=0x00000000008b229a
- (void)updateLocalizedKeysOnKeyplane:(id)arg1;	// IMP=0x00000000008b1b93
- (void)nextToUseInputModeDidChange:(id)arg1;	// IMP=0x00000000008b1af5
- (id)internationalKeyDisplayStringOnEmojiKeyboard;	// IMP=0x00000000008b1a9b
- (void)updateLocalizedDisplayStringOnEmojiInternationalWithKeyplane:(id)arg1 withInputMode:(id)arg2;	// IMP=0x00000000008b1722
- (_Bool)canProduceString:(id)arg1;	// IMP=0x00000000008b11cf
@property(readonly, nonatomic) _Bool hasActiveKeys;
- (double)lastTouchDownTimestamp;	// IMP=0x00000000008b1182
- (double)lastTouchUpTimestamp;	// IMP=0x00000000008b1170
- (void)setKeyboardName:(id)arg1 appearance:(long long)arg2;	// IMP=0x00000000008b0dce
- (id)keyForKeyboardName:(id)arg1 screenTraits:(id)arg2;	// IMP=0x00000000008b0d7d
- (void)updateKeyboardForKeyplane:(id)arg1;	// IMP=0x00000000008b0c49
- (struct CGSize)sizeForKeyplane:(id)arg1;	// IMP=0x00000000008b0a3c
- (_Bool)allKeyplanesHaveSameHeight;	// IMP=0x00000000008b0850
- (void)setKeyboardAppearance:(long long)arg1;	// IMP=0x00000000008b05ac
- (int)visualStyleForKeyboardIfSplit:(_Bool)arg1;	// IMP=0x00000000008b04ee
- (void)refreshForRivenPreferences;	// IMP=0x00000000008b0386
- (void)tearDownSplitTransitionView;	// IMP=0x00000000008b0309
- (struct CGRect)frameForKeylayoutName:(id)arg1;	// IMP=0x00000000008b022b
- (struct CGRect)frameForKeylayoutName:(id)arg1 onKeyplaneName:(id)arg2;	// IMP=0x00000000008b01d5
- (struct CGRect)dragGestureRectInView:(id)arg1;	// IMP=0x00000000008b000b
- (id)defaultKeyplaneForKeyplane:(id)arg1;	// IMP=0x00000000008affb3
- (id)splitNameForKeyplane:(id)arg1;	// IMP=0x00000000008aff49
- (id)splitNameForKeyplaneName:(id)arg1;	// IMP=0x00000000008aff17
- (id)defaultNameForKeyplaneName:(id)arg1;	// IMP=0x00000000008afef4
@property(readonly, nonatomic) NSString *localizedInputMode;
- (SEL)handlerForNotification:(id)arg1;	// IMP=0x00000000008af946
- (void)flushKeyCache:(id)arg1;	// IMP=0x00000000008af78d
- (void)removeFromSuperview;	// IMP=0x00000000008af6fc
- (void)clearTransientState;	// IMP=0x00000000008af680
- (void)clearUnusedObjects:(_Bool)arg1;	// IMP=0x00000000008af31e
- (void)willMoveToWindow:(id)arg1;	// IMP=0x00000000008af2ba
- (id)hitTest:(struct CGPoint)arg1 withEvent:(id)arg2;	// IMP=0x00000000008af279
- (void)accessibilitySensitivityChanged;	// IMP=0x00000000008af243
- (void)removePathEffectViewConstraintsIfNeeded;	// IMP=0x00000000008af1fe
- (void)dealloc;	// IMP=0x00000000008aee25
- (id)initWithFrame:(struct CGRect)arg1;	// IMP=0x00000000008aebac
@property(readonly, nonatomic, getter=isRotating) _Bool rotating;
- (void)setKeyForTouchInfo:(id)arg1 key:(id)arg2;	// IMP=0x00000000008dadcc
- (id)popupKeyViews;	// IMP=0x00000000008dabf2
- (struct CGRect)frameForLastKeyWithRepresentedString:(id)arg1;	// IMP=0x00000000008daa1e
- (struct CGRect)frameForKeyWithRepresentedString:(id)arg1;	// IMP=0x00000000008da672
- (id)keyWithRepresentedString:(id)arg1;	// IMP=0x00000000008da4a4
- (id)keyplaneView:(id)arg1 containingViewForActiveKey:(id)arg2;	// IMP=0x00000000008dc1e5
- (void)_didChangeKeyplaneWithContext:(id)arg1;	// IMP=0x00000000008dc171
- (void)showPopupView:(long long)arg1 withKey:(id)arg2 popupInfo:(id)arg3 force:(_Bool)arg4;	// IMP=0x00000000008dc0cf
- (void)setKeyboardDim:(_Bool)arg1;	// IMP=0x00000000008dbf07
- (void)setPreferredHeight:(double)arg1;	// IMP=0x00000000008dbdec
- (void)setDisableInteraction:(_Bool)arg1;	// IMP=0x00000000008dbda1
- (void)setKeyboardDim:(_Bool)arg1 amount:(double)arg2 withDuration:(double)arg3;	// IMP=0x00000000008dba81
- (void)dismissGestureKeyboardIntroduction;	// IMP=0x00000000008dba43
- (void)handleDismissFlickView;	// IMP=0x00000000008db9e6
- (void)handleDismissFlickView:(id)arg1;	// IMP=0x00000000008db8c1
- (void)handlePopupView;	// IMP=0x00000000008db7ff
- (void)handlePopupView:(id)arg1;	// IMP=0x00000000008db74d
- (void)showFlickView:(long long)arg1 withKey:(id)arg2 flickString:(id)arg3;	// IMP=0x00000000008db6d5
- (_Bool)handleFlick:(id)arg1;	// IMP=0x00000000008db301
- (void)populateFlickPopupsForKey:(id)arg1;	// IMP=0x00000000008daf61
- (id)flickStringForInputKey:(id)arg1 direction:(long long)arg2;	// IMP=0x00000000008dae25
- (id)flickPopupStringForKey:(id)arg1 withString:(id)arg2;	// IMP=0x00000000008dade4
- (void)finishContinuousPathView:(_Bool)arg1;	// IMP=0x00000000008dccd3
- (void)clearContinuousPathView;	// IMP=0x00000000008dcc08
- (void)addContinuousPathPoint:(struct CGPoint)arg1 withTimestamp:(double)arg2;	// IMP=0x00000000008dcac8
- (void)didBeginContinuousPath;	// IMP=0x00000000008dc820
- (void)transitionToPunctuationKeysVisible:(_Bool)arg1;	// IMP=0x00000000008dc81a
- (void)_transitionToContinuousPathState:(long long)arg1 forTouchInfo:(id)arg2;	// IMP=0x00000000008dc77f
@property(retain, nonatomic) UIKeyboardPathEffectView *pathEffectView;
- (void)didMoveToWindow;	// IMP=0x00000000008dc32a
- (_Bool)_continuousPathModalPunctuationPlaneEnabled;	// IMP=0x00000000008dc2b2
- (_Bool)_continuousPathSpotlightEffectEnabled;	// IMP=0x00000000008dc276

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

