//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <WebKitLegacy/DOMNode.h>

#import <UIKitCore/UIKeyInput-Protocol.h>
#import <UIKitCore/UIKeyboardInput-Protocol.h>
#import <UIKitCore/UITextInputPrivate-Protocol.h>
#import <UIKitCore/UITextInputTokenizer-Protocol.h>
#import <UIKitCore/UITextInput_Internal-Protocol.h>

@class NSDictionary, NSIndexSet, NSString, RTIInputSystemSourceSession, UIColor, UIImage, UIInputContextHistory, UIResponder, UITextInputPasswordRules, UITextInteractionAssistant, UITextPosition, UITextRange, UIView, _UISupplementalLexicon;
@protocol UITextInput, UITextInputDelegate, UITextInputPrivate, UITextInputSuggestionDelegate, UITextInputTokenizer;

@interface DOMNode (UIWebFormPeripheral) <UITextInput_Internal, UIKeyboardInput, UITextInputPrivate, UIKeyInput, UITextInputTokenizer>
- (id)createPeripheral;	// IMP=0x000000000063441a
- (id)itemTitle;	// IMP=0x000000000063a8bf
- (void)populateCell:(id)arg1;	// IMP=0x000000000063a8b9
- (id)createPickerCell;	// IMP=0x000000000063a8b1
- (id)createSelectedItem;	// IMP=0x000000000063a8a9
- (id)_responderWindow;	// IMP=0x0000000000a3ae19
- (id)inputAssistantItem;	// IMP=0x0000000000a3adee
- (id)_textInteraction;	// IMP=0x0000000000a3adc3
- (id)_selectableText;	// IMP=0x0000000000a3adba
- (_Bool)_shouldPerformUICalloutBarButtonReplaceAction:(SEL)arg1 forText:(id)arg2 checkAutocorrection:(_Bool)arg3;	// IMP=0x0000000000a3ad0b
- (void)_unmarkText;	// IMP=0x0000000000a3aca5
- (void)_setAttributedMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0000000000a3aaa5
- (void)_setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x0000000000a3aa3a
- (_Bool)_hasMarkedText;	// IMP=0x0000000000a3a9df
- (_Bool)_usesAsynchronousProtocol;	// IMP=0x0000000000a3a9ad
- (void)_setGestureRecognizers;	// IMP=0x0000000000a3a6c8
- (long long)_selectionAffinity;	// IMP=0x0000000000a3a5cf
- (void)_setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0000000000a3a55f
- (id)_positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0000000000a3a51a
- (id)_moveRight:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a3a3ea
- (id)_moveLeft:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a3a2ba
- (id)_moveDown:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a3a0a2
- (id)_moveUp:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a39e8a
- (id)_moveToEndOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a39d60
- (id)_moveToStartOfDocument:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a39c7d
- (id)_moveToEndOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a39afe
- (id)_moveToStartOfParagraph:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a39973
- (id)_moveToEndOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a397a5
- (id)_moveToStartOfLine:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a395cb
- (id)_moveToEndOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a393ed
- (id)_moveToStartOfWord:(_Bool)arg1 withHistory:(id)arg2;	// IMP=0x0000000000a39096
- (id)_setHistory:(id)arg1 withExtending:(_Bool)arg2 withAnchor:(int)arg3 withAffinityDownstream:(_Bool)arg4;	// IMP=0x0000000000a38ec5
- (id)_setSelectionRangeWithHistory:(id)arg1;	// IMP=0x0000000000a38c72
- (void)_updateSelectionWithTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x0000000000a38c32
- (id)_fontForCaretSelection;	// IMP=0x0000000000a38b48
- (id)_textColorForCaretSelection;	// IMP=0x0000000000a38a5e
- (id)_rangeFromCurrentRangeWithDelta:(struct _NSRange)arg1;	// IMP=0x0000000000a38939
- (id)_clampedpositionFromPosition:(id)arg1 offset:(int)arg2;	// IMP=0x0000000000a388a3
- (id)_rangeOfSmartSelectionIncludingRange:(id)arg1;	// IMP=0x0000000000a383c6
- (id)_findPleasingWordBoundaryFromPosition:(id)arg1;	// IMP=0x0000000000a38271
- (_Bool)_range:(id)arg1 isEqualToRange:(id)arg2;	// IMP=0x0000000000a381bd
- (id)_intersectionOfRange:(id)arg1 andRange:(id)arg2;	// IMP=0x0000000000a380e3
- (_Bool)_range:(id)arg1 intersectsRange:(id)arg2;	// IMP=0x0000000000a38081
- (_Bool)_range:(id)arg1 containsRange:(id)arg2;	// IMP=0x0000000000a37ffe
- (id)_rangeSpanningTextUnit:(long long)arg1 andPosition:(id)arg2;	// IMP=0x0000000000a37e92
- (id)_fullRange;	// IMP=0x0000000000a37e38
- (id)_rangeOfParagraphEnclosingPosition:(id)arg1;	// IMP=0x0000000000a37e1e
- (id)_rangeOfSentenceEnclosingPosition:(id)arg1;	// IMP=0x0000000000a37e04
- (id)_rangeOfLineEnclosingPosition:(id)arg1;	// IMP=0x0000000000a37dea
- (id)_rangeOfEnclosingWord:(id)arg1;	// IMP=0x0000000000a37dd0
- (id)_rangeOfTextUnit:(long long)arg1 enclosingPosition:(id)arg2;	// IMP=0x0000000000a37d2e
- (id)_rangeOfText:(id)arg1 endingAtPosition:(id)arg2;	// IMP=0x0000000000a37aaa
- (id)_normalizedStringForRangeComparison:(id)arg1;	// IMP=0x0000000000a37a56
- (void)_scrollRectToVisible:(struct CGRect)arg1 animated:(_Bool)arg2;	// IMP=0x0000000000a3798f
- (void)_replaceDocumentWithText:(id)arg1;	// IMP=0x0000000000a37903
- (void)_replaceCurrentWordWithText:(id)arg1;	// IMP=0x0000000000a37888
- (void)_transpose;	// IMP=0x0000000000a3769b
- (void)_deleteForwardAndNotify:(_Bool)arg1;	// IMP=0x0000000000a3756b
- (void)_deleteBackwardAndNotify:(_Bool)arg1;	// IMP=0x0000000000a37540
- (void)_deleteTextRange:(id)arg1;	// IMP=0x0000000000a37464
- (void)_deleteToEndOfParagraph;	// IMP=0x0000000000a37331
- (void)_deleteToEndOfLine;	// IMP=0x0000000000a371fe
- (void)_deleteToStartOfLine;	// IMP=0x0000000000a370c8
- (void)_deleteForwardByWord;	// IMP=0x0000000000a36efb
- (void)_deleteByWord;	// IMP=0x0000000000a36e06
- (void)_setCaretSelectionAtEndOfSelection;	// IMP=0x0000000000a36d6d
- (id)_positionAtStartOfWords:(unsigned long long)arg1 beforePosition:(id)arg2;	// IMP=0x0000000000a36bdc
- (id)_positionFromPosition:(id)arg1 pastTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x0000000000a36ab5
- (long long)_opposingDirectionFromDirection:(long long)arg1;	// IMP=0x0000000000a36a9b
- (id)_positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x0000000000a36a33
- (void)_expandSelectionToStartOfWordsBeforeCaretSelection:(int)arg1;	// IMP=0x0000000000a36976
- (void)_expandSelectionToStartOfWordBeforeCaretSelection;	// IMP=0x0000000000a3695f
- (void)_expandSelectionToBackwardDeletionCluster;	// IMP=0x0000000000a36789
- (void)_moveCurrentSelection:(int)arg1;	// IMP=0x0000000000a36695
- (void)_extendCurrentSelection:(int)arg1;	// IMP=0x0000000000a365a6
- (_Bool)_hasMarkedTextOrRangedSelection;	// IMP=0x0000000000a36532
- (_Bool)_isEmptySelection;	// IMP=0x0000000000a364c4
- (struct CGRect)_selectionClipRect;	// IMP=0x0000000000a364a6
- (_Bool)_selectionAtDocumentEnd;	// IMP=0x0000000000a36431
- (_Bool)_selectionAtDocumentStart;	// IMP=0x0000000000a363bc
- (_Bool)_selectionAtWordStart;	// IMP=0x0000000000a36318
- (void)_setSelectionToPosition:(id)arg1;	// IMP=0x0000000000a362b2
- (id)_fullText;	// IMP=0x0000000000a36248
- (id)_wordContainingCaretSelection;	// IMP=0x0000000000a361a6
- (unsigned int)_characterInRelationToPosition:(id)arg1 amount:(int)arg2;	// IMP=0x0000000000a36083
- (unsigned int)_characterInRelationToRangedSelection:(int)arg1;	// IMP=0x0000000000a35ea4
- (unsigned int)_characterInRelationToCaretSelection:(int)arg1;	// IMP=0x0000000000a35e1b
- (unsigned int)_characterBeforeCaretSelection;	// IMP=0x0000000000a35e04
- (unsigned int)_characterAfterCaretSelection;	// IMP=0x0000000000a35df0
- (id)_textRangeFromNSRange:(struct _NSRange)arg1;	// IMP=0x0000000000a35d42
- (struct _NSRange)_nsrangeForTextRange:(id)arg1;	// IMP=0x0000000000a35cb5
- (int)_indexForTextPosition:(id)arg1;	// IMP=0x0000000000a35c68
- (void)_selectAll;	// IMP=0x0000000000a35c2a
- (struct _NSRange)_selectedRangeWithinMarkedText;	// IMP=0x0000000000a35b39
- (struct _NSRange)_selectedNSRange;	// IMP=0x0000000000a35adc
@property(nonatomic) long long _textInputSource;
@property(readonly, nonatomic) id <UITextInputSuggestionDelegate> textInputSuggestionDelegate;
- (id)_keyInput;	// IMP=0x0000000000a35998
@property(readonly, nonatomic, getter=_proxyTextInput) UIResponder<UITextInput> *__content;
@property(readonly, nonatomic) UIView *textInputView;
- (id)urlScheme;	// IMP=0x00000000010ba8b1
- (id)tagName;	// IMP=0x00000000010ba863
- (id)_realNode;	// IMP=0x00000000010bc765
- (id)_textFormElement;	// IMP=0x00000000010bc8de
- (id)_previousAssistedNode;	// IMP=0x00000000010bc881
- (id)_nextAssistedNode;	// IMP=0x00000000010bc824
- (void)_accessoryClear;	// IMP=0x00000000010bc81e
- (_Bool)_supportsAccessoryClear;	// IMP=0x00000000010bc816
- (_Bool)_supportsAutoFill;	// IMP=0x00000000010bc80e
- (_Bool)_requiresInputView;	// IMP=0x00000000010bc7fc
- (_Bool)_requiresAccessoryView;	// IMP=0x00000000010bc7ea
- (void)_stopAssistingDocumentView:(id)arg1;	// IMP=0x00000000010bc7b3
- (void)_startAssistingDocumentView:(id)arg1;	// IMP=0x00000000010bc77c
- (_Bool)nodeCanBecomeFirstResponder;	// IMP=0x00000000010ca8fb
- (_Bool)isLikelyToBeginPageLoad;	// IMP=0x00000000010ca8f3
- (id)absoluteQuadsAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000010ca8e1
- (_Bool)touchCalloutEnabled;	// IMP=0x00000000010ca8d9
- (id)tapHighlightColor;	// IMP=0x00000000010ca8aa
- (_Bool)alwaysAttemptToShowTapHighlight;	// IMP=0x00000000010ca898
- (_Bool)showsTapHighlight;	// IMP=0x00000000010ca890
@property(nonatomic) long long keyboardType;
- (_Bool)isSecure;	// IMP=0x00000000010da620
- (_Bool)isTextControl;	// IMP=0x00000000010da618
- (struct CGRect)convertRect:(struct CGRect)arg1 toView:(id)arg2;	// IMP=0x00000000010da4cc
- (id)textDocument;	// IMP=0x00000000010dd4d5
@property(nonatomic) long long selectionAffinity;
- (_Bool)editing;	// IMP=0x00000000010dd478
- (_Bool)editable;	// IMP=0x00000000010dd470
- (id)selectionRectsForRange:(id)arg1;	// IMP=0x00000000010dd1f9
- (void)setBaseWritingDirection:(long long)arg1 forRange:(id)arg2;	// IMP=0x00000000010dd1f3
- (long long)baseWritingDirectionForPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00000000010dd1eb
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(long long)arg2;	// IMP=0x00000000010dd169
- (id)positionWithinRange:(id)arg1 farthestInDirection:(long long)arg2;	// IMP=0x00000000010dd0f2
- (id)characterRangeAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000010dd05d
- (id)closestPositionToPoint:(struct CGPoint)arg1 withinRange:(id)arg2;	// IMP=0x00000000010dcfda
- (id)closestPositionToPoint:(struct CGPoint)arg1;	// IMP=0x00000000010dcf61
@property(copy, nonatomic) NSDictionary *markedTextStyle;
- (struct CGRect)caretRectForPosition:(id)arg1;	// IMP=0x00000000010dcddc
@property(nonatomic) __weak id <UITextInputDelegate> inputDelegate;
@property(readonly, nonatomic) id <UITextInputTokenizer> tokenizer;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00000000010dcc67
- (_Bool)isPosition:(id)arg1 withinTextUnit:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00000000010dcc1d
- (id)positionFromPosition:(id)arg1 toBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00000000010dcbae
- (_Bool)isPosition:(id)arg1 atBoundary:(long long)arg2 inDirection:(long long)arg3;	// IMP=0x00000000010dcb64
- (id)positionFromPosition:(id)arg1 inDirection:(long long)arg2 offset:(long long)arg3;	// IMP=0x00000000010dcafb
- (id)positionFromPosition:(id)arg1 offset:(long long)arg2;	// IMP=0x00000000010dca7e
- (long long)offsetFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00000000010dca32
- (long long)comparePosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00000000010dc9e7
@property(readonly, nonatomic) _Bool hasText;
- (void)unmarkText;	// IMP=0x00000000010dc962
@property(readonly, nonatomic) UITextRange *markedTextRange;
- (void)moveDown;	// IMP=0x00000000010dc882
- (void)moveUp;	// IMP=0x00000000010dc815
- (void)moveLeft;	// IMP=0x00000000010dc7a8
- (void)moveRight;	// IMP=0x00000000010dc73b
- (struct CGRect)_lastRectForRange:(id)arg1;	// IMP=0x00000000010dc615
- (struct CGRect)firstRectForRange:(id)arg1;	// IMP=0x00000000010dc4fa
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;	// IMP=0x00000000010dc4e5
- (void)replaceRange:(id)arg1 withText:(id)arg2;	// IMP=0x00000000010dc4cd
- (void)replaceRange:(id)arg1 withText:(id)arg2 closeTyping:(_Bool)arg3;	// IMP=0x00000000010dc3d5
- (id)rangeOfEnclosingWord:(id)arg1;	// IMP=0x00000000010dc381
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;	// IMP=0x00000000010dc2e5
- (id)textInRange:(id)arg1;	// IMP=0x00000000010dc26c
@property(readonly, nonatomic) UITextPosition *endOfDocument;
@property(readonly, nonatomic) UITextPosition *beginningOfDocument;
@property(copy) UITextRange *selectedTextRange;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(_Bool)arg2;	// IMP=0x00000000010dc075
@property(readonly, nonatomic) UIView<UITextInputPrivate> *_textSelectingContainer;
- (void)setBecomesEditableWithGestures:(_Bool)arg1;	// IMP=0x00000000010dbf9f
- (_Bool)becomesEditableWithGestures;	// IMP=0x00000000010dbf97
- (_Bool)isEditing;	// IMP=0x00000000010dbf8f
- (_Bool)isEditable;	// IMP=0x00000000010dbf87
- (id)content;	// IMP=0x00000000010dbf7f
- (void)updateSelection;	// IMP=0x00000000010dbf79
- (id)selectionView;	// IMP=0x00000000010dbf4e
@property(readonly, nonatomic) UITextInteractionAssistant *interactionAssistant;
- (_Bool)isAutoFillMode;	// IMP=0x00000000010dbeb0
- (void)acceptedAutoFillWord:(id)arg1;	// IMP=0x00000000010dbe5c
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1;	// IMP=0x00000000010dbe42
- (void)updateAutoscroll:(id)arg1;	// IMP=0x00000000010dba65
- (id)automaticallySelectedOverlay;	// IMP=0x00000000010dba22
- (void)setInitialSelectionBehavior:(int)arg1;	// IMP=0x00000000010dba1c
- (int)initialSelectionBehavior;	// IMP=0x00000000010dba14
@property(nonatomic) long long returnKeyType;
@property(nonatomic) int textLoupeVisibility;
@property(nonatomic) _Bool contentsIsSingleValue;
@property(nonatomic) id textSuggestionDelegate;
- (_Bool)isShowingPlaceholder;	// IMP=0x00000000010db9d4
- (struct CGRect)convertCaretRect:(struct CGRect)arg1;	// IMP=0x00000000010db951
- (struct CGRect)caretRect;	// IMP=0x00000000010db848
- (void)setSelectionWithPoint:(struct CGPoint)arg1;	// IMP=0x00000000010db82e
- (void)setSelectionWithPoint:(struct CGPoint)arg1 inset:(double)arg2;	// IMP=0x00000000010db7ab
- (id)text;	// IMP=0x00000000010db755
- (void)setText:(id)arg1;	// IMP=0x00000000010db6be
- (struct CGPoint)constrainedPoint:(struct CGPoint)arg1 withInset:(double)arg2;	// IMP=0x00000000010db4e7
- (int)selectionState;	// IMP=0x00000000010db4a4
- (void)selectAll;	// IMP=0x00000000010db447
- (_Bool)selectionAtWordStart;	// IMP=0x00000000010db404
- (_Bool)selectionAtDocumentStart;	// IMP=0x00000000010db3c1
- (_Bool)hasSelection;	// IMP=0x00000000010db37e
- (void)extendCurrentSelection:(int)arg1;	// IMP=0x00000000010db2f7
- (id)rangeByExtendingCurrentSelection:(int)arg1;	// IMP=0x00000000010db2a5
- (id)rangeByMovingCurrentSelection:(int)arg1;	// IMP=0x00000000010db253
- (struct _NSRange)selectionRange;	// IMP=0x00000000010db210
- (int)wordOffsetInRange:(id)arg1;	// IMP=0x00000000010db1be
- (id)textColorForCaretSelection;	// IMP=0x00000000010db1a5
- (id)fontForCaretSelection;	// IMP=0x00000000010db099
- (unsigned short)characterAfterCaretSelection;	// IMP=0x00000000010db056
- (void)replaceCurrentWordWithText:(id)arg1;	// IMP=0x00000000010daf7f
- (void)clearMarkedText;	// IMP=0x00000000010daf5e
- (id)rectsForNSRange:(struct _NSRange)arg1;	// IMP=0x00000000010daee2
- (void)confirmMarkedText:(id)arg1;	// IMP=0x00000000010dadf7
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2;	// IMP=0x00000000010dad2d
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;	// IMP=0x00000000010dacdb
- (void)removeTextPlaceholder:(id)arg1;	// IMP=0x00000000010dacaa
- (id)insertTextPlaceholderWithSize:(struct CGSize)arg1;	// IMP=0x00000000010dac68
- (struct CGRect)frameForDictationResultPlaceholder:(id)arg1;	// IMP=0x00000000010dac00
- (void)removeDictationResultPlaceholder:(id)arg1 willInsertResult:(_Bool)arg2;	// IMP=0x00000000010dabc0
@property(readonly, nonatomic) id insertDictationResultPlaceholder;
- (id)metadataDictionariesForDictationResults;	// IMP=0x00000000010dab6a
- (void)insertDictationResult:(id)arg1 withCorrectionIdentifier:(id)arg2;	// IMP=0x00000000010dab2a
- (void)endFloatingCursor;	// IMP=0x00000000010daaff
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1 velocity:(struct CGPoint)arg2;	// IMP=0x00000000010daaa9
- (void)updateFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000010daa67
- (void)beginFloatingCursorAtPoint:(struct CGPoint)arg1;	// IMP=0x00000000010daa25
- (id)uiWebDocumentView;	// IMP=0x00000000010da9e2
- (void)insertText:(id)arg1;	// IMP=0x00000000010da961
- (void)deleteBackward;	// IMP=0x00000000010da8e3
@property(nonatomic) struct __CFCharacterSet *textTrimmingSet;
- (void)endSelectionChange;	// IMP=0x00000000010da8a4
- (void)beginSelectionChange;	// IMP=0x00000000010da873
- (void)handleKeyWebEvent:(id)arg1;	// IMP=0x00000000010da821
- (_Bool)requiresKeyEvents;	// IMP=0x00000000010da819
- (id)delegate;	// IMP=0x00000000010da811
- (void)setSecure:(_Bool)arg1;	// IMP=0x00000000010da80b
- (id)textInputTraits;	// IMP=0x00000000010da6bf
- (void)setupPlaceholderTextIfNeeded;	// IMP=0x00000000010da6b9
@property(nonatomic) _Bool isSingleLineDocument;
- (_Bool)hasContent;	// IMP=0x00000000010da661
- (void)takeTraitsFrom:(id)arg1;	// IMP=0x00000000010da630

// Remaining properties
@property(copy, nonatomic) NSIndexSet *PINEntrySeparatorIndexes;
@property(readonly, nonatomic) RTIInputSystemSourceSession *_rtiSourceSession;
@property(nonatomic) _Bool acceptsDictationSearchResults;
@property(nonatomic) _Bool acceptsEmoji;
@property(nonatomic) _Bool acceptsFloatingKeyboard;
@property(nonatomic) _Bool acceptsInitialEmojiKeyboard;
@property(nonatomic) _Bool acceptsPayloads;
@property(nonatomic) _Bool acceptsSplitKeyboard;
@property(nonatomic) long long autocapitalizationType;
@property(copy, nonatomic) NSString *autocorrectionContext;
@property(nonatomic) long long autocorrectionType;
@property(readonly, copy) NSString *debugDescription;
@property(nonatomic) _Bool deferBecomingResponder;
@property(readonly, copy) NSString *description;
@property(nonatomic, getter=isDevicePasscodeEntry) _Bool devicePasscodeEntry;
@property(nonatomic) _Bool disableHandwritingKeyboard;
@property(nonatomic) _Bool disableInputBars;
@property(nonatomic) _Bool disablePrediction;
@property(nonatomic) _Bool displaySecureEditsUsingPlainText;
@property(nonatomic) _Bool displaySecureTextUsingPlainText;
@property(nonatomic) int emptyContentReturnKeyType;
@property(nonatomic) _Bool enablesReturnKeyAutomatically;
@property(nonatomic) _Bool enablesReturnKeyOnNonWhiteSpaceContent;
@property(nonatomic) struct UIEdgeInsets floatingKeyboardEdgeInsets;
@property(nonatomic) _Bool forceDefaultDictationInfo;
@property(nonatomic) long long forceDictationKeyboardType;
@property(nonatomic) _Bool forceDisableDictation;
@property(nonatomic) _Bool forceEnableDictation;
@property(nonatomic) _Bool forceFloatingKeyboard;
@property(nonatomic) _Bool hasDefaultContents;
@property(readonly) unsigned long long hash;
@property(nonatomic) _Bool hidePrediction;
@property(retain, nonatomic) UIInputContextHistory *inputContextHistory;
@property(retain, nonatomic) UIColor *insertionPointColor;
@property(nonatomic) unsigned long long insertionPointWidth;
@property(nonatomic) _Bool isCarPlayIdiom;
@property(nonatomic) long long keyboardAppearance;
@property(nonatomic) _Bool learnsCorrections;
@property(nonatomic) _Bool loadKeyboardsForSiriLanguage;
@property(copy, nonatomic) UITextInputPasswordRules *passwordRules;
@property(nonatomic) _Bool preferOnlineDictation;
@property(nonatomic) long long preferredKeyboardStyle;
@property(copy, nonatomic) NSString *recentInputIdentifier;
@property(copy, nonatomic) NSString *responseContext;
@property(nonatomic) _Bool returnKeyGoesToNextResponder;
@property(nonatomic, getter=isSecureTextEntry) _Bool secureTextEntry;
@property(retain, nonatomic) UIColor *selectionBarColor;
@property(retain, nonatomic) UIColor *selectionBorderColor;
@property(nonatomic) double selectionBorderWidth;
@property(nonatomic) double selectionCornerRadius;
@property(retain, nonatomic) UIImage *selectionDragDotImage;
@property(nonatomic) struct UIEdgeInsets selectionEdgeInsets;
@property(nonatomic) long long selectionGranularity;
@property(retain, nonatomic) UIColor *selectionHighlightColor;
@property(nonatomic) int shortcutConversionType;
@property(nonatomic) _Bool showDictationButton;
@property(nonatomic) long long smartDashesType;
@property(nonatomic) long long smartInsertDeleteType;
@property(nonatomic) long long smartQuotesType;
@property(nonatomic) long long spellCheckingType;
@property(readonly) Class superclass;
@property(retain, nonatomic) _UISupplementalLexicon *supplementalLexicon;
@property(retain, nonatomic) UIImage *supplementalLexiconAmbiguousItemIcon;
@property(readonly, nonatomic) _Bool supportsImagePaste;
@property(nonatomic) _Bool suppressReturnKeyStyling;
@property(copy, nonatomic) NSString *textContentType;
@property(readonly, nonatomic) UITextRange *textRangeForServicesInteraction;
@property(nonatomic) long long textScriptType;
@property(nonatomic) int textSelectionBehavior;
@property(retain, nonatomic) UIColor *underlineColorForSpelling;
@property(retain, nonatomic) UIColor *underlineColorForTextAlternatives;
@property(nonatomic) _Bool useAutomaticEndpointing;
@property(nonatomic) _Bool useInterfaceLanguageForLocalization;
@property(nonatomic) struct _NSRange validTextRange;
@end

