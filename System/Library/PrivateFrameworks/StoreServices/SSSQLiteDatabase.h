//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class BKSProcessAssertion, NSString;
@protocol OS_dispatch_queue;

@interface SSSQLiteDatabase : NSObject
{
    struct sqlite3 *_db;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_dispatchQueue;	// 16 = 0x10
    NSString *_databasePath;	// 24 = 0x18
    _Bool _readOnly;	// 32 = 0x20
    _Bool _shouldAttemptToReopenDB;	// 33 = 0x21
    _Bool _isInTransaction;	// 34 = 0x22
    NSString *_protectionType;	// 40 = 0x28
    CDUnknownBlockType _setupBlock;	// 48 = 0x30
    struct __CFDictionary *_statementCache;	// 56 = 0x38
    _Bool _takesTaskCompletionAssertions;	// 64 = 0x40
    BKSProcessAssertion *_taskAssertion;	// 72 = 0x48
    long long _taskAssertionCount;	// 80 = 0x50
}

+ (void)_stepStatement:(struct sqlite3_stmt *)arg1 hasRow:(_Bool *)arg2 didFinish:(_Bool *)arg3 isCorrupt:(_Bool *)arg4;	// IMP=0x0000000000107cee
+ (void)_setTakesTaskCompletionAssertions:(_Bool)arg1;	// IMP=0x00000000001079d0
+ (_Bool)statementHasRowAfterStepping:(struct sqlite3_stmt *)arg1;	// IMP=0x0000000000106b6b
+ (_Bool)statementDidFinishAfterStepping:(struct sqlite3_stmt *)arg1;	// IMP=0x0000000000106b40
@property(copy, nonatomic) CDUnknownBlockType setupBlock; // @synthesize setupBlock=_setupBlock;
- (struct sqlite3_stmt *)_statementForSQL:(id)arg1 cache:(_Bool)arg2;	// IMP=0x00000000001096aa
- (void)_resetDatabaseWithPath:(id)arg1;	// IMP=0x00000000001093cc
- (void)_resetCorruptDatabase;	// IMP=0x000000000010914e
- (int)_resetAndReopenDatabaseWithPath:(id)arg1;	// IMP=0x0000000000108f65
- (int)_openFlags;	// IMP=0x0000000000108ea7
- (id)_openDatabaseIfNotOpen;	// IMP=0x00000000001085f0
- (void)_expireBackgroundTask;	// IMP=0x000000000010847f
- (void)_endTaskCompletionAssertion;	// IMP=0x0000000000108285
- (int)_closeDatabaseIfOpen;	// IMP=0x000000000010820e
- (void)_beginTaskCompletionAssertion;	// IMP=0x000000000010803b
- (void)_accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000107f2d
@property _Bool takesTaskCompletionAssertions;
- (_Bool)statementHasRowAfterStepping:(struct sqlite3_stmt *)arg1;	// IMP=0x0000000000107bd5
- (_Bool)statementDidFinishAfterStepping:(struct sqlite3_stmt *)arg1;	// IMP=0x0000000000107b5f
- (void)expireBackgroundTask;	// IMP=0x0000000000107aa0
- (void)endTaskCompletionAssertion;	// IMP=0x0000000000107a3f
- (void)beginTaskCompletionAssertion;	// IMP=0x00000000001079dc
- (long long)userVersionForDatabase:(id)arg1;	// IMP=0x000000000010775c
- (long long)userVersion;	// IMP=0x0000000000107743
- (_Bool)setUserVersion:(long long)arg1 forDatabase:(id)arg2;	// IMP=0x00000000001076d5
- (_Bool)setUserVersion:(long long)arg1;	// IMP=0x00000000001076bc
- (void)prepareStatementForSQL:(id)arg1 cache:(_Bool)arg2 usingBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000000001075bb
- (void)performTransactionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000010747c
- (id)newDispatchSourceWithType:(struct dispatch_source_type_s *)arg1;	// IMP=0x0000000000107467
- (_Bool)executeSQL:(id)arg1;	// IMP=0x0000000000106f77
- (void)dispatchBlockSync:(CDUnknownBlockType)arg1;	// IMP=0x0000000000106f3e
- (void)dispatchBlockAsync:(CDUnknownBlockType)arg1;	// IMP=0x0000000000106f05
- (void)dispatchAfter:(unsigned long long)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x0000000000106ef1
- (long long)countChanges;	// IMP=0x0000000000106e1e
- (_Bool)columnName:(id)arg1 existsInTable:(id)arg2;	// IMP=0x0000000000106c67
- (void)accessDatabaseUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000106b97
- (void)dealloc;	// IMP=0x0000000000106915
- (id)initWithDatabaseURL:(id)arg1 readOnly:(_Bool)arg2 protectionType:(id)arg3;	// IMP=0x00000000001065f4
- (id)initWithDatabaseURL:(id)arg1 readOnly:(_Bool)arg2;	// IMP=0x00000000001065d8
- (id)initWithDatabaseURL:(id)arg1;	// IMP=0x00000000001065c4

@end

