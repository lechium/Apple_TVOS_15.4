//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MusicLibrary/ML3DatabaseConnectionDelegate-Protocol.h>
#import <MusicLibrary/ML3DatabaseConnectionPoolDelegate-Protocol.h>
#import <MusicLibrary/NSSecureCoding-Protocol.h>
#import <MusicLibrary/_MSVAccountInformationProviding-Protocol.h>

@class ML3AccountCacheDatabase, ML3Container, ML3DatabaseConnectionPool, ML3DatabaseMetadata, ML3DatabasePrivacyContext, ML3LibraryNotificationManager, ML3MusicLibraryResourcesManager, NSArray, NSDate, NSLock, NSMutableDictionary, NSNumber, NSString;
@protocol ML3MusicLibraryDelegate, OS_dispatch_queue;

@interface ML3MusicLibrary : NSObject <ML3DatabaseConnectionDelegate, ML3DatabaseConnectionPoolDelegate, NSSecureCoding, _MSVAccountInformationProviding>
{
    NSString *_libraryUID;	// 8 = 0x8
    NSLock *_libraryUIDLock;	// 16 = 0x10
    NSString *_syncLibraryUID;	// 24 = 0x18
    ML3AccountCacheDatabase *_accountCacheDatabase;	// 32 = 0x20
    ML3DatabasePrivacyContext *_privacyContext;	// 40 = 0x28
    NSMutableDictionary *_optimizedLibraryEntityFilterPredicatesByEntityClass;	// 48 = 0x30
    NSMutableDictionary *_optimizedLibraryContainerFilterPredicatesByContainerClass;	// 56 = 0x38
    NSMutableDictionary *_optimizedLibraryPublicEntityFilterPredicatesByEntityClass;	// 64 = 0x40
    NSMutableDictionary *_optimizedLibraryPublicContainerFilterPredicatesByContainerClass;	// 72 = 0x48
    _Bool _isHomeSharingLibraryLoaded;	// 80 = 0x50
    _Bool _isHomeSharingLibrary;	// 81 = 0x51
    _Bool _usingSharedLibraryPath;	// 82 = 0x52
    _Bool _readOnly;	// 83 = 0x53
    ML3DatabaseConnectionPool *_connectionPool;	// 88 = 0x58
    NSString *_databasePath;	// 96 = 0x60
    struct iPhoneSortKeyBuilder *_sortKeyBuilder;	// 104 = 0x68
    ML3MusicLibraryResourcesManager *_resourcesManager;	// 112 = 0x70
    ML3LibraryNotificationManager *_notificationManager;	// 120 = 0x78
    NSObject<OS_dispatch_queue> *_serialQueue;	// 128 = 0x80
    NSString *_accountDSID;	// 136 = 0x88
    id <ML3MusicLibraryDelegate> _delegate;	// 144 = 0x90
    NSArray *_libraryEntityFilterPredicates;	// 152 = 0x98
    NSArray *_libraryContainerFilterPredicates;	// 160 = 0xa0
    NSArray *_libraryPublicEntityFilterPredicates;	// 168 = 0xa8
    NSArray *_libraryPublicContainerFilterPredicates;	// 176 = 0xb0
}

+ (id)distributedToLocalNotificationMapping;	// IMP=0x000000000005b7b4
+ (id)assistantSyncDataChangedNotificationName;	// IMP=0x000000000005b784
+ (id)widthLimitedSetValuesQueue;	// IMP=0x000000000005b754
+ (_Bool)updateTrackIntegrityOnConnection:(id)arg1;	// IMP=0x000000000005b738
+ (void)removeOrphanedTracks;	// IMP=0x000000000005b5c3
+ (void)enumerateSortMapTablesUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000005b4dd
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;	// IMP=0x000000000005af28
+ (id)sectionIndexTitles;	// IMP=0x000000000005ae55
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;	// IMP=0x000000000005ada7
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;	// IMP=0x000000000005acf9
+ (_Bool)supportsSecureCoding;	// IMP=0x000000000005acf1
+ (void)setGlobalPrivacyContextWithAuditToken:(CDStruct_6ad76789)arg1;	// IMP=0x000000000005ac8a
+ (_Bool)deviceSupportsMultipleLibraries;	// IMP=0x000000000005ac80
+ (void)enableAutomaticDatabaseValidation;	// IMP=0x000000000005ac73
+ (void)disableAutomaticDatabaseValidation;	// IMP=0x000000000005ac66
+ (void)disableSharedLibrary;	// IMP=0x000000000005ac59
+ (void)setSharedLibraryDatabasePath:(id)arg1;	// IMP=0x000000000005ac40
+ (id)sharedLibraryDatabasePath;	// IMP=0x000000000005ac27
+ (id)sharedLibrary;	// IMP=0x000000000005ac0e
+ (id)musicLibraryPerUserDSID;	// IMP=0x000000000005abde
+ (void)setAutoupdatingSharedLibraryPath:(id)arg1;	// IMP=0x000000000005ab34
+ (id)autoupdatingSharedLibraryPath;	// IMP=0x000000000005aa3d
+ (id)autoupdatingSharedLibrary;	// IMP=0x000000000005a95c
+ (id)allLibraries;	// IMP=0x000000000005a881
+ (id)registeredLibraries;	// IMP=0x000000000005a6f5
+ (id)musicLibraryForUserAccount:(id)arg1;	// IMP=0x000000000005a543
+ (id)_onGlobalQueue_shareableMusicLibraryWithResourcesManager:(id)arg1;	// IMP=0x000000000005a3e4
+ (id)globalSerialQueue;	// IMP=0x000000000005a3b4
+ (long long)artworkSourceTypeForTrackSource:(int)arg1;	// IMP=0x00000000000f6646
+ (id)artworkTokenForChapterWithItemPID:(long long)arg1 retrievalTime:(double)arg2;	// IMP=0x00000000000f6619
+ (id)artworkTokenForArtistHeroURL:(id)arg1;	// IMP=0x00000000000f6604
+ (id)artworkRelativePathFromToken:(id)arg1;	// IMP=0x00000000000f532f
+ (long long)devicePreferredImageFormat;	// IMP=0x00000000000f5316
+ (_Bool)deviceSupportsASTC;	// IMP=0x00000000000f52cc
+ (_Bool)dropIndexesUsingConnection:(id)arg1 tableNames:(const char *)arg2;	// IMP=0x00000000000f945f
+ (_Bool)orderingLanguageMatchesSystemUsingConnection:(id)arg1;	// IMP=0x00000000000f933b
+ (_Bool)userVersionMatchesSystemUsingConnection:(id)arg1;	// IMP=0x00000000000f920b
+ (int)userVersionUsingConnection:(id)arg1;	// IMP=0x00000000000f918c
+ (id)itemIndexSchemaSQL;	// IMP=0x00000000000f915c
+ (id)indexSchemaSQL;	// IMP=0x00000000000f90f9
+ (id)allTables;	// IMP=0x00000000000f90c9
+ (id)allTriggersSQL;	// IMP=0x00000000000f9036
+ (id)allPragmaSQL;	// IMP=0x00000000000f9029
+ (id)allSchemaSQL;	// IMP=0x00000000000f8ff9
+ (id)itemNewSchemaSQL;	// IMP=0x00000000000f8f77
+ (id)itemSchemaSQL;	// IMP=0x00000000000f8f2f
+ (id)sortMapNewSchemaSQL;	// IMP=0x00000000000f8f22
+ (id)sortMapSchemaSQL;	// IMP=0x00000000000f8f15
+ (id)storeLinkSchemaSQL;	// IMP=0x00000000000f8f08
+ (id)pathForBaseLocationPath:(long long)arg1;	// IMP=0x000000000010a904
+ (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 createParentFolderIfNecessary:(_Bool)arg4;	// IMP=0x000000000010a86c
+ (id)pathForResourceFileOrFolder:(int)arg1;	// IMP=0x000000000010a806
+ (id)libraryContainerRelativePath:(id)arg1;	// IMP=0x000000000010a77f
+ (id)libraryContainerPathByAppendingPathComponent:(id)arg1;	// IMP=0x000000000010a6f8
+ (id)libraryContainerPath;	// IMP=0x000000000010a6a1
+ (id)libraryPathForContainerPath:(id)arg1;	// IMP=0x000000000010a685
+ (id)allLibraryContainerPaths;	// IMP=0x000000000010a354
+ (id)mediaFolderPathByAppendingPathComponent:(id)arg1;	// IMP=0x000000000010a2cd
+ (id)mediaFolderPath;	// IMP=0x000000000010a27f
+ (id)unitTestableLibraryForTest:(id)arg1 basePath:(id)arg2 setupSQLFilenames:(id)arg3;	// IMP=0x000000000013c7ce
+ (id)databasePathForUnitTest:(id)arg1 withBasePath:(id)arg2;	// IMP=0x000000000013c5e4
+ (id)jaliscoGetSortedMediaKinds:(id)arg1;	// IMP=0x000000000013defc
- (void).cxx_destruct;	// IMP=0x000000000005251e
@property(nonatomic, getter=isReadOnly) _Bool readOnly; // @synthesize readOnly=_readOnly;
@property(nonatomic, getter=isUsingSharedLibraryPath) _Bool usingSharedLibraryPath; // @synthesize usingSharedLibraryPath=_usingSharedLibraryPath;
@property(retain, nonatomic) NSArray *libraryPublicContainerFilterPredicates; // @synthesize libraryPublicContainerFilterPredicates=_libraryPublicContainerFilterPredicates;
@property(retain, nonatomic) NSArray *libraryPublicEntityFilterPredicates; // @synthesize libraryPublicEntityFilterPredicates=_libraryPublicEntityFilterPredicates;
@property(retain, nonatomic) NSArray *libraryContainerFilterPredicates; // @synthesize libraryContainerFilterPredicates=_libraryContainerFilterPredicates;
@property(retain, nonatomic) NSArray *libraryEntityFilterPredicates; // @synthesize libraryEntityFilterPredicates=_libraryEntityFilterPredicates;
@property(nonatomic) __weak id <ML3MusicLibraryDelegate> delegate; // @synthesize delegate=_delegate;
@property(readonly, copy, nonatomic) NSString *accountDSID; // @synthesize accountDSID=_accountDSID;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(retain, nonatomic) ML3LibraryNotificationManager *notificationManager; // @synthesize notificationManager=_notificationManager;
- (void)_onQueue_updateDatabaseConnectionsProfilingLevel;	// IMP=0x000000000005241c
- (void)_postClientNotificationWithDistributedName:(id)arg1 localName:(id)arg2;	// IMP=0x0000000000052353
- (void)_tearDownNotificationManager;	// IMP=0x0000000000052204
- (void)_setupNotificationManager;	// IMP=0x000000000005214c
- (void)_closeAndLockCurrentDatabaseConnections;	// IMP=0x0000000000051f4d
- (_Bool)_shouldProcessAccountChanges;	// IMP=0x0000000000051ebc
- (void)_completeAccountChangeWithPath:(id)arg1;	// IMP=0x0000000000051d59
- (_Bool)_prepareForAccountChange:(id *)arg1;	// IMP=0x0000000000051aee
- (void)terminateForFailureToPerformDatabasePathChange;	// IMP=0x0000000000051a42
- (void)emergencyDisconnectWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x0000000000051886
- (void)performDatabasePathChange:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000051688
- (void)_libraryPathDidChangeNotification:(id)arg1;	// IMP=0x000000000005152f
- (void)_loggingSettingsDidChangeNotification:(id)arg1;	// IMP=0x00000000000514e1
- (void)_effectiveSettingsDidChangeNotification:(id)arg1;	// IMP=0x000000000005146d
- (_Bool)_clearAllRowsFromTables:(id)arg1;	// IMP=0x0000000000051249
- (void)_teardownMediaLibraryDatabaseConnection:(id)arg1;	// IMP=0x00000000000511d3
- (void)_configureMediaLibraryDatabaseConnection:(id)arg1;	// IMP=0x0000000000050fdf
- (_Bool)_canConfigureMediaLibraryDatabaseConnection:(id)arg1;	// IMP=0x0000000000050f4c
- (id)_newGeniusDBConnectionAtPath:(id)arg1;	// IMP=0x0000000000050eba
- (void)_autogenerateArtworkForRelativePath:(id)arg1 artworkType:(long long)arg2 mediaType:(unsigned int)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000050a0a
- (void)_convertOriginalArtworkToDevicePreferredFormatFromSourceURL:(id)arg1 toDestinationURL:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000050924
- (_Bool)_removeInvalidAvailableArtworkTokensUsingConnection:(id)arg1;	// IMP=0x0000000000050454
- (_Bool)_removeOrphanedArtworkAssetsUsingConnection:(id)arg1;	// IMP=0x000000000004f472
- (_Bool)_removeOrphanedArtworkMetadataUsingConnection:(id)arg1;	// IMP=0x000000000004efbc
- (_Bool)_removeOrphanedArtworkTokensUsingConnection:(id)arg1;	// IMP=0x000000000004edca
- (void)_deleteAllArtworkVariantsAtRelativePaths:(id)arg1;	// IMP=0x000000000004e91d
- (id)_allArtworkVariantDirectories;	// IMP=0x000000000004e5c9
- (_Bool)_determineAndUpdateBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(_Bool)arg5 usingConnection:(id)arg6;	// IMP=0x000000000004db15
- (_Bool)_updateBestArtworkTokensForArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 preserveExistingAvailableToken:(_Bool)arg4 usingConnection:(id)arg5;	// IMP=0x000000000004d6ee
- (_Bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4 usingConnection:(id)arg5;	// IMP=0x000000000004d4cb
- (_Bool)_insertArtworkRowWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 relativePath:(id)arg4;	// IMP=0x000000000004d396
- (void)_logDatabaseAccess;	// IMP=0x000000000004d34a
- (void)updateTrackIntegrity;	// IMP=0x000000000004d32c
- (void)deletePresignedValidity;	// IMP=0x000000000004d289
- (_Bool)verifyPresignedValidity;	// IMP=0x000000000004d281
- (_Bool)hasPresignedValidity;	// IMP=0x000000000004d211
- (void)migratePresignedValidity;	// IMP=0x000000000004d1b6
- (_Bool)deleteDatabaseProperty:(id)arg1;	// IMP=0x000000000004d0c8
- (_Bool)setValue:(id)arg1 forDatabaseProperty:(id)arg2;	// IMP=0x000000000004cf79
- (id)valueForDatabaseProperty:(id)arg1;	// IMP=0x000000000004ce5d
- (void)removeItemsWithFamilyAccountID:(unsigned long long)arg1 purchaserAccountID:(unsigned long long)arg2 downloaderAccountID:(unsigned long long)arg3;	// IMP=0x000000000004ca5f
- (void)removeOrphanedTracksOnlyInCaches:(_Bool)arg1;	// IMP=0x000000000004c14d
- (void)removeTombstonesForDeletedItems;	// IMP=0x000000000004c12f
- (_Bool)cleanupArtworkWithOptions:(unsigned long long)arg1 usingConnection:(id)arg2;	// IMP=0x000000000004c053
- (_Bool)cleanupArtworkWithOptions:(unsigned long long)arg1;	// IMP=0x000000000004bdf2
@property(readonly, nonatomic) _Bool hasUserPlaylistsContainingAppleMusicContent;
@property(readonly, nonatomic) _Bool hasAddedToLibraryAppleMusicContent;
@property(readonly, nonatomic) _Bool hasUserPlaylists;
- (_Bool)recordPlayEventForContainerPersistentID:(long long)arg1;	// IMP=0x000000000004bb80
- (_Bool)recordPlayEventForAlbumPersistentID:(long long)arg1;	// IMP=0x000000000004baf1
- (void)enumerateArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x000000000004ba47
- (void)retrieveBestArtworkTokensForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x000000000004b827
- (_Bool)isArtworkTokenAvailable:(id)arg1;	// IMP=0x000000000004b71c
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 preserveExistingAvailableToken:(_Bool)arg5 usingConnection:(id)arg6;	// IMP=0x000000000004b707
- (void)updateBestArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 retrievalTime:(double)arg4 usingConnection:(id)arg5;	// IMP=0x000000000004b6e2
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 usingConnection:(id)arg5;	// IMP=0x000000000004b6c0
- (void)removeArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4;	// IMP=0x000000000004b65c
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5 usingConnection:(id)arg6;	// IMP=0x000000000004b63b
- (void)importArtworkTokenForEntityPersistentID:(long long)arg1 entityType:(long long)arg2 artworkToken:(id)arg3 artworkType:(long long)arg4 sourceType:(long long)arg5;	// IMP=0x000000000004b582
- (void)migrateExistingArtworkToken:(id)arg1 newArtworkToken:(id)arg2 newSourceType:(long long)arg3;	// IMP=0x000000000004ad6a
- (_Bool)deleteArtworkToken:(id)arg1;	// IMP=0x000000000004ac58
- (_Bool)removeArtworkAssetWithToken:(id)arg1;	// IMP=0x000000000004a9be
- (_Bool)importOriginalArtworkFromImageData:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;	// IMP=0x000000000004a4c3
- (_Bool)importOriginalArtworkFromFileURL:(id)arg1 withArtworkToken:(id)arg2 artworkType:(long long)arg3 sourceType:(long long)arg4 mediaType:(unsigned int)arg5;	// IMP=0x000000000004a0b6
- (_Bool)importExistingOriginalArtworkWithArtworkToken:(id)arg1 artworkType:(long long)arg2 sourceType:(long long)arg3 mediaType:(unsigned int)arg4;	// IMP=0x0000000000049e49
- (void)autogenerateSupportedSizesForAllOriginalArtworkWithConnection:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000049bd9
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2;	// IMP=0x0000000000049bc7
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;	// IMP=0x0000000000049bb0
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1 urgency:(unsigned long long)arg2 respectSongMattress:(_Bool)arg3;	// IMP=0x0000000000049b9e
- (long long)autoFilledTracksTotalSizeWithUrgency:(unsigned long long)arg1;	// IMP=0x0000000000049b8c
@property(readonly, nonatomic) long long autoFilledTracksTotalSize;
- (void)removePlaylistsWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000498fa
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 usingConnection:(id)arg3 withCompletionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000004967f
- (void)removeTracksWithPersistentIDs:(id)arg1 fromSource:(int)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000049667
- (void)removeSource:(int)arg1 usingConnection:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000004964b
- (void)removeSource:(int)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000004962f
- (unsigned long long)countOfChangedPersistentIdsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3;	// IMP=0x0000000000049356
- (_Bool)persistentID:(long long)arg1 changedAfterRevision:(long long)arg2 revisionTrackingCode:(long long)arg3;	// IMP=0x00000000000492a6
- (void)getChangedPersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x000000000004910a
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x0000000000048e73
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 revisionTrackingCode:(unsigned long long)arg2 maximumRevisionType:(int)arg3 forMediaTypes:(id)arg4 inUsersLibrary:(_Bool)arg5 usingBlock:(CDUnknownBlockType)arg6;	// IMP=0x00000000000488a4
- (_Bool)updateSortMap;	// IMP=0x00000000000487fc
- (_Bool)requiresNonSchemaUpdatesOnConnection:(id)arg1;	// IMP=0x00000000000484a3
- (_Bool)requiresSchemaOnlyUpdatesOnConnection:(id)arg1;	// IMP=0x00000000000481b6
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;	// IMP=0x0000000000047f91
- (void)savePlaylists;	// IMP=0x0000000000047f7b
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;	// IMP=0x0000000000047a75
- (void)saveTrackMetadata;	// IMP=0x0000000000047a5f
- (void)notifyKeepLocalStateDidChange;	// IMP=0x0000000000047a3f
- (void)notifyLibraryImportDidFinish;	// IMP=0x0000000000047a1f
- (void)notifyCloudLibraryAvailabilityDidChange;	// IMP=0x00000000000479ff
- (void)notifySectionsDidChange;	// IMP=0x00000000000479df
- (void)notifyDisplayValuesPropertyDidChange;	// IMP=0x00000000000479bf
- (void)notifyInvisiblePropertyDidChange;	// IMP=0x000000000004799f
- (void)notifyNonContentsPropertyDidChange;	// IMP=0x000000000004797f
- (void)notifyEntitiesAddedOrRemoved;	// IMP=0x000000000004795f
- (void)notifyAssistantContentsDidChange;	// IMP=0x00000000000478bc
- (void)notifyContentsDidChange;	// IMP=0x000000000004789c
- (unsigned long long)unknownSectionIndex;	// IMP=0x00000000000477ff
- (unsigned long long)sectionIndexTitleIndexForSectionIndex:(unsigned long long)arg1;	// IMP=0x0000000000047634
- (id)localizedSectionHeaderForSectionIndex:(unsigned long long)arg1;	// IMP=0x0000000000047495
- (id)groupingKeysForStrings:(id)arg1;	// IMP=0x000000000004734b
- (id)groupingKeyForString:(id)arg1;	// IMP=0x0000000000047200
- (void)accessSortKeyBuilder:(CDUnknownBlockType)arg1;	// IMP=0x00000000000471ac
- (id)accountCacheDatabase;	// IMP=0x0000000000047153
- (_Bool)clearAllCloudKVSData;	// IMP=0x000000000004713a
- (_Bool)clearAllGeniusData;	// IMP=0x0000000000046ff0
- (_Bool)emptyAllTables;	// IMP=0x0000000000046efc
- (_Bool)createIndexes;	// IMP=0x0000000000046e54
- (int)currentDatabaseVersion;	// IMP=0x0000000000046d9a
- (_Bool)validateDatabase;	// IMP=0x0000000000046d40
- (_Bool)automaticDatabaseValidationDisabled;	// IMP=0x0000000000046d34
- (_Bool)isCurrentThreadInTransaction;	// IMP=0x0000000000046cf0
- (void)performAsyncDatabaseWriteTransactionWithBlock:(CDUnknownBlockType)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x0000000000046c01
- (void)performReadOnlyDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000046b2c
- (void)performDatabaseTransactionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x0000000000046a5c
- (void)databaseConnectionAllowingWrites:(_Bool)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000469a0
- (void)reconnectToDatabase;	// IMP=0x0000000000046908
- (void)checkInDatabaseConnection:(id)arg1;	// IMP=0x0000000000046892
- (id)checkoutWriterConnection;	// IMP=0x0000000000046830
- (id)checkoutReaderConnection;	// IMP=0x00000000000467ce
- (void)connectionPool:(id)arg1 createdNewConnection:(id)arg2;	// IMP=0x00000000000467b6
- (void)connectionDidAccessDatabase:(id)arg1;	// IMP=0x000000000004671c
- (void)connection:(id)arg1 didEndDatabaseTransactionAndCommit:(_Bool)arg2;	// IMP=0x0000000000046693
- (void)connectionDidBeginDatabaseTransaction:(id)arg1;	// IMP=0x0000000000046625
- (void)connectionWillCloseDatabase:(id)arg1;	// IMP=0x00000000000465d8
- (void)connectionDidOpenDatabase:(id)arg1;	// IMP=0x000000000004658b
- (void)connectionWillOpenDatabase:(id)arg1;	// IMP=0x000000000004644f
- (void)setClientIdentity:(id)arg1;	// IMP=0x00000000000463d3
@property(readonly, nonatomic) ML3DatabasePrivacyContext *privacyContext;
- (id)libraryEntityFilterPredicatesForContainerClass:(Class)arg1;	// IMP=0x00000000000462cb
- (id)libraryEntityFilterPredicatesForEntityClass:(Class)arg1;	// IMP=0x000000000004620b
@property(readonly, nonatomic) _Bool mediaRestrictionEnabled;
@property(readonly, nonatomic) NSArray *preferredSubtitleTracks;
@property(readonly, nonatomic) NSArray *preferredAudioTracks;
@property(readonly, nonatomic) NSArray *localizedSectionIndexTitles;
@property(readonly, nonatomic) ML3DatabaseMetadata *databaseInfo;
@property(readonly, nonatomic) ML3Container *currentDevicePhotosMemoriesPlaylist;
@property(readonly, nonatomic) ML3Container *currentDevicePlaybackHistoryPlaylist;
@property(readonly, nonatomic) ML3Container *currentDevicePurchasesPlaylist;
@property(readonly, nonatomic, getter=isLibraryEmpty) _Bool libraryEmpty;
- (void)setLibraryUID:(id)arg1;	// IMP=0x000000000004565b
@property(readonly, nonatomic) NSString *libraryUID;
@property(nonatomic) NSString *syncLibraryID;
@property(nonatomic) long long syncGenerationID;
@property(readonly, nonatomic) long long currentContentRevision;
@property(readonly, nonatomic) long long currentRevision;
@property(readonly, nonatomic) _Bool downloadOnAddToLibrary;
@property(nonatomic) _Bool isHomeSharingLibrary;
@property(readonly, nonatomic) struct iPhoneSortKeyBuilder *sortKeyBuilder; // @synthesize sortKeyBuilder=_sortKeyBuilder;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(readonly, nonatomic) ML3DatabaseConnectionPool *connectionPool; // @synthesize connectionPool=_connectionPool;
@property(readonly, nonatomic) ML3MusicLibraryResourcesManager *resourcesManager; // @synthesize resourcesManager=_resourcesManager;
- (void)dealloc;	// IMP=0x00000000000448df
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000000044835
- (id)initWithCoder:(id)arg1;	// IMP=0x00000000000446a3
- (id)initWithClientIdentity:(id)arg1 path:(id)arg2 readOnly:(_Bool)arg3 populateUnitTestTablesBlock:(CDUnknownBlockType)arg4;	// IMP=0x000000000004438b
- (id)initWithClientIdentity:(id)arg1 path:(id)arg2;	// IMP=0x0000000000044373
- (id)initWithPath:(id)arg1 readOnly:(_Bool)arg2 populateUnitTestTablesBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000000000442eb
- (id)initWithPath:(id)arg1;	// IMP=0x00000000000442d4
- (id)initWithResourcesManager:(id)arg1;	// IMP=0x00000000000441cb
- (id)initWithClientIdentity:(id)arg1 forUserAccount:(id)arg2;	// IMP=0x0000000000043fd5
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;	// IMP=0x00000000000765d3
- (id)artistGroupingKeyForArtistName:(id)arg1 seriesName:(id)arg2;	// IMP=0x0000000000076544
- (_Bool)repairAlbumArtistRelationshipsWithConnection:(id)arg1;	// IMP=0x000000000007f6f0
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(_Bool)arg5;	// IMP=0x000000000007f417
- (_Bool)_validateDatabaseUsingConnection:(id)arg1 error:(id *)arg2;	// IMP=0x000000000007fc3c
- (_Bool)coerceValidDatabaseWithError:(id *)arg1;	// IMP=0x000000000007fb71
- (_Bool)_coalesceMismatchedCollectionClass:(Class)arg1 usingConnection:(id)arg2;	// IMP=0x000000000009087c
- (_Bool)coalesceMismatchedCollectionsUsingConnection:(id)arg1;	// IMP=0x0000000000090619
- (id)_systemUnicodeVersionData;	// IMP=0x0000000000090546
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;	// IMP=0x000000000008ff03
- (id)insertStringsIntoSortMap:(id)arg1;	// IMP=0x000000000008feef
- (id)insertStringsIntoSortMap:(id)arg1 didReSortMap:(_Bool *)arg2;	// IMP=0x000000000008fdc9
- (CDStruct_912cb5d2)nameOrderForString:(id)arg1;	// IMP=0x000000000008fc92
- (_Bool)validateSortMapUnicodeVersionOnConnection:(id)arg1;	// IMP=0x000000000008fb7c
- (_Bool)inTransactionUpdateSearchMapOnConnection:(id)arg1;	// IMP=0x000000000008fa7d
- (_Bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceRebuild:(_Bool)arg2 forceUpdateOriginals:(_Bool)arg3;	// IMP=0x000000000008e4a8
- (_Bool)inTransactionUpdateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;	// IMP=0x000000000008e491
- (_Bool)updateSortMapOnConnection:(id)arg1 forceUpdateOriginals:(_Bool)arg2;	// IMP=0x000000000008e398
- (_Bool)updateSortMapOnConnection:(id)arg1;	// IMP=0x000000000008e384
- (id)genreForGenre:(id)arg1;	// IMP=0x00000000000a022a
- (id)composerForComposerName:(id)arg1;	// IMP=0x00000000000bc20b
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;	// IMP=0x00000000000bd071
- (void)_updateSystemPlaylist:(id)arg1 withName:(id)arg2 usingConnection:(id)arg3;	// IMP=0x00000000000cb909
- (void)updateOrderingLanguagesForCurrentLanguage;	// IMP=0x00000000000cb8a4
- (_Bool)updateSystemPlaylistNamesForCurrentLanguageUsingConnection:(id)arg1;	// IMP=0x00000000000cb5bf
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeCloudAssets:(_Bool)arg3 includeAutoFilledTracks:(_Bool)arg4;	// IMP=0x00000000000f2e38
- (long long)_clearPurgeableTracksOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(_Bool)arg3;	// IMP=0x00000000000f2e1d
- (long long)_clearOrphanedAssetsOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;	// IMP=0x00000000000f2bfa
- (long long)_clearAllCloudAssets;	// IMP=0x00000000000f294c
- (long long)_clearDatabaseFileFreeSpace;	// IMP=0x00000000000f2870
- (id)_notInKeepLocalCollectionPredicate;	// IMP=0x00000000000f2840
- (id)_allKeepLocalPlaylistTracks;	// IMP=0x00000000000f2736
- (id)_purgeableTrackPredicateWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2 includeCloudAssets:(_Bool)arg3;	// IMP=0x00000000000f207f
- (void)_enumeratePurgeableTracksForUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2 includeCloudAssets:(_Bool)arg3 usingBlock:(CDUnknownBlockType)arg4;	// IMP=0x00000000000f1dcb
- (long long)_purgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2;	// IMP=0x00000000000f1c1a
- (void)_enumeratePurgeablePodcastEpisodesForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f1c14
- (void)_enumeratePurgeableAlbumTracksForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f1a28
- (void)_enumeratePurgeableStreamedTracksForUrgency:(unsigned long long)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f181f
- (unsigned long long)_totalSizeForAllNonCacheTracks;	// IMP=0x00000000000f1754
- (id)_purgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f16be
- (id)_nonPurgeableAlbumsQuerySQLWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f16a2
- (id)_purgeableItemsPredicateSQLWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f1695
- (unsigned long long)_managedClearPurgeableTracksOfAmount:(unsigned long long)arg1 urgency:(unsigned long long)arg2;	// IMP=0x00000000000f11c3
- (unsigned long long)_managedPurgeableTracksTotalSizeWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f0ef9
- (unsigned long long)_clearPurgeableArtworkOfAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;	// IMP=0x00000000000f0dde
- (unsigned long long)_purgeableArtworkTotalSizeWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f0d24
- (unsigned long long)_purgeAllArtwork;	// IMP=0x00000000000f0bdb
- (_Bool)_shouldPurgeAllArtworkAtUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f0ae8
- (unsigned long long)_artworkTotalSize;	// IMP=0x00000000000f09f4
- (long long)_cloudAssetsTotalSize;	// IMP=0x00000000000f0855
- (long long)_databaseFileFreeSpace;	// IMP=0x00000000000f07c8
- (_Bool)_shouldPurgeKeepLocalTracksForUrgency:(unsigned long long)arg1;	// IMP=0x00000000000f0786
- (long long)minimumPurgeableStorage;	// IMP=0x00000000000f0719
- (void)setMinimumPurgeableStorage:(long long)arg1;	// IMP=0x00000000000f06d5
- (_Bool)shouldOptimizeStorage;	// IMP=0x00000000000f069e
- (void)setShouldOptimizeStorage:(_Bool)arg1;	// IMP=0x00000000000f066f
- (_Bool)autoFilledTracksArePurgeable;	// IMP=0x00000000000f0638
- (void)setAutoFilledTracksArePurgeable:(_Bool)arg1;	// IMP=0x00000000000f0609
- (long long)clearAllRemovedTracks;	// IMP=0x00000000000f057e
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2 includeAutoFilledTracks:(_Bool)arg3;	// IMP=0x00000000000f0191
- (long long)clearPurgeableStorageAmount:(long long)arg1 withUrgency:(unsigned long long)arg2;	// IMP=0x00000000000f014b
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1 includeAutoFilledTracks:(_Bool)arg2;	// IMP=0x00000000000efe00
- (long long)purgeableStorageSizeWithUrgency:(unsigned long long)arg1;	// IMP=0x00000000000efdc0
- (_Bool)isArtworkFetchableForPersistentID:(long long)arg1 entityType:(long long)arg2 artworkType:(long long)arg3 artworkSourceType:(long long)arg4;	// IMP=0x00000000000f50e4
- (_Bool)hasOriginalArtworkForRelativePath:(id)arg1;	// IMP=0x00000000000f5027
- (id)artworkCacheDirectoryForEffect:(id)arg1;	// IMP=0x00000000000f4f45
- (id)artworkCacheDirectoryForSize:(struct CGSize)arg1;	// IMP=0x00000000000f4e4d
@property(readonly, copy, nonatomic) NSString *rootArtworkCacheDirectory;
@property(readonly, copy, nonatomic) NSString *originalArtworkDirectory;
@property(readonly, copy, nonatomic) NSString *artworkDirectory;
- (void)updateMusicLibraryByApplyingUbiquitousBookmarkMetadataToTrackWithPersistentID:(long long)arg1;	// IMP=0x00000000000fa328
- (void)updateUbiquitousDatabaseByRemovingUbiquitousMetadataFromTrackWithPersistentID:(long long)arg1;	// IMP=0x00000000000fa20d
- (id)uppService;	// IMP=0x00000000000fa102
@property(readonly, nonatomic) _Bool supportsUbiquitousPlaybackPositions;
- (id)pathForBaseLocationPath:(long long)arg1;	// IMP=0x000000000010a220
- (id)pathForResourceFileOrFolder:(int)arg1 basePath:(id)arg2 relativeToBase:(_Bool)arg3 createParentFolderIfNecessary:(_Bool)arg4;	// IMP=0x000000000010a18c
- (id)pathForResourceFileOrFolder:(int)arg1;	// IMP=0x000000000010a12d
- (id)libraryContainerRelativePath:(id)arg1;	// IMP=0x000000000010a0aa
- (id)libraryContainerPathByAppendingPathComponent:(id)arg1;	// IMP=0x000000000010a027
- (id)libraryContainerPath;	// IMP=0x0000000000109fd7
- (void)clearSagaCloudAddToPlaylistBehavior;	// IMP=0x000000000012616b
- (void)clearSagaPrefersToMergeWithCloudLibrary;	// IMP=0x0000000000126152
- (void)clearSagaCloudLibraryTroveID;	// IMP=0x0000000000126139
- (void)clearSagaCloudLibraryCUID;	// IMP=0x0000000000126120
- (void)clearSagaLastPlaylistPlayDataUploadDate;	// IMP=0x0000000000126107
- (void)clearSagaLastItemPlayDataUploadDate;	// IMP=0x00000000001260ee
- (void)clearSagaLastGeniusUpdateDate;	// IMP=0x00000000001260d5
- (void)clearSagaCloudAccountID;	// IMP=0x00000000001260bc
@property(nonatomic) long long preferredVideoQuality;
@property(copy, nonatomic) NSDate *sagaLastSubscribedContainersUpdateTime;
@property(copy, nonatomic) NSDate *sagaLastLibraryUpdateTime;
@property(nonatomic) long long sagaOnDiskDatabaseRevision;
@property(copy, nonatomic) NSString *storefrontIdentifier;
@property(nonatomic) _Bool sagaPrefersToMergeWithCloudLibrary;
@property(nonatomic) _Bool sagaNeedsFullUpdateAfterNextUpdate;
@property(nonatomic) long long sagaCloudAddToPlaylistBehavior;
@property(nonatomic) long long sagaDatabaseUserVersion;
@property(copy, nonatomic) NSString *sagaCloudLibraryTroveID;
@property(copy, nonatomic) NSString *sagaCloudLibraryCUID;
@property(copy, nonatomic) NSDate *sagaLastPlaylistPlayDataUploadDate;
@property(copy, nonatomic) NSDate *sagaLastItemPlayDataUploadDate;
@property(copy, nonatomic) NSDate *sagaLastGeniusUpdateDate;
@property(copy, nonatomic) NSNumber *sagaLastKnownActiveLockerAccountDSID;
@property(copy, nonatomic) NSNumber *sagaAccountID;
- (long long)syncIdFromMultiverseId:(id)arg1;	// IMP=0x000000000012ed2c
- (_Bool)prepareUnitTestDatabaseWithSQLFromContentsOfFile:(id)arg1 error:(id *)arg2;	// IMP=0x000000000013bd3d
- (void)updateJaliscoExcludedMediaKindsWith:(id)arg1 excludingMediaKindsInSet:(_Bool)arg2;	// IMP=0x000000000013dce7
- (void)sortJaliscoLastSupportedMediaKinds;	// IMP=0x000000000013dbd9
- (void)clearJaliscoLastExcludedMediaKinds;	// IMP=0x000000000013dbc0
- (void)clearJaliscoLastGeniusUpdateDate;	// IMP=0x000000000013dba7
- (void)clearJaliscoAccountID;	// IMP=0x000000000013db8e
@property(copy, nonatomic) NSDate *jaliscoLastLibraryUpdateTime;
@property(nonatomic) long long jaliscoOnDiskDatabaseRevision;
@property(nonatomic) _Bool jaliscoNeedsUpdateForTokens;
@property(nonatomic) _Bool jaliscoIsMusicGeniusUserEnabled;
@property(nonatomic) _Bool jaliscoHasCloudGeniusData;
@property(readonly, nonatomic) NSArray *jaliscoLastExcludedMediaKinds;
@property(copy, nonatomic) NSString *jaliscoLastSupportedMediaKinds;
@property(copy, nonatomic) NSDate *jaliscoLastGeniusUpdateDate;
@property(copy, nonatomic) NSNumber *jaliscoAccountID;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

