//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class ML3DatabaseConnectionPool, ML3DatabasePrivacyContext, ML3DatabaseStatementCache, NSMutableArray, NSString, NSUUID;
@protocol ML3DatabaseConnectionDelegate;

@interface ML3DatabaseConnection : NSObject
{
    struct sqlite3 *_sqlitedb;	// 8 = 0x8
    _Bool _isOpen;	// 16 = 0x10
    ML3DatabaseStatementCache *_statementCache;	// 24 = 0x18
    unsigned long long _statementsSinceLastCheckpoint;	// 32 = 0x20
    unsigned long long _transactionLevel;	// 40 = 0x28
    _Bool _nestedTransactionWantsToRollback;	// 48 = 0x30
    NSMutableArray *_enqueuedTransactionCommitBlocks;	// 56 = 0x38
    ML3DatabaseConnectionPool *_owningPool;	// 64 = 0x40
    NSMutableArray *_registeredFunctions;	// 72 = 0x48
    NSMutableArray *_registeredModules;	// 80 = 0x50
    const void *_iTunesExtensions;	// 88 = 0x58
    long long _profilingLevel;	// 96 = 0x60
    NSString *_lastTracedStatement;	// 104 = 0x68
    int _willDeleteDatabaseNotifyToken;	// 112 = 0x70
    _Bool _isHandlingIOError;	// 116 = 0x74
    _Bool _alreadyAttemptedCorruptionRecovery;	// 117 = 0x75
    struct os_unfair_lock_s _lock;	// 120 = 0x78
    _Bool _isReadOnly;	// 124 = 0x7c
    _Bool _automaticCheckpointingEnabled;	// 125 = 0x7d
    _Bool _logQueryPlans;	// 126 = 0x7e
    id <ML3DatabaseConnectionDelegate> _connectionDelegate;	// 128 = 0x80
    NSString *_databasePath;	// 136 = 0x88
    ML3DatabasePrivacyContext *_privacyContext;	// 144 = 0x90
    unsigned long long _journalingMode;	// 152 = 0x98
    unsigned long long _protectionLevel;	// 160 = 0xa0
    NSUUID *_currentTransactionID;	// 168 = 0xa8
    NSUUID *_uniqueIdentifier;	// 176 = 0xb0
    unsigned long long _checkpointStatementThreshold;	// 184 = 0xb8
}

- (void).cxx_destruct;	// IMP=0x00000000001920d3
@property(nonatomic) _Bool logQueryPlans; // @synthesize logQueryPlans=_logQueryPlans;
@property(nonatomic) unsigned long long checkpointStatementThreshold; // @synthesize checkpointStatementThreshold=_checkpointStatementThreshold;
@property(nonatomic) _Bool automaticCheckpointingEnabled; // @synthesize automaticCheckpointingEnabled=_automaticCheckpointingEnabled;
@property(readonly, nonatomic) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(readonly, nonatomic) NSUUID *currentTransactionID; // @synthesize currentTransactionID=_currentTransactionID;
@property(nonatomic) unsigned long long protectionLevel; // @synthesize protectionLevel=_protectionLevel;
@property(nonatomic) unsigned long long journalingMode; // @synthesize journalingMode=_journalingMode;
@property(nonatomic, setter=setReadOnly:) _Bool isReadOnly; // @synthesize isReadOnly=_isReadOnly;
@property(retain, nonatomic) ML3DatabasePrivacyContext *privacyContext; // @synthesize privacyContext=_privacyContext;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(nonatomic) __weak id <ML3DatabaseConnectionDelegate> connectionDelegate; // @synthesize connectionDelegate=_connectionDelegate;
- (void)_handleDatabaseProfileStatement:(const char *)arg1 executionTimeNS:(unsigned long long)arg2;	// IMP=0x0000000000191e18
- (void)_handleDatabaseTraceStatement:(const char *)arg1;	// IMP=0x0000000000191d7b
- (_Bool)_handleZombieSQLiteConnection:(struct sqlite3 *)arg1;	// IMP=0x0000000000191a90
- (_Bool)_handleConnectionErrorWhileOpening:(int)arg1;	// IMP=0x0000000000191a6e
- (void)_executeTransactionCommitBlocks:(_Bool)arg1;	// IMP=0x00000000001919ac
- (void)_resetUnfinalizedStatements;	// IMP=0x000000000019187b
- (void)_finalizeAllStatements;	// IMP=0x0000000000191865
- (_Bool)_isDeviceMediaLibraryDatabase;	// IMP=0x00000000001917a9
- (void)_updateProfilingLevel;	// IMP=0x0000000000191726
- (void)_logDatabaseFileDebugInformation;	// IMP=0x00000000001913d4
- (void)_logCurrentError;	// IMP=0x00000000001912ef
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statement:(id)arg2;	// IMP=0x00000000001911ba
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statementSQL:(id)arg2;	// IMP=0x0000000000191085
- (void)_createDatabaseFileIfNonexistent;	// IMP=0x0000000000190fc7
- (void)_createDatabaseDirectoryIfNonexistent;	// IMP=0x0000000000190ed0
- (_Bool)_databaseFilesAreWritable;	// IMP=0x0000000000190d47
- (_Bool)_databaseFileExists;	// IMP=0x0000000000190ca0
- (id)_registeredModuleNamed:(id)arg1;	// IMP=0x0000000000190adb
- (_Bool)_validatePreparedStatement:(id)arg1 error:(id *)arg2;	// IMP=0x000000000019088f
- (id)_shortDescription;	// IMP=0x0000000000190851
- (_Bool)_internalEndTransactionAndCommit:(_Bool)arg1;	// IMP=0x00000000001906b1
- (_Bool)_internalBeginTransactionWithBehaviorType:(unsigned long long)arg1;	// IMP=0x0000000000190509
- (_Bool)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;	// IMP=0x00000000001902a2
- (id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;	// IMP=0x00000000001900b1
- (void)_internalLogQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;	// IMP=0x000000000018fefe
- (_Bool)_executeStatement:(id)arg1 withError:(id *)arg2;	// IMP=0x000000000018fa7a
- (id)_prepareStatement:(id)arg1 error:(id *)arg2;	// IMP=0x000000000018f4e6
- (void)_setAlreadyAttemptedCorruptionRecovery:(_Bool)arg1;	// IMP=0x000000000018f4dd
- (_Bool)_alreadyAttemptedCorruptionRecovery;	// IMP=0x000000000018f4d4
- (void)setTransactionLevel:(unsigned long long)arg1;	// IMP=0x000000000018f4a2
- (unsigned long long)transactionLevel;	// IMP=0x000000000018f478
- (int)_distrustQueriesDuringBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000018f205
- (id)_databaseFilePaths;	// IMP=0x000000000018f010
- (_Bool)_handleDiskIOError;	// IMP=0x000000000018e7fe
- (_Bool)_handleBusyLockWithNumberOfRetries:(int)arg1;	// IMP=0x000000000018e7c8
- (void)_handleDatabaseCorruption;	// IMP=0x000000000018e575
- (void)_ensureConnectionIsOpen;	// IMP=0x000000000018e4df
- (struct sqlite3 *)_sqliteHandle;	// IMP=0x000000000018e4d5
- (void)_setOwningPool:(id)arg1;	// IMP=0x000000000018e4c4
- (id)_owningPool;	// IMP=0x000000000018e4ae
- (int)checkpointDatabase;	// IMP=0x000000000018e3b7
- (_Bool)deleteDatabase;	// IMP=0x000000000018e350
- (id)sqliteError;	// IMP=0x000000000018e0a3
- (long long)lastInsertionRowID;	// IMP=0x000000000018e095
- (id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(_Bool)arg4;	// IMP=0x000000000018de60
- (_Bool)removeModuleNamed:(id)arg1;	// IMP=0x000000000018dc5e
- (_Bool)registerModuleName:(id)arg1 moduleMethods:(struct sqlite3_module *)arg2;	// IMP=0x000000000018dad6
- (_Bool)registerModule:(id)arg1;	// IMP=0x000000000018d89c
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3 userData:(void *)arg4;	// IMP=0x000000000018d7c6
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3;	// IMP=0x000000000018d7b1
- (_Bool)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x000000000018d6e7
- (void)enqueueBlockForTransactionCommit:(CDUnknownBlockType)arg1;	// IMP=0x000000000018d6b1
- (_Bool)performTransactionWithBlock:(CDUnknownBlockType)arg1 usingBehaviorType:(unsigned long long)arg2;	// IMP=0x000000000018d648
- (_Bool)performTransactionWithBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000018d634
- (_Bool)popToRootTransactionAndCommit:(_Bool)arg1;	// IMP=0x000000000018d5ab
- (_Bool)popTransactionAndCommit:(_Bool)arg1;	// IMP=0x000000000018d402
- (_Bool)pushTransactionUsingBehaviorType:(unsigned long long)arg1;	// IMP=0x000000000018d2fc
- (_Bool)pushTransaction;	// IMP=0x000000000018d2e8
@property(readonly, nonatomic) _Bool transactionMarkedForRollBack;
@property(readonly, nonatomic) _Bool isInTransaction;
- (_Bool)executeUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;	// IMP=0x000000000018d1a5
- (_Bool)executeUpdate:(id)arg1;	// IMP=0x000000000018d18e
- (_Bool)tableExists:(id)arg1;	// IMP=0x000000000018d107
- (id)executeQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;	// IMP=0x000000000018d0f5
- (id)executeQuery:(id)arg1 withParameters:(id)arg2;	// IMP=0x000000000018d0dd
- (id)executeQuery:(id)arg1;	// IMP=0x000000000018d0c3
- (_Bool)databasePathExists;	// IMP=0x000000000018d053
- (void)flush;	// IMP=0x000000000018d023
- (_Bool)_closeAndFlushTransactionState:(_Bool)arg1;	// IMP=0x000000000018ce80
- (_Bool)close;	// IMP=0x000000000018ce69
- (_Bool)_openWithFlags:(int)arg1;	// IMP=0x000000000018c446
- (_Bool)open;	// IMP=0x000000000018c428
- (void)setCurrentTransactionID:(id)arg1;	// IMP=0x000000000018c414
@property(nonatomic) long long profilingLevel;
@property(readonly, nonatomic) _Bool isOpen;
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000018c2cc
- (id)description;	// IMP=0x000000000018c1d9
- (void)dealloc;	// IMP=0x000000000018c187
- (id)initWithDatabasePath:(id)arg1;	// IMP=0x000000000018c017
- (id)init;	// IMP=0x000000000018bfa5
- (_Bool)_alterTableNamed:(id)arg1 withNewColumnDefinitions:(id)arg2 newColumnNames:(id)arg3 oldColumnNames:(id)arg4;	// IMP=0x000000000009ee06
- (void)_enumerateTableColumnNamesAndDefinitionsFromTable:(id)arg1 usingBlock:(CDUnknownBlockType)arg2;	// IMP=0x000000000009e8e8
- (_Bool)schemaDeleteColumns:(id)arg1 inTable:(id)arg2;	// IMP=0x000000000009e64e
- (_Bool)schemaDeleteColumn:(id)arg1 inTable:(id)arg2;	// IMP=0x000000000009e514
- (_Bool)schemaRenameColumn:(id)arg1 inTable:(id)arg2 toNewColumnName:(id)arg3;	// IMP=0x000000000009e200
- (_Bool)schemaInsertColumnDefinitions:(id)arg1 intoTable:(id)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x000000000009df8b
- (_Bool)schemaInsertColumnDefinition:(id)arg1 intoTable:(id)arg2 atIndex:(unsigned long long)arg3;	// IMP=0x000000000009deb7
- (_Bool)schemaAddColumnDefinition:(id)arg1 toTable:(id)arg2;	// IMP=0x000000000009dc66

@end

