//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class SCRCStackQueue;

@interface SCRCThread : NSObject
{
    SCRCStackQueue *_queue;	// 8 = 0x8
    SCRCStackQueue *_waitingQueue;	// 16 = 0x10
    id _queueLock;	// 24 = 0x18
    struct __CFRunLoopSource *_source;	// 32 = 0x20
    struct __CFRunLoop *_runLoop;	// 40 = 0x28
    _Bool _isInvalid;	// 48 = 0x30
    _Bool _isRegistered;	// 49 = 0x31
    _Bool _isTimerSet;	// 50 = 0x32
    _Bool _shouldStop;	// 51 = 0x33
    _Bool _isWaitingForStoppingThread;	// 52 = 0x34
    id __key;	// 56 = 0x38
    double _lastStartTime;	// 64 = 0x40
}

+ (id)threadTaskCacheKey;	// IMP=0x0000000000027b5b
+ (id)currentThreadTaskCache;	// IMP=0x0000000000027ad3
+ (void)postStopNotification;	// IMP=0x0000000000026764
+ (void)invalidateForKey:(id)arg1;	// IMP=0x0000000000026688
+ (double)lastStartTimeForKey:(id)arg1;	// IMP=0x00000000000265cf
+ (double)_performSelector:(SEL)arg1 withThreadKey:(id)arg2 onTarget:(id)arg3 waitTime:(double)arg4 cancelMask:(unsigned int)arg5 count:(unsigned int)arg6 firstObject:(id)arg7 moreObjects:(struct __va_list_tag [1])arg8;	// IMP=0x00000000000261a5
+ (long long)defaultThreadPriority;	// IMP=0x000000000002614b
+ (void)setDefaultThreadPriority:(long long)arg1;	// IMP=0x000000000002613e
+ (long long)activeThreadCount;	// IMP=0x00000000000260f2
+ (id)activity;	// IMP=0x00000000000260ea
+ (void)initialize;	// IMP=0x0000000000025f93
+ (_Bool)_removeThreadFromRegisteredThreads:(id)arg1 withThreadKey:(id)arg2;	// IMP=0x0000000000027c56
+ (_Bool)_addThreadToRegisteredThreads:(id)arg1 withThreadKey:(id)arg2;	// IMP=0x0000000000027bbb
- (void).cxx_destruct;	// IMP=0x0000000000027b7d
@property(nonatomic, setter=_setLastStartTime:) double lastStartTime; // @synthesize lastStartTime=_lastStartTime;
@property(retain, nonatomic, setter=_setKey:) id _key; // @synthesize _key=__key;
- (void)_processQueue;	// IMP=0x00000000000276f6
- (void)_processQueueFromTimer;	// IMP=0x00000000000276e0
- (void)_enqueueTask:(id)arg1 cancelMask:(unsigned int)arg2 lastStartTime:(double *)arg3;	// IMP=0x00000000000276bc
- (void)_enqueueImmediateTask:(id)arg1 cancelMask:(unsigned int)arg2 lastStartTime:(double *)arg3;	// IMP=0x0000000000027512
- (void)_enqueueWaitingTask:(id)arg1 cancelMask:(unsigned int)arg2 lastStartTime:(double *)arg3;	// IMP=0x00000000000272f3
- (_Bool)_isWaitingForStoppingThread;	// IMP=0x0000000000027291
- (void)_setIsWaitingForStoppingThread:(_Bool)arg1;	// IMP=0x000000000002709b
- (_Bool)isInvalid;	// IMP=0x0000000000027092
- (_Bool)_shouldStop;	// IMP=0x0000000000027089
- (void)setIsInvalid:(_Bool)arg1;	// IMP=0x0000000000026fc7
- (double)performSelector:(SEL)arg1 onTarget:(id)arg2 cancelMask:(unsigned int)arg3 count:(unsigned int)arg4 objects:(id)arg5;	// IMP=0x0000000000026f2a
- (double)performSelector:(SEL)arg1 onTarget:(id)arg2 count:(unsigned int)arg3 objects:(id)arg4;	// IMP=0x0000000000026e88
- (double)_performSelector:(SEL)arg1 onTarget:(id)arg2 cancelMask:(unsigned int)arg3 count:(unsigned int)arg4 firstObject:(id)arg5 moreObjects:(struct __va_list_tag [1])arg6;	// IMP=0x0000000000026dfd
- (void)dealloc;	// IMP=0x0000000000026d17
- (void)_threadDidStop;	// IMP=0x0000000000026c3f
- (_Bool)_debug_currentlyRunningOnThisThread;	// IMP=0x0000000000026c23
- (void)_runThread:(id)arg1;	// IMP=0x0000000000026a2a
- (void)setName:(id)arg1;	// IMP=0x0000000000026a13
- (id)_initWithKey:(id)arg1 task:(id)arg2;	// IMP=0x0000000000026919
- (id)init;	// IMP=0x0000000000026903
- (void)_assignThreadPriority;	// IMP=0x0000000000026158

@end

