//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <GameCenterFoundation/GKSessionDelegate-Protocol.h>

@class GKGame, GKPlayer, GKTurnBasedMatchInternal, GKTurnBasedParticipant, NSArray, NSData, NSDate, NSString;

@interface GKTurnBasedMatch : NSObject <GKSessionDelegate>
{
    unsigned int _state;	// 8 = 0x8
    GKTurnBasedMatchInternal *_internal;	// 16 = 0x10
    NSArray *_participants;	// 24 = 0x18
    NSArray *_exchanges;	// 32 = 0x20
}

+ (void)loadTurnBasedMatchWithDetailsForMatchID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000a3909
+ (id)keyPathsForValuesAffectingStatus;	// IMP=0x00000000000a08f1
+ (id)_localizableMessageWithKey:(id)arg1 arguments:(id)arg2 defaultMessage:(id)arg3;	// IMP=0x000000000009f8fe
+ (_Bool)instancesRespondToSelector:(SEL)arg1;	// IMP=0x000000000009f623
+ (id)instanceMethodSignatureForSelector:(SEL)arg1;	// IMP=0x000000000009f49c
+ (void)loadMatchWithID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000009e7e1
+ (void)loadTurnBasedMatchDetailsForMatchIDs:(id)arg1 loadGameData:(_Bool)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000009e364
+ (void)loadTurnBasedMatchSummariesIncludingCompatibleBundleID:(_Bool)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000009e1dd
+ (void)loadTurnBasedMatchSummaries:(CDUnknownBlockType)arg1;	// IMP=0x000000000009e1c6
+ (void)loadMatchesIncludingCompatibleBundleID:(_Bool)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000009deba
+ (void)loadMatchesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000009dea3
+ (void)findMatchForRequest:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x000000000009d846
+ (id)matchesWithInternalRepresentations:(id)arg1;	// IMP=0x000000000009d615
+ (void)getTurnBasedBadgeCountWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000009d4fc
- (void).cxx_destruct;	// IMP=0x00000000000a9243
@property(readonly, nonatomic) NSArray *exchanges; // @synthesize exchanges=_exchanges;
@property(readonly, nonatomic) NSArray *participants; // @synthesize participants=_participants;
- (void)sendReminderToParticipants:(id)arg1 localizableMessageKey:(id)arg2 arguments:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000a8a9f
- (void)sendExchangeToParticipants:(id)arg1 data:(id)arg2 localizableMessageKey:(id)arg3 arguments:(id)arg4 timeout:(double)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000a810f
- (void)saveMergedMatchData:(id)arg1 withResolvedExchanges:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000a79e7
- (id)exchangeForID:(id)arg1;	// IMP=0x00000000000a7814
- (void)saveCurrentTurnWithMatchData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000a72d5
- (void)endMatchInTurnWithMatchData:(id)arg1 leaderboardScores:(id)arg2 achievements:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000a7221
- (void)endMatchInTurnWithMatchData:(id)arg1 scores:(id)arg2 achievements:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000a677e
- (void)endMatchInTurnWithMatchData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000a6764
- (void)participantQuitOutOfTurnWithOutcome:(long long)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000a5f7d
- (void)participantQuitInTurnWithOutcome:(long long)arg1 nextParticipants:(id)arg2 turnTimeout:(double)arg3 matchData:(id)arg4 completionHandler:(CDUnknownBlockType)arg5;	// IMP=0x00000000000a5a02
- (void)participantQuitInTurnWithOutcome:(long long)arg1 nextParticipant:(id)arg2 matchData:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000a5953
- (void)endTurnWithNextParticipants:(id)arg1 turnTimeout:(double)arg2 matchData:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000a5275
- (id)indexesForParticipants:(id)arg1;	// IMP=0x00000000000a4fd4
- (void)endTurnWithNextParticipant:(id)arg1 matchData:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000a4f30
- (void)reserveShareParticipantSlots:(long long)arg1 minPlayerCount:(long long)arg2 maxPlayerCount:(long long)arg3 andInvitePlayers:(id)arg4 withMessage:(id)arg5 handler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000a4de9
- (void)loadURLWithMatchRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000a4152
- (void)loadMatchDataWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000a36b0
- (void)removeWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000a3267
@property(readonly, nonatomic) NSArray *completedExchanges;
@property(readonly, nonatomic) NSArray *activeExchanges;
@property(readonly, nonatomic) GKTurnBasedParticipant *firstWinnerOrTiedOrLastLoser;
@property(readonly, nonatomic) GKPlayer *showcasePlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *localPlayerParticipant;
@property(readonly, nonatomic) GKTurnBasedParticipant *playingWithParticipantOrFirstKnownPlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *previousParticipantOrFirstKnownPlayer;
@property(readonly, nonatomic) GKTurnBasedParticipant *previousParticipant;
@property(retain, nonatomic) GKTurnBasedParticipant *currentParticipant;
- (void)declineInviteWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000a1b92
- (void)acceptInviteWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000a1659
- (void)rematchWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000a0b37
@property(readonly, nonatomic) NSDate *dateSortKey;
- (long long)compare:(id)arg1;	// IMP=0x00000000000a09d1
@property(readonly, nonatomic) long long status; // @dynamic status;
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) GKPlayer *currentPlayer; // @dynamic currentPlayer;
@property(nonatomic) unsigned int state; // @synthesize state=_state;
- (void)setLocalizableMessageWithKey:(id)arg1 arguments:(id)arg2;	// IMP=0x000000000009fd90
@property(copy, nonatomic) NSString *message;
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;	// IMP=0x000000000009f6fd
- (id)valueForUndefinedKey:(id)arg1;	// IMP=0x000000000009f67a
- (_Bool)respondsToSelector:(SEL)arg1;	// IMP=0x000000000009f5a8
- (id)methodSignatureForSelector:(SEL)arg1;	// IMP=0x000000000009f50e
- (id)forwardingTargetForSelector:(SEL)arg1;	// IMP=0x000000000009f48a
@property(readonly, nonatomic) GKGame *game; // @dynamic game;
@property(readonly, nonatomic) _Bool localPlayerHasRecentTurn;
@property(readonly, nonatomic) _Bool isMyTurn; // @dynamic isMyTurn;
- (id)_exchangesForInternalRepresentation:(id)arg1 participants:(id)arg2;	// IMP=0x000000000009edb3
- (id)_participantsForInternalRepresentation:(id)arg1;	// IMP=0x000000000009ecac
- (void)_updateWithInternal:(id)arg1;	// IMP=0x000000000009ec1b
@property(retain) GKTurnBasedMatchInternal *internal; // @synthesize internal=_internal;
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000009eac4
@property(readonly) unsigned long long hash;
- (id)init;	// IMP=0x000000000009ea6c
- (id)initWithInternalRepresentation:(id)arg1;	// IMP=0x000000000009e9d1
@property(readonly, nonatomic) unsigned long long exchangeMaxInitiatedExchangesPerPlayer; // @dynamic exchangeMaxInitiatedExchangesPerPlayer;
@property(readonly, nonatomic) unsigned long long exchangeDataMaximumSize; // @dynamic exchangeDataMaximumSize;
@property(nonatomic) unsigned long long matchDataMaximumSize; // @dynamic matchDataMaximumSize;

// Remaining properties
@property(retain, nonatomic) NSString *bundleID; // @dynamic bundleID;
@property(retain, nonatomic) NSString *bundleVersion; // @dynamic bundleVersion;
@property(readonly, nonatomic) NSDate *creationDate; // @dynamic creationDate;
@property(readonly, copy) NSString *debugDescription;
@property(copy, nonatomic) NSDate *lastTurnDate; // @dynamic lastTurnDate;
@property(readonly, nonatomic) NSData *matchData; // @dynamic matchData;
@property(readonly, nonatomic) NSString *matchID; // @dynamic matchID;
@property(readonly, nonatomic) long long platform; // @dynamic platform;
@property(retain, nonatomic) NSString *shortBundleVersion; // @dynamic shortBundleVersion;
@property(readonly) Class superclass;
@property(readonly, nonatomic) long long turnNumber; // @dynamic turnNumber;

@end

