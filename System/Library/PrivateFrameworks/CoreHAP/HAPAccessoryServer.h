//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <HMFoundation/HMFObject.h>

@class HAPAccessory, HAPDeviceID, HAPKeyBag, HAPSuspendedAccessory, HMFActivity, HMFVersion, NSArray, NSData, NSDate, NSHashTable, NSNumber, NSObject, NSString;
@protocol HAPAccessoryServerDelegate, HAPKeyStore, HMFLocking, OS_dispatch_queue;

@interface HAPAccessoryServer : HMFObject
{
    NSString *_name;	// 8 = 0x8
    NSString *_identifier;	// 16 = 0x10
    id <HMFLocking> _lock;	// 24 = 0x18
    _Bool _hasPairings;	// 32 = 0x20
    _Bool _reachable;	// 33 = 0x21
    _Bool _securitySessionOpen;	// 34 = 0x22
    _Bool _reachabilityPingEnabled;	// 35 = 0x23
    _Bool _sessionRestoreActive;	// 36 = 0x24
    _Bool _shouldDisconnectOnIdle;	// 37 = 0x25
    _Bool _hasAdvertisement;	// 38 = 0x26
    _Bool _supportsUnreachablePing;	// 39 = 0x27
    _Bool _supportsTimedWrite;	// 40 = 0x28
    _Bool _bleLinkConnected;	// 41 = 0x29
    _Bool _incompatibleUpdate;	// 42 = 0x2a
    int _successfulPingCount;	// 44 = 0x2c
    int _failedPingCount;	// 48 = 0x30
    NSNumber *_category;	// 56 = 0x38
    unsigned long long _configNumber;	// 64 = 0x40
    id <HAPAccessoryServerDelegate> _delegate;	// 72 = 0x48
    NSObject<OS_dispatch_queue> *_delegateQueue;	// 80 = 0x50
    NSData *_setupHash;	// 88 = 0x58
    unsigned long long _authMethod;	// 96 = 0x60
    NSString *_productData;	// 104 = 0x68
    unsigned long long _pendingRemovePairing;	// 112 = 0x70
    NSHashTable *_notificationClients;	// 120 = 0x78
    NSArray *_accessories;	// 128 = 0x80
    NSString *_reachabilityChangedReason;	// 136 = 0x88
    NSDate *_connectionStartTime;	// 144 = 0x90
    HAPAccessory *_primaryAccessory;	// 152 = 0x98
    long long _linkType;	// 160 = 0xa0
    HMFVersion *_version;	// 168 = 0xa8
    NSHashTable *_internalDelegates;	// 176 = 0xb0
    NSObject<OS_dispatch_queue> *_internalDelegateQueue;	// 184 = 0xb8
    NSObject<OS_dispatch_queue> *_clientQueue;	// 192 = 0xc0
    HAPSuspendedAccessory *_suspendedAccessory;	// 200 = 0xc8
    unsigned long long _stateNumber;	// 208 = 0xd0
    unsigned long long _wakeNumber;	// 216 = 0xd8
    unsigned long long _compatibilityFeatures;	// 224 = 0xe0
    id <HAPKeyStore> _keyStore;	// 232 = 0xe8
    unsigned long long _pairSetupType;	// 240 = 0xf0
    HAPKeyBag *_keyBag;	// 248 = 0xf8
    HMFActivity *_pairingActivity;	// 256 = 0x100
    NSNumber *_metric_pairVerifyDuration;	// 264 = 0x108
    NSString *_metric_pairVerifyReason;	// 272 = 0x110
}

- (void).cxx_destruct;	// IMP=0x000000000014d527
@property(copy, nonatomic) NSString *metric_pairVerifyReason; // @synthesize metric_pairVerifyReason=_metric_pairVerifyReason;
@property(copy, nonatomic) NSNumber *metric_pairVerifyDuration; // @synthesize metric_pairVerifyDuration=_metric_pairVerifyDuration;
@property(nonatomic) __weak HMFActivity *pairingActivity; // @synthesize pairingActivity=_pairingActivity;
@property(retain, nonatomic) HAPKeyBag *keyBag; // @synthesize keyBag=_keyBag;
@property(nonatomic) unsigned long long pairSetupType; // @synthesize pairSetupType=_pairSetupType;
@property(readonly, nonatomic) __weak id <HAPKeyStore> keyStore; // @synthesize keyStore=_keyStore;
@property(nonatomic, getter=isIncompatibleUpdate) _Bool incompatibleUpdate; // @synthesize incompatibleUpdate=_incompatibleUpdate;
@property(nonatomic) unsigned long long compatibilityFeatures; // @synthesize compatibilityFeatures=_compatibilityFeatures;
@property(nonatomic) unsigned long long wakeNumber; // @synthesize wakeNumber=_wakeNumber;
@property(nonatomic) unsigned long long stateNumber; // @synthesize stateNumber=_stateNumber;
@property(retain, nonatomic) HAPSuspendedAccessory *suspendedAccessory; // @synthesize suspendedAccessory=_suspendedAccessory;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *clientQueue; // @synthesize clientQueue=_clientQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *internalDelegateQueue; // @synthesize internalDelegateQueue=_internalDelegateQueue;
@property(readonly, nonatomic) NSHashTable *internalDelegates; // @synthesize internalDelegates=_internalDelegates;
@property(readonly, nonatomic, getter=isBLELinkConnected) _Bool bleLinkConnected; // @synthesize bleLinkConnected=_bleLinkConnected;
@property(copy) HMFVersion *version; // @synthesize version=_version;
@property(nonatomic) _Bool supportsTimedWrite; // @synthesize supportsTimedWrite=_supportsTimedWrite;
@property(readonly, nonatomic) long long linkType; // @synthesize linkType=_linkType;
@property(retain, nonatomic) HAPAccessory *primaryAccessory; // @synthesize primaryAccessory=_primaryAccessory;
@property _Bool supportsUnreachablePing; // @synthesize supportsUnreachablePing=_supportsUnreachablePing;
@property(nonatomic) int failedPingCount; // @synthesize failedPingCount=_failedPingCount;
@property(nonatomic) int successfulPingCount; // @synthesize successfulPingCount=_successfulPingCount;
@property(retain, nonatomic) NSHashTable *notificationClients; // @synthesize notificationClients=_notificationClients;
@property(nonatomic) unsigned long long configNumber; // @synthesize configNumber=_configNumber;
- (void)securitySessionWillCloseWithResponseData:(id)arg1 error:(id *)arg2;	// IMP=0x000000000014cfa3
- (void)associateAccessoryWithControllerKeyUsingAccessoryIdentifier:(id)arg1;	// IMP=0x000000000014cbb2
- (void)associateAccessoryWithControllerKeyUsingAccessoryPublicKey:(id)arg1;	// IMP=0x000000000014c834
- (_Bool)shouldRetryPVDueToAuthenticationError:(id)arg1;	// IMP=0x000000000014c4df
- (void)refreshKeyBag;	// IMP=0x000000000014c4a2
- (void)initializeKeyBagIfNecessary;	// IMP=0x000000000014c3ba
- (id)getControllerUserName;	// IMP=0x000000000014c0b5
- (void)disconnect;	// IMP=0x000000000014c00d
- (void)disconnectWithError:(id)arg1;	// IMP=0x000000000014bf57
- (void)submitPairVerifyMetricWithError:(id)arg1;	// IMP=0x000000000014bdbe
- (void)updateAccessoryInfoDictionary:(id)arg1;	// IMP=0x000000000014bb0a
- (void)incrementFailedPing;	// IMP=0x000000000014ba68
- (void)incrementSuccessfulPing;	// IMP=0x000000000014b9c6
- (id)buildReachabilityNotificationDictionary:(id)arg1 reachable:(_Bool)arg2 linkType:(long long)arg3 withError:(long long)arg4;	// IMP=0x000000000014b7e1
- (_Bool)notifyClients:(unsigned long long)arg1 withDictionary:(id)arg2;	// IMP=0x000000000014af24
- (void)unregisterForNotifications:(id)arg1;	// IMP=0x000000000014ad93
- (void)registerForNotifications:(id)arg1;	// IMP=0x000000000014ab88
- (_Bool)isPinging;	// IMP=0x000000000014ab80
- (void)stopPing;	// IMP=0x000000000014aad2
- (void)startPing;	// IMP=0x000000000014aa24
- (_Bool)pingSupported;	// IMP=0x000000000014aa1c
- (void)enumerateInternalDelegatesUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x000000000014a96b
- (void)removeInternalDelegate:(id)arg1;	// IMP=0x000000000014a8ba
- (void)addInternalDelegate:(id)arg1;	// IMP=0x000000000014a809
- (_Bool)requiresTimedWrite:(id)arg1;	// IMP=0x000000000014a471
- (void)handleUpdatesForCharacteristics:(id)arg1 stateNumber:(id)arg2;	// IMP=0x000000000014a3b0
- (void)identifyWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000000014a2fa
- (void)enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x000000000014a230
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000014a166
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x000000000014a09c
- (void)discoverAccessories;	// IMP=0x0000000000149ff4
- (void)removePairingIdentifier:(id)arg1 pairingPublicKey:(id)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x0000000000149def
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000149d2e
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x0000000000149c6d
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000149ba3
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000149ad9
- (_Bool)stopPairingWithError:(id *)arg1;	// IMP=0x0000000000149a31
- (_Bool)tryPairingPassword:(id)arg1 error:(id *)arg2;	// IMP=0x000000000014997b
- (void)startPairingWithConsentRequired:(_Bool)arg1 config:(id)arg2 ownershipToken:(id)arg3;	// IMP=0x00000000001498ba
- (void)continuePairingUsingWAC;	// IMP=0x0000000000149812
- (void)continuePairingAfterAuthPrompt;	// IMP=0x000000000014976a
- (_Bool)matchesSetupID:(id)arg1 serverIdentifier:(id)arg2;	// IMP=0x00000000001496b8
- (_Bool)matchesSetupID:(id)arg1;	// IMP=0x0000000000149625
- (_Bool)isPaired;	// IMP=0x000000000014957d
- (void)validatePairingAuthMethod:(CDUnknownBlockType)arg1;	// IMP=0x00000000001494d4
- (void)tearDownSessionOnAuthCompletion;	// IMP=0x000000000014942c
- (void)provisionToken:(id)arg1;	// IMP=0x0000000000149376
- (void)continueAuthAfterValidation:(_Bool)arg1;	// IMP=0x00000000001492ce
- (void)authenticateAccessory;	// IMP=0x0000000000149226
- (id)shortDescription;	// IMP=0x0000000000149152
- (void)updateActiveDisconnectOnIdleTimeout:(double)arg1;	// IMP=0x000000000014914c
@property(copy, nonatomic) NSDate *connectionStartTime; // @synthesize connectionStartTime=_connectionStartTime;
@property(copy, nonatomic) NSString *reachabilityChangedReason; // @synthesize reachabilityChangedReason=_reachabilityChangedReason;
@property _Bool hasAdvertisement; // @synthesize hasAdvertisement=_hasAdvertisement;
- (void)reconfirm;	// IMP=0x0000000000148bbe
@property(readonly) long long communicationProtocol;
@property(retain, nonatomic) NSString *productData; // @synthesize productData=_productData;
@property(copy, nonatomic) NSNumber *category; // @synthesize category=_category;
@property(copy, nonatomic) NSString *name; // @synthesize name=_name;
@property(nonatomic) unsigned long long authMethod; // @synthesize authMethod=_authMethod;
@property(copy, nonatomic) NSData *setupHash; // @synthesize setupHash=_setupHash;
@property(copy, nonatomic) NSString *identifier; // @synthesize identifier=_identifier;
@property(readonly, copy) HAPDeviceID *deviceID;
@property(nonatomic) _Bool hasPairings; // @synthesize hasPairings=_hasPairings;
@property(nonatomic) unsigned long long pendingRemovePairing; // @synthesize pendingRemovePairing=_pendingRemovePairing;
@property(getter=isSecuritySessionOpen) _Bool securitySessionOpen; // @synthesize securitySessionOpen=_securitySessionOpen;
@property(nonatomic, getter=isSessionRestoreActive, setter=setSessionRestoreActive:) _Bool sessionRestoreActive; // @synthesize sessionRestoreActive=_sessionRestoreActive;
@property(nonatomic) _Bool reachabilityPingEnabled; // @synthesize reachabilityPingEnabled=_reachabilityPingEnabled;
@property(copy, nonatomic) NSArray *accessories; // @synthesize accessories=_accessories;
@property _Bool shouldDisconnectOnIdle; // @synthesize shouldDisconnectOnIdle=_shouldDisconnectOnIdle;
- (void)disconnectOnIdleUpdated;	// IMP=0x00000000001470b5
@property(nonatomic, getter=isReachable) _Bool reachable; // @synthesize reachable=_reachable;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *delegateQueue; // @synthesize delegateQueue=_delegateQueue;
@property(readonly) __weak id <HAPAccessoryServerDelegate> delegate; // @synthesize delegate=_delegate;
- (void)setDelegate:(id)arg1 queue:(id)arg2;	// IMP=0x0000000000146a19
- (id)initWithKeystore:(id)arg1;	// IMP=0x00000000001467dc
- (id)init;	// IMP=0x0000000000146734

@end

