//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CoreHAP/CBPeripheralDelegate-Protocol.h>
#import <CoreHAP/HAPAuthSessionDelegate-Protocol.h>
#import <CoreHAP/HAPBTLEControlOutputStreamDelegate-Protocol.h>
#import <CoreHAP/HAPPairSetupSessionClientDelegate-Protocol.h>
#import <CoreHAP/HAPSecuritySessionDelegate-Protocol.h>
#import <CoreHAP/HMFLogging-Protocol.h>
#import <CoreHAP/HMFTimerDelegate-Protocol.h>

@class HAPAccessoryProtocolInfo, HAPAuthSession, HAPBLEAccessoryCache, HAPCharacteristic, HAPPairSetupSession, HAPSecuritySession, HMFTimer, NSError, NSMapTable, NSMutableArray, NSOperationQueue, NSString, _HAPBTLEDiscoveryContext;

@interface _HAPAccessoryServerBTLE200 <CBPeripheralDelegate, HAPBTLEControlOutputStreamDelegate, HAPPairSetupSessionClientDelegate, HAPSecuritySessionDelegate, HMFTimerDelegate, HAPAuthSessionDelegate, HMFLogging>
{
    _Bool _hasValidCache;	// 32 = 0x20
    _Bool _discovering;	// 33 = 0x21
    _Bool _verified;	// 34 = 0x22
    _Bool _badPairSetupCode;	// 35 = 0x23
    _Bool _pairing;	// 36 = 0x24
    _Bool _authenticated;	// 37 = 0x25
    unsigned char _featureFlags;	// 38 = 0x26
    HAPSecuritySession *_securitySession;	// 40 = 0x28
    long long _connectionState;	// 48 = 0x30
    HAPBLEAccessoryCache *_accessoryCache;	// 56 = 0x38
    CDUnknownBlockType _connectionCompletionHandler;	// 64 = 0x40
    HMFTimer *_connectionIdleTimer;	// 72 = 0x48
    _HAPBTLEDiscoveryContext *_discoveryContext;	// 80 = 0x50
    HAPCharacteristic *_identifyCharacteristic;	// 88 = 0x58
    HAPPairSetupSession *_pairSetupSession;	// 96 = 0x60
    double _pairSetupBackoffTimeInterval;	// 104 = 0x68
    CDUnknownBlockType _setupCodeCompletionHandler;	// 112 = 0x70
    NSError *_pairingDisconnectionError;	// 120 = 0x78
    HAPAuthSession *_authSession;	// 128 = 0x80
    HAPAccessoryProtocolInfo *_authenticatedProtocolInfo;	// 136 = 0x88
    HAPCharacteristic *_pairingFeaturesCharacteristic;	// 144 = 0x90
    HAPCharacteristic *_pairSetupCharacteristic;	// 152 = 0x98
    HAPCharacteristic *_pairVerifyCharacteristic;	// 160 = 0xa0
    NSOperationQueue *_pairVerifyOperationQueue;	// 168 = 0xa8
    HAPCharacteristic *_pairingsCharacteristic;	// 176 = 0xb0
    NSMutableArray *_pendingRequests;	// 184 = 0xb8
    NSOperationQueue *_requestOperationQueue;	// 192 = 0xc0
    NSMutableArray *_pendingResponses;	// 200 = 0xc8
    NSMapTable *_characteristicWriteCompletionHandlers;	// 208 = 0xd0
    NSMapTable *_characteristicEnableEventCompletionHandlers;	// 216 = 0xd8
}

+ (id)logCategory;	// IMP=0x00000000000e443c
+ (_Bool)parseCharacteristicConfigurationResponse:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000e404d
+ (id)configurationRequestForCharacteristic:(id)arg1 isBroadcasted:(_Bool)arg2 interval:(unsigned long long)arg3 error:(id *)arg4;	// IMP=0x00000000000e3e3b
+ (_Bool)parseProtocolConfigurationResponse:(id)arg1 key:(id *)arg2 stateNumber:(id *)arg3 error:(id *)arg4;	// IMP=0x00000000000e35e2
+ (id)configurationRequestForService:(id)arg1 configRequestType:(unsigned char)arg2 error:(id *)arg3;	// IMP=0x00000000000e3208
+ (_Bool)parseWriteResponse:(id)arg1 value:(id *)arg2 error:(id *)arg3;	// IMP=0x00000000000e2f30
+ (id)executeWriteRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id *)arg3;	// IMP=0x00000000000e2d6c
+ (id)prepareWriteRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 error:(id *)arg6;	// IMP=0x00000000000e2a8f
+ (id)writeRequestForCharacteristic:(id)arg1 value:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 error:(id *)arg6;	// IMP=0x00000000000e27af
+ (id)extractNotificationContextFromBodyData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000e2662
+ (id)extractSerializedRequestValueFromBodyData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000e251e
+ (_Bool)parseReadResponse:(id)arg1 value:(id *)arg2 notificationContext:(id *)arg3 error:(id *)arg4;	// IMP=0x00000000000e200a
+ (id)readRequestForCharacteristic:(id)arg1 options:(long long)arg2 error:(id *)arg3;	// IMP=0x00000000000e1e46
+ (_Bool)isHAPDescriptor:(id)arg1;	// IMP=0x00000000000e1dc7
+ (_Bool)isHAPService:(id)arg1;	// IMP=0x00000000000e175d
+ (id)parseServiceSignatureResponse:(id)arg1 serviceInstanceID:(id)arg2 serviceType:(id)arg3 error:(id *)arg4;	// IMP=0x00000000000e1305
+ (id)parseSignatureResponse:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000dfdd9
+ (id)signatureRequestForService:(id)arg1 characteristic:(id)arg2 requiresAuthentication:(_Bool)arg3 error:(id *)arg4;	// IMP=0x00000000000dfd6d
+ (id)signatureRequestForCharacteristic:(id)arg1 requiresAuthentication:(_Bool)arg2 error:(id *)arg3;	// IMP=0x00000000000dfd01
- (void).cxx_destruct;	// IMP=0x00000000000cb64f
@property(nonatomic) unsigned char featureFlags; // @synthesize featureFlags=_featureFlags;
@property(readonly, nonatomic) NSMapTable *characteristicEnableEventCompletionHandlers; // @synthesize characteristicEnableEventCompletionHandlers=_characteristicEnableEventCompletionHandlers;
@property(readonly, nonatomic) NSMapTable *characteristicWriteCompletionHandlers; // @synthesize characteristicWriteCompletionHandlers=_characteristicWriteCompletionHandlers;
@property(readonly, nonatomic) NSMutableArray *pendingResponses; // @synthesize pendingResponses=_pendingResponses;
@property(readonly, nonatomic) NSOperationQueue *requestOperationQueue; // @synthesize requestOperationQueue=_requestOperationQueue;
@property(readonly, nonatomic) NSMutableArray *pendingRequests; // @synthesize pendingRequests=_pendingRequests;
@property(nonatomic) __weak HAPCharacteristic *pairingsCharacteristic; // @synthesize pairingsCharacteristic=_pairingsCharacteristic;
@property(readonly, nonatomic) NSOperationQueue *pairVerifyOperationQueue; // @synthesize pairVerifyOperationQueue=_pairVerifyOperationQueue;
@property(nonatomic) __weak HAPCharacteristic *pairVerifyCharacteristic; // @synthesize pairVerifyCharacteristic=_pairVerifyCharacteristic;
@property(nonatomic) __weak HAPCharacteristic *pairSetupCharacteristic; // @synthesize pairSetupCharacteristic=_pairSetupCharacteristic;
@property(nonatomic) __weak HAPCharacteristic *pairingFeaturesCharacteristic; // @synthesize pairingFeaturesCharacteristic=_pairingFeaturesCharacteristic;
@property(retain, nonatomic) HAPAccessoryProtocolInfo *authenticatedProtocolInfo; // @synthesize authenticatedProtocolInfo=_authenticatedProtocolInfo;
@property(retain, nonatomic) HAPAuthSession *authSession; // @synthesize authSession=_authSession;
@property(nonatomic) _Bool authenticated; // @synthesize authenticated=_authenticated;
@property(retain, nonatomic) NSError *pairingDisconnectionError; // @synthesize pairingDisconnectionError=_pairingDisconnectionError;
@property(nonatomic, getter=isPairing) _Bool pairing; // @synthesize pairing=_pairing;
@property(copy, nonatomic) CDUnknownBlockType setupCodeCompletionHandler; // @synthesize setupCodeCompletionHandler=_setupCodeCompletionHandler;
@property(nonatomic, getter=isBadSetupCode) _Bool badPairSetupCode; // @synthesize badPairSetupCode=_badPairSetupCode;
@property(nonatomic) double pairSetupBackoffTimeInterval; // @synthesize pairSetupBackoffTimeInterval=_pairSetupBackoffTimeInterval;
@property(retain, nonatomic) HAPPairSetupSession *pairSetupSession; // @synthesize pairSetupSession=_pairSetupSession;
@property(nonatomic) __weak HAPCharacteristic *identifyCharacteristic; // @synthesize identifyCharacteristic=_identifyCharacteristic;
@property(nonatomic, getter=isVerified) _Bool verified; // @synthesize verified=_verified;
@property(nonatomic, getter=isDiscovering) _Bool discovering; // @synthesize discovering=_discovering;
@property(retain, nonatomic) _HAPBTLEDiscoveryContext *discoveryContext; // @synthesize discoveryContext=_discoveryContext;
@property(retain, nonatomic) HMFTimer *connectionIdleTimer; // @synthesize connectionIdleTimer=_connectionIdleTimer;
@property(copy, nonatomic) CDUnknownBlockType connectionCompletionHandler; // @synthesize connectionCompletionHandler=_connectionCompletionHandler;
@property _Bool hasValidCache; // @synthesize hasValidCache=_hasValidCache;
@property(retain) HAPBLEAccessoryCache *accessoryCache; // @synthesize accessoryCache=_accessoryCache;
@property(nonatomic) long long connectionState; // @synthesize connectionState=_connectionState;
- (void)disconnect;	// IMP=0x00000000000cb1cc
- (void)timerDidFire:(id)arg1;	// IMP=0x00000000000cae5c
- (void)securitySession:(id)arg1 didCloseWithError:(id)arg2;	// IMP=0x00000000000cad80
- (void)securitySessionDidOpen:(id)arg1;	// IMP=0x00000000000caccf
- (void)securitySessionIsOpening:(id)arg1;	// IMP=0x00000000000cac1e
- (void)securitySession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;	// IMP=0x00000000000cab42
- (id)securitySession:(id)arg1 didReceiveRequestForPeerPairingIdentityWithIdentifier:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000ca678
- (id)securitySession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id *)arg2;	// IMP=0x00000000000ca548
- (void)submitPairVerifyMetricWithError:(id)arg1;	// IMP=0x00000000000ca3af
- (void)authSession:(id)arg1 authComplete:(id)arg2;	// IMP=0x00000000000ca2fe
- (void)authSession:(id)arg1 confirmUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000ca1f3
- (void)authSession:(id)arg1 authenticateUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000ca0e8
- (void)authSession:(id)arg1 validateUUID:(id)arg2 token:(id)arg3;	// IMP=0x00000000000c9fdd
- (void)authSession:(id)arg1 sendAuthExchangeData:(id)arg2;	// IMP=0x00000000000c9f2c
- (void)_notifyDelegatesPairingStopped:(id)arg1;	// IMP=0x00000000000c9e65
- (void)_continuePairingAfterMFiCertValidation;	// IMP=0x00000000000c9df8
- (void)tearDownSessionOnAuthCompletion;	// IMP=0x00000000000c9d87
- (void)provisionToken:(id)arg1;	// IMP=0x00000000000c9c20
- (void)continueAuthAfterValidation:(_Bool)arg1;	// IMP=0x00000000000c9a51
- (void)authenticateAccessory;	// IMP=0x00000000000c99e0
- (_Bool)_validateProtocolInfo:(id)arg1;	// IMP=0x00000000000c969d
- (void)getAccessoryInfo:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c95a1
- (_Bool)pairSetupSession:(id)arg1 didReceiveBackoffRequestWithTimeInterval:(double)arg2;	// IMP=0x00000000000c94df
- (void)pairSetupSessionDidReceiveInvalidSetupCode:(id)arg1;	// IMP=0x00000000000c942e
- (void)pairSetupSession:(id)arg1 didReceiveSetupCodeRequestWithCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c9352
- (void)pairSetupSession:(id)arg1 didReceiveProductData:(id)arg2;	// IMP=0x00000000000c9276
- (void)pairSetupSession:(id)arg1 didStopWithError:(id)arg2;	// IMP=0x00000000000c919a
- (_Bool)pairSetupSession:(id)arg1 didPairWithPeer:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000c8b11
- (id)pairSetupSession:(id)arg1 didReceiveLocalPairingIdentityRequestWithError:(id *)arg2;	// IMP=0x00000000000c89a7
- (void)pairSetupSession:(id)arg1 didReceiveSetupExchangeData:(id)arg2;	// IMP=0x00000000000c88cb
- (void)controlOutputStreamDidComplete:(id)arg1;	// IMP=0x00000000000c8822
- (void)controlOutputStream:(id)arg1 didCloseWithError:(id)arg2;	// IMP=0x00000000000c874f
- (void)controlOutputStreamDidOpen:(id)arg1;	// IMP=0x00000000000c8749
- (void)controlOutputStream:(id)arg1 didReceiveRequestToSendControlPacket:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c863f
- (void)peripheral:(id)arg1 didUpdateNotificationStateForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c8534
- (void)peripheral:(id)arg1 didWriteValueForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c8429
- (void)peripheral:(id)arg1 didUpdateValueForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c831e
- (void)peripheral:(id)arg1 didUpdateValueForDescriptor:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c8213
- (void)peripheral:(id)arg1 didDiscoverDescriptorsForCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c8108
- (void)peripheral:(id)arg1 didDiscoverCharacteristicsForService:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c7ffd
- (void)peripheral:(id)arg1 didModifyServices:(id)arg2;	// IMP=0x00000000000c7f21
- (void)peripheral:(id)arg1 didDiscoverServices:(id)arg2;	// IMP=0x00000000000c7ce8
- (void)_notifyDelegateOfSentPlaintextData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000c7b94
- (void)_notifyDelegateOfSentEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000c7a40
- (void)_notifyDelegateOfReceivedPlaintextData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000c78ec
- (void)_notifyDelegateOfReceivedEncryptedAuthenticatedData:(id)arg1 forCharacteristic:(id)arg2;	// IMP=0x00000000000c776e
- (_Bool)_validateGeneratedBroadcastKey:(id)arg1;	// IMP=0x00000000000c73da
- (void)_generateBroadcastKey:(unsigned char)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c72df
- (void)generateBroadcastKey:(unsigned char)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c71fa
- (_Bool)isBLELinkConnected;	// IMP=0x00000000000c71e0
- (void)_handleConnectionIdleTimeout;	// IMP=0x00000000000c6f23
- (void)_suspendConnectionIdleTimer;	// IMP=0x00000000000c6df2
- (void)_resumeConnectionIdleTimer;	// IMP=0x00000000000c6cc1
- (void)_kickConnectionIdleTimer;	// IMP=0x00000000000c6c84
- (void)handleDisconnectionWithError:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c6abc
- (void)_handleConnectionWithError:(id)arg1;	// IMP=0x00000000000c6884
- (void)handleConnectionWithPeripheral:(id)arg1 withError:(id)arg2;	// IMP=0x00000000000c67a8
- (void)_restartConnectionIdleTimer:(double)arg1;	// IMP=0x00000000000c6599
- (void)_updateConnectionIdleTime:(unsigned char)arg1;	// IMP=0x00000000000c652d
- (void)updateConnectionIdleTime:(unsigned char)arg1;	// IMP=0x00000000000c64b1
- (void)disconnectWithCompletionHandler:(CDUnknownBlockType)arg1 disconnectionError:(id)arg2;	// IMP=0x00000000000c63d5
- (void)disconnectWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c63c1
- (void)_cancelConnectionWithError:(id)arg1;	// IMP=0x00000000000c6080
- (void)connectWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c5fcf
- (id)_decryptData:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000c5d40
- (id)_encryptDataAndGenerateAuthTag:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000c5abd
- (id)protocolInfoServiceSignatureCharacteristics;	// IMP=0x00000000000c59f0
- (void)_handleSecuritySessionSetupExchangeData:(id)arg1;	// IMP=0x00000000000c5657
- (void)_establishSecureSession;	// IMP=0x00000000000c5290
- (void)setSecuritySessionOpen:(_Bool)arg1;	// IMP=0x00000000000c51e8
- (_Bool)isSecuritySessionOpen;	// IMP=0x00000000000c51a4
@property(retain, nonatomic) HAPSecuritySession *securitySession; // @synthesize securitySession=_securitySession;
- (void)_cancelAllQueuedOperationsWithError:(id)arg1;	// IMP=0x00000000000c4d91
- (void)_resumeAllOperations;	// IMP=0x00000000000c4c12
- (void)_suspendAllOperations;	// IMP=0x00000000000c4a90
- (unsigned long long)_outstandingRequests;	// IMP=0x00000000000c491f
- (void)_enqueueRequest:(id)arg1 shouldPrioritize:(_Bool)arg2;	// IMP=0x00000000000c45b4
- (void)_sendProtocolInfoServiceExchangeData:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c40c9
- (void)_handleResponseData:(id)arg1 fromCharacteristic:(id)arg2 error:(id)arg3;	// IMP=0x00000000000c2d71
- (void)_requestResponseForRequest:(id)arg1;	// IMP=0x00000000000c2b2d
- (void)_handleWriteCompletionForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000c2938
- (void)_sendData:(id)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c2509
- (void)_sendControlPacket:(id)arg1 forRequest:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c20cf
- (unsigned long long)_maximumControlWriteLengthForRequest:(id)arg1;	// IMP=0x00000000000c1c56
- (void)_reallySendRequest:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c1b7a
- (void)_sendRequest:(id)arg1 shouldPrioritize:(_Bool)arg2 responseHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c192c
- (id)_pendingResponseForRequest:(id)arg1;	// IMP=0x00000000000c1759
- (id)_pendingRequestForCharacteristic:(id)arg1;	// IMP=0x00000000000c1586
- (void)identifyWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c138a
- (unsigned long long)_getPairSetupType;	// IMP=0x00000000000c1319
- (id)getLocalPairingIdentityWithError:(id *)arg1;	// IMP=0x00000000000c1220
- (void)_sendPairingRequestData:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c0f74
- (void)listPairingsWithCompletionQueue:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c0e98
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2 serverPairingCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c0a67
- (_Bool)removePairingForCurrentControllerOnQueue:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c0a52
- (void)removePairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c0947
- (void)addPairing:(id)arg1 completionQueue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000c083c
- (void)_pairingCompletedWithError:(id)arg1;	// IMP=0x00000000000c00d0
- (_Bool)tryPairingPassword:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000c001d
- (void)_handlePairingSetupCodeRequestWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000bfd7c
- (void)_handlePairSetupSessionExchangeData:(id)arg1;	// IMP=0x00000000000bfad8
- (_Bool)stopPairingWithError:(id *)arg1;	// IMP=0x00000000000bfa65
- (void)continuePairingAfterAuthPrompt;	// IMP=0x00000000000bf9f4
- (_Bool)_parsePairingFeaturesCharacteristic:(id)arg1 authMethod:(unsigned long long *)arg2 error:(id *)arg3;	// IMP=0x00000000000bf786
- (void)_getPairingFeaturesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000bf47e
- (void)_checkForAuthPrompt:(_Bool)arg1;	// IMP=0x00000000000bf42a
- (void)startPairingWithConsentRequired:(_Bool)arg1 config:(id)arg2 ownershipToken:(id)arg3;	// IMP=0x00000000000bf361
- (void)_enableBroadcastEvent:(_Bool)arg1 interval:(unsigned long long)arg2 forCharacteristic:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000beec3
- (void)_configureCharacteristics:(id)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000be90c
- (void)configureCharacteristics:(id)arg1 queue:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000be802
- (void)_configureBroadcastKeyGeneration:(unsigned char)arg1 service:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000000be496
- (void)_handleEventIndicationForCharacteristic:(id)arg1;	// IMP=0x00000000000be2c7
- (void)_handleHAPNotificationStateUpdateForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000be0f3
- (void)_enableEvent:(_Bool)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bde98
- (void)_performEnableEvent:(_Bool)arg1 toCharacteristic:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bdd35
- (void)_enableEvent:(_Bool)arg1 forCharacteristic:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000bd55d
- (void)_enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000bc3da
- (void)enableEvents:(_Bool)arg1 forCharacteristics:(id)arg2 withCompletionHandler:(CDUnknownBlockType)arg3 queue:(id)arg4;	// IMP=0x00000000000bc0f6
- (void)markNotifyingCharacteristicUpdatedforCharacteristic:(id)arg1;	// IMP=0x00000000000bbf73
- (void)_performTimedWriteExecuteForCharacteristic:(id)arg1 value:(id)arg2 options:(long long)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000bbb7e
- (void)_performTimedWritePrepareWithValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000bb680
- (void)_performTimedWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000bb53d
- (void)_performWriteValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000bb0f8
- (void)_writeValue:(id)arg1 toCharacteristic:(id)arg2 authorizationData:(id)arg3 contextData:(id)arg4 options:(long long)arg5 completionHandler:(CDUnknownBlockType)arg6;	// IMP=0x00000000000baca5
- (void)writeCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000baaca
- (void)_readValueForCharacteristic:(id)arg1 options:(long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000ba5b2
- (void)_updatePropertiesFromCharacteristic:(id)arg1;	// IMP=0x00000000000ba473
- (void)_readCharacteristicValues:(id)arg1 queue:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000b9f91
- (void)readCharacteristicValues:(id)arg1 timeout:(double)arg2 completionQueue:(id)arg3 completionHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000b9db5
- (id)_parseCharacteristic:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000b8d6b
- (id)_parseService:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000b7883
- (_Bool)shouldVerifyHAPService:(id)arg1;	// IMP=0x00000000000b7659
- (_Bool)shouldVerifyHAPCharacteristic:(id)arg1;	// IMP=0x00000000000b71bd
- (_Bool)isHAPCharacteristic:(id)arg1;	// IMP=0x00000000000b6f59
- (void)_handleReadServiceSignature:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b6d9c
- (void)_handleReadCharacteristicSignature:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b6bdf
- (void)_readServiceSignature:(id)arg1;	// IMP=0x00000000000b58cf
- (void)_readCharacteristicSignature:(id)arg1;	// IMP=0x00000000000b4944
- (id)_getProtocolInfoService;	// IMP=0x00000000000b477f
- (id)_getServiceInstanceID:(id)arg1;	// IMP=0x00000000000b4514
- (id)_getCharacteristicInstanceID:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000b4285
- (void)_readCharacteristicSignatures;	// IMP=0x00000000000b3f11
- (void)_handleUpdateValueForCharacteristic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b38e3
- (void)_handleReadDescriptorValue:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b3656
- (void)_readDescriptorValue:(id)arg1;	// IMP=0x00000000000b342f
- (void)_handleReadCharacteristicValue:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b32ea
- (void)_readCharacteristicValue:(id)arg1;	// IMP=0x00000000000b30aa
- (void)_handleDiscoveredDescriptors:(id)arg1;	// IMP=0x00000000000b2f3e
- (void)_handleDiscoveredCharactersitic:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b2c98
- (void)_discoverCharacteristic:(id)arg1;	// IMP=0x00000000000b2afd
- (void)_handleReadServiceInstanceId:(id)arg1;	// IMP=0x00000000000b2887
- (void)_handleDiscoveredCharacteristicsForService:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b24d3
- (void)_discoverCharacteristicsForService:(id)arg1;	// IMP=0x00000000000b2333
- (void)_handleDiscoveredServices:(id)arg1 error:(id)arg2;	// IMP=0x00000000000b1d43
- (void)_discoverServices;	// IMP=0x00000000000b1d04
- (void)_cacheServices:(id)arg1;	// IMP=0x00000000000b18d6
- (id)_serviceCacheFromHAPService:(id)arg1 serviceOrder:(unsigned long long)arg2;	// IMP=0x00000000000b1546
- (id)_hapServicesFromCache;	// IMP=0x00000000000b09fa
- (id)_getCachedService:(id)arg1;	// IMP=0x00000000000b0801
- (id)_getCBService:(id)arg1 instanceOrder:(unsigned long long)arg2;	// IMP=0x00000000000b03c4
- (id)_getCBCharacteristic:(id)arg1 instanceId:(id)arg2 service:(id)arg3;	// IMP=0x00000000000b0093
- (void)_handleCompletedDiscovery;	// IMP=0x00000000000aec3d
- (void)_retryDiscovery;	// IMP=0x00000000000aeab1
- (_Bool)_cancelDiscoveryWithError:(id)arg1;	// IMP=0x00000000000ae4f2
- (void)_discoverWithType:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ae160
- (void)_readPendingCharacteritiscTypes:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000adc50
- (void)discoverAccessoriesAndReadCharacteristicTypes:(id)arg1;	// IMP=0x00000000000adb9f
- (void)discoverAccessories;	// IMP=0x00000000000adb8b
- (void)_removePairingOfAccessoryServerCancelledMidPairing;	// IMP=0x00000000000ada88
- (id)_characteristicForCBCharacteristic:(id)arg1;	// IMP=0x00000000000ad85a
- (id)_serviceForCBService:(id)arg1;	// IMP=0x00000000000ad53f
- (_Bool)_delegateRespondsToSelector:(SEL)arg1;	// IMP=0x00000000000ad493
- (void)_createPrimaryAccessoryFromAdvertisementData;	// IMP=0x00000000000ad315
- (unsigned long long)hapBLEProtocolVersion;	// IMP=0x00000000000ad30a
@property(readonly, copy) NSString *description;
@property(readonly, copy) NSString *debugDescription;
- (id)descriptionWithPointer:(_Bool)arg1;	// IMP=0x00000000000ad1b0
- (id)shortDescription;	// IMP=0x00000000000ad0dc
- (void)dealloc;	// IMP=0x00000000000ad06f
- (void)_resetWithError:(id)arg1;	// IMP=0x00000000000ac867
- (id)initWithPeripheral:(id)arg1 name:(id)arg2 pairingUsername:(id)arg3 statusFlags:(id)arg4 stateNumber:(id)arg5 stateChanged:(_Bool)arg6 connectReason:(unsigned char)arg7 configNumber:(id)arg8 category:(id)arg9 setupHash:(id)arg10 connectionIdleTime:(unsigned char)arg11 browser:(id)arg12 keyStore:(id)arg13 whbStableIdentifier:(id)arg14;	// IMP=0x00000000000abfa3

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

