//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <MapKit/GEOResourceManifestTileGroupObserver-Protocol.h>
#import <MapKit/MKLocationProviderDelegate-Protocol.h>

@class CLHeading, CLLocation, GEOLocation, GEOLocationShifter, NSBundle, NSError, NSHashTable, NSLock, NSMutableArray, NSString, NSTimer, geo_isolater;
@protocol MKLocationProvider, MNLocationRecorder;

@interface MKLocationManager : NSObject <GEOResourceManifestTileGroupObserver, MKLocationProviderDelegate>
{
    id <MKLocationProvider> _locationProvider;	// 8 = 0x8
    NSHashTable *_locationObservers;	// 16 = 0x10
    NSHashTable *_locationListeners;	// 24 = 0x18
    NSHashTable *_headingObservers;	// 32 = 0x20
    CLLocation *_lastLocation;	// 40 = 0x28
    CLLocation *_lastGoodLocation;	// 48 = 0x30
    double _lastLocationUpdateTime;	// 56 = 0x38
    _Bool _isLastLocationStale;	// 64 = 0x40
    _Bool _lastLocationPushed;	// 65 = 0x41
    _Bool _trackingLocation;	// 66 = 0x42
    _Bool _trackingHeading;	// 67 = 0x43
    id <MNLocationRecorder> _locationRecorder;	// 72 = 0x48
    double _applicationResumeTime;	// 80 = 0x50
    double _applicationSuspendTime;	// 88 = 0x58
    double _headingUpdateTime;	// 96 = 0x60
    double _locationAccuracyUpdateTime;	// 104 = 0x68
    double _locationUpdateStartTime;	// 112 = 0x70
    _Bool _isReceivingAccurateLocations;	// 120 = 0x78
    NSMutableArray *_waitForAccurateLocationsHandlers;	// 128 = 0x80
    NSTimer *_waitForAccurateLocationsTimer;	// 136 = 0x88
    double _lastLocationReportTime;	// 144 = 0x90
    GEOLocationShifter *_locationShifter;	// 152 = 0x98
    CLHeading *_throttledHeading;	// 160 = 0xa0
    CLHeading *_heading;	// 168 = 0xa8
    NSTimer *_headingThrottlingTimer;	// 176 = 0xb0
    CDUnknownBlockType _networkActivity;	// 184 = 0xb8
    _Bool _enabled;	// 192 = 0xc0
    _Bool _useCourseForHeading;	// 193 = 0xc1
    double _lastVehicleHeading;	// 200 = 0xc8
    double _lastVehicleSpeed;	// 208 = 0xd0
    double _lastVehicleHeadingUpdateTime;	// 216 = 0xd8
    double _lastVehicleSpeedUpdateTime;	// 224 = 0xe0
    int _consecutiveOutOfCourseCount;	// 232 = 0xe8
    double _navCourse;	// 240 = 0xf0
    CDUnknownBlockType _locationCorrector;	// 248 = 0xf8
    double _minimumLocationUpdateInterval;	// 256 = 0x100
    _Bool _continuedAfterBecomingInactive;	// 264 = 0x108
    _Bool _suspended;	// 265 = 0x109
    NSMutableArray *_recentLocationUpdateIntervals;	// 272 = 0x110
    NSLock *_lastLocationLock;	// 280 = 0x118
    NSLock *_observersLock;	// 288 = 0x120
    int _accuracyAuthorizationState;	// 296 = 0x128
    _Bool _temporaryPreciseLocationAuthorizationPromptShown;	// 300 = 0x12c
    geo_isolater *_accuracyAuthorizationIsolater;	// 304 = 0x130
    _Bool _hasCustomDesiredAccuracy;	// 312 = 0x138
    _Bool _continuesWhileInactive;	// 313 = 0x139
    _Bool _logStartStopLocationUpdates;	// 314 = 0x13a
    NSError *_locationError;	// 320 = 0x140
}

+ (id)timeoutError;	// IMP=0x000000000004ebd9
+ (id)sharedLocationManager;	// IMP=0x0000000000047c32
+ (void)setCanMonitorWiFiStatus:(_Bool)arg1;	// IMP=0x0000000000047c2c
- (void).cxx_destruct;	// IMP=0x000000000004ecf5
@property(nonatomic) _Bool logStartStopLocationUpdates; // @synthesize logStartStopLocationUpdates=_logStartStopLocationUpdates;
@property(nonatomic) double minimumLocationUpdateInterval; // @synthesize minimumLocationUpdateInterval=_minimumLocationUpdateInterval;
@property(readonly, nonatomic, getter=wasLastLocationPushed) _Bool lastLocationPushed; // @synthesize lastLocationPushed=_lastLocationPushed;
@property(copy, nonatomic) CDUnknownBlockType locationCorrector; // @synthesize locationCorrector=_locationCorrector;
@property(readonly, nonatomic) double navigationCourse; // @synthesize navigationCourse=_navCourse;
@property(nonatomic) _Bool continuesWhileInactive; // @synthesize continuesWhileInactive=_continuesWhileInactive;
@property(nonatomic) _Bool useCourseForHeading; // @synthesize useCourseForHeading=_useCourseForHeading;
@property(nonatomic, getter=isEnabled) _Bool enabled; // @synthesize enabled=_enabled;
@property(retain, nonatomic) id <MNLocationRecorder> locationRecorder; // @synthesize locationRecorder=_locationRecorder;
@property(retain, nonatomic) CLHeading *throttledHeading; // @synthesize throttledHeading=_throttledHeading;
@property(readonly, nonatomic) CLHeading *heading; // @synthesize heading=_heading;
@property(copy, nonatomic) CDUnknownBlockType networkActivity; // @synthesize networkActivity=_networkActivity;
@property(readonly, nonatomic) NSError *locationError; // @synthesize locationError=_locationError;
@property(readonly, nonatomic) _Bool isLastLocationStale; // @synthesize isLastLocationStale=_isLastLocationStale;
- (void)stopVehicleHeadingUpdate;	// IMP=0x000000000004eb9c
- (void)startVehicleHeadingUpdate;	// IMP=0x000000000004eb5f
- (void)stopVehicleSpeedUpdate;	// IMP=0x000000000004eb22
- (void)startVehicleSpeedUpdate;	// IMP=0x000000000004eae5
- (void)stopHeadingUpdateWithObserver:(id)arg1;	// IMP=0x000000000004ea64
- (void)startHeadingUpdateWithObserver:(id)arg1;	// IMP=0x000000000004e9b9
- (void)_setTrackingHeading:(_Bool)arg1;	// IMP=0x000000000004e8f9
- (id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(CDUnknownBlockType)arg2 timeout:(double)arg3 maxLocationAge:(double)arg4;	// IMP=0x000000000004e87c
- (id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(CDUnknownBlockType)arg2 timeout:(double)arg3;	// IMP=0x000000000004e809
- (id)singleLocationUpdateWithDesiredAccuracy:(double)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000000004e7a3
- (id)singleLocationUpdateWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000004e747
- (void)_waitForAccurateLocationsTimerFired:(id)arg1;	// IMP=0x000000000004e678
- (void)waitForAccurateLocationWithTimeout:(double)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x000000000004e4d8
- (id)observersDescription;	// IMP=0x000000000004e2bb
- (void)stopLocationUpdateWithObserver:(id)arg1;	// IMP=0x000000000004e096
- (void)startLocationUpdateWithObserver:(id)arg1;	// IMP=0x000000000004e079
- (void)_startLocationUpdateWithObserver:(id)arg1 desiredAccuracy:(double)arg2;	// IMP=0x000000000004daeb
- (void)stopListeningForLocationUpdates:(id)arg1;	// IMP=0x000000000004da6f
- (void)listenForLocationUpdates:(id)arg1;	// IMP=0x000000000004d9bb
- (void)locationProvider:(id)arg1 didUpdateVehicleHeading:(double)arg2 timestamp:(id)arg3;	// IMP=0x000000000004d711
- (void)locationProvider:(id)arg1 didUpdateVehicleSpeed:(double)arg2 timestamp:(id)arg3;	// IMP=0x000000000004d467
- (void)locationProviderDidResumeLocationUpdates:(id)arg1;	// IMP=0x000000000004d34f
- (void)locationProviderDidPauseLocationUpdates:(id)arg1;	// IMP=0x000000000004d237
- (_Bool)locationProviderShouldPauseLocationUpdates:(id)arg1;	// IMP=0x000000000004cf53
- (void)locationProviderDidChangeAuthorizationStatus:(id)arg1;	// IMP=0x000000000004cd18
- (void)locationProvider:(id)arg1 didUpdateHeading:(id)arg2;	// IMP=0x000000000004cc2b
- (void)locationProvider:(id)arg1 didReceiveError:(id)arg2;	// IMP=0x000000000004cac1
- (void)_setIsReceivingAccurateLocations:(_Bool)arg1;	// IMP=0x000000000004c8cf
- (void)_locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3;	// IMP=0x000000000004c24c
- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2 lastKnownNavCourse:(double)arg3;	// IMP=0x000000000004b794
- (void)locationProvider:(id)arg1 didUpdateLocation:(id)arg2;	// IMP=0x000000000004b77a
- (void)pushLocation:(id)arg1;	// IMP=0x000000000004b748
- (_Bool)_shouldAllowLocationUpdateInterval:(double)arg1;	// IMP=0x000000000004b2b5
- (void)dismissHeadingCalibrationDisplay;	// IMP=0x000000000004b278
- (void)dampenGPSLocationAccuracy:(id *)arg1;	// IMP=0x000000000004b05a
@property(readonly, nonatomic) double timeScale;
@property(readonly, nonatomic) double expectedGpsUpdateInterval;
@property(nonatomic) long long activityType;
@property(nonatomic) _Bool fusionInfoEnabled;
@property(nonatomic) _Bool matchInfoEnabled;
@property(nonatomic) double distanceFilter;
@property(nonatomic) double desiredAccuracy;
- (_Bool)isLocationServicesPossiblyAvailable:(id *)arg1;	// IMP=0x000000000004aa0f
- (void)_setTrackingLocation:(_Bool)arg1;	// IMP=0x000000000004a7ba
- (void)_syncLocationProviderWithTracking;	// IMP=0x000000000004a61b
- (void)reset;	// IMP=0x000000000004a5dc
- (void)_reportHeadingFailureWithError:(id)arg1;	// IMP=0x000000000004a473
- (void)_reportHeadingSuccess;	// IMP=0x000000000004a41c
- (void)_reportLocationReset;	// IMP=0x000000000004a403
- (void)_reportLocationSuccess;	// IMP=0x000000000004a3b8
- (void)_reportLocationFailureWithError:(id)arg1;	// IMP=0x0000000000049fdb
- (void)_reportLocationStatus:(SEL)arg1;	// IMP=0x0000000000049ebb
- (void)_suspend;	// IMP=0x0000000000049dbc
- (void)applicationWillResignActive:(id)arg1;	// IMP=0x0000000000049d77
- (void)applicationDidBecomeActive:(id)arg1;	// IMP=0x0000000000049ccd
- (void)resetAfterResumeIfNecessary;	// IMP=0x0000000000049c60
- (_Bool)_isTimeToResetOnResume;	// IMP=0x0000000000049c33
@property(readonly, nonatomic) _Bool hasLocation;
- (void)setHeading:(id)arg1;	// IMP=0x00000000000499ac
- (void)requestTemporaryPreciseLocationAuthorizationWithPurposeKey:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00000000000493e9
@property(readonly, nonatomic) double vehicleHeadingOrCourse;
@property(readonly, nonatomic) double currentVehicleSpeed;
@property(readonly, nonatomic) double currentVehicleHeading;
- (void)requestWhenInUseAuthorizationWithPrompt;	// IMP=0x0000000000049284
- (void)requestWhenInUseAuthorization;	// IMP=0x0000000000049247
@property(copy, nonatomic) CDUnknownBlockType authorizationRequestBlock;
@property(nonatomic) long long headingOrientation;
@property(readonly, nonatomic) GEOLocation *courseCorrectedLocation;
@property(readonly, nonatomic) GEOLocation *gridSnappedCurrentLocation;
@property(readonly, nonatomic) GEOLocation *currentLocation;
@property(readonly, nonatomic) double headingUpdateTimeInterval;
- (void)setLastLocation:(id)arg1;	// IMP=0x0000000000048e71
@property(readonly, nonatomic) CLLocation *lastProviderLocation;
@property(readonly, nonatomic) CLLocation *lastGoodLocation; // @synthesize lastGoodLocation=_lastGoodLocation;
@property(readonly, nonatomic) CLLocation *lastLocation;
@property(retain, nonatomic) id <MKLocationProvider> locationProvider;
@property(copy, nonatomic) NSString *effectiveBundleIdentifier;
@property(retain, nonatomic) NSBundle *effectiveBundle;
@property(nonatomic, getter=isLocationServicesPreferencesDialogEnabled) _Bool locationServicesPreferencesDialogEnabled;
@property(readonly, nonatomic) _Bool isTemporaryPreciseLocationAuthorizationPromptShown;
@property(readonly, nonatomic) _Bool isAuthorizedForPreciseLocation;
@property(readonly, nonatomic) _Bool isHeadingServicesAvailable;
@property(readonly, nonatomic) _Bool isLocationServicesPossiblyAvailable;
@property(readonly, nonatomic) _Bool isLocationServicesAvailable;
@property(readonly, nonatomic) _Bool isLocationServicesRestricted;
@property(readonly, nonatomic) _Bool isLocationServicesDenied;
@property(readonly, nonatomic) _Bool isLocationServicesApproved;
@property(readonly, nonatomic, getter=isLocationServicesAuthorizationNeeded) _Bool locationServicesAuthorizationNeeded;
@property(readonly, nonatomic) _Bool isLocationServicesEnabled;
- (void)resourceManifestManager:(id)arg1 didChangeActiveTileGroup:(id)arg2 fromOldTileGroup:(id)arg3;	// IMP=0x0000000000048267
- (void)dealloc;	// IMP=0x0000000000048169
- (id)initWithCLLocationManager:(id)arg1;	// IMP=0x0000000000047d3b
- (id)init;	// IMP=0x0000000000047d27
- (void)_useDefaultCoreLocationProvider;	// IMP=0x0000000000047bf3

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

