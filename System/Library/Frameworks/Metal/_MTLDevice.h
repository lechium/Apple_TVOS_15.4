//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MTLCompiler, MTLDeviceFeatureQueries, MTLLoader, MTLTargetDeviceArchitecture, NSArray, NSDictionary, NSMutableArray, NSString;
@protocol MTLComputePipelineState, MTLRenderPipelineState, OS_dispatch_data, OS_dispatch_queue;

@interface _MTLDevice : NSObject
{
    CDStruct_0eb86347 _limits;	// 8 = 0x8
    void *_supportedGPUFamilies;	// 256 = 0x100
    NSObject<OS_dispatch_queue> *_serialQueue;	// 264 = 0x108
    NSObject<OS_dispatch_queue> *_pipelineSerializationQueue;	// 272 = 0x110
    NSObject<OS_dispatch_queue> *_concurrentQueue;	// 280 = 0x118
    _Bool _hasInitSerializationPaths;	// 288 = 0x120
    _Bool _shaderDebugInfoCaching;	// 289 = 0x121
    NSMutableArray *_progressTrackBufferStack;	// 296 = 0x128
    _Bool _needsEncoderTypeMatchingProgressBlits;	// 304 = 0x130
    id <MTLRenderPipelineState> _progressTrackRenderPipeline;	// 312 = 0x138
    id <MTLComputePipelineState> _progressTrackComputePipeline;	// 320 = 0x140
    MTLDeviceFeatureQueries *_featureQueries;	// 328 = 0x148
    unsigned long long _globalTraceObjectID;	// 336 = 0x150
    _Atomic int _commandQueueCount;	// 344 = 0x158
    void *_libraryBuilder;	// 352 = 0x160
    struct MTLPipelineLibraryBuilder *_pipelineLibraryBuilder;	// 360 = 0x168
    void *_pipelineCollection;	// 368 = 0x170
    NSString *_pipelineDescriptorsOutputFile;	// 376 = 0x178
    NSString *_librariesOutputDirectory;	// 384 = 0x180
    _Bool _collectAllLibraries;	// 392 = 0x188
    _Bool _gpuAssertionsEnabled;	// 393 = 0x189
    MTLLoader *_dynamicLoader;	// 400 = 0x190
    struct once_flag _initProgressTrackingOnceToken;	// 408 = 0x198
    NSDictionary *_pluginData;	// 416 = 0x1a0
    NSObject<OS_dispatch_data> *_serializedPluginData;	// 424 = 0x1a8
    unsigned long long _commandBufferErrorOptions;	// 432 = 0x1b0
}

+ (_Bool)featureProfile:(unsigned long long)arg1 supportsFeatureSet:(unsigned long long)arg2;	// IMP=0x0000000000037286
+ (_Bool)useNewPrimitiveRestartBehavior;	// IMP=0x0000000000037273
- (id).cxx_construct;	// IMP=0x0000000000038aeb
@property(nonatomic) unsigned long long commandBufferErrorOptions; // @synthesize commandBufferErrorOptions=_commandBufferErrorOptions;
@property _Bool shaderDebugInfoCaching; // @synthesize shaderDebugInfoCaching=_shaderDebugInfoCaching;
@property(readonly) NSObject<OS_dispatch_queue> *concurrentQueue; // @synthesize concurrentQueue=_concurrentQueue;
@property(readonly) NSObject<OS_dispatch_queue> *serialQueue; // @synthesize serialQueue=_serialQueue;
@property(readonly) unsigned long long globalTraceObjectID; // @synthesize globalTraceObjectID=_globalTraceObjectID;
@property(copy, nonatomic) NSDictionary *pluginData;
- (void)deserializeCompileTimeStats:(id)arg1 addToDictionary:(id)arg2;	// IMP=0x0000000000038a42
@property(readonly, getter=isPlacementHeapSupported) _Bool placementHeapSupported; // @dynamic placementHeapSupported;
- (_Bool)supportsCounterSampling:(unsigned long long)arg1;	// IMP=0x0000000000038a17
- (void)sampleTimestamps:(unsigned long long *)arg1 gpuTimestamp:(unsigned long long *)arg2;	// IMP=0x0000000000038a09
- (id)resolveCounters:(id)arg1 withRange:(struct _NSRange)arg2;	// IMP=0x0000000000038a01
- (id)newCounterSampleBufferWithDescriptor:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000389f9
@property(readonly) NSArray *counterSets; // @dynamic counterSets;
@property(getter=areGPUAssertionsEnabled, setter=setGPUAssertionsEnabled:) _Bool gpuAssertionsEnabled;
- (id)newSharedEventWithMachPort:(unsigned int)arg1;	// IMP=0x00000000000389d1
- (id)newSharedEventWithHandle:(id)arg1;	// IMP=0x00000000000389c9
- (id)newSharedEvent;	// IMP=0x00000000000389c1
- (id)newLateEvalEvent;	// IMP=0x00000000000389b9
- (id)newEvent;	// IMP=0x00000000000389b1
- (id)newArgumentEncoderWithLayout:(id)arg1;	// IMP=0x000000000003899f
- (id)newArgumentEncoderWithArguments:(id)arg1;	// IMP=0x000000000003898b
- (id)newArgumentEncoderWithArguments:(id)arg1 structType:(id *)arg2;	// IMP=0x000000000003889c
@property(readonly) struct IndirectArgumentBufferCapabilities indirectArgumentBufferCapabilities; // @dynamic indirectArgumentBufferCapabilities;
- (void)getDefaultSamplePositions:(CDStruct_6e3f967a *)arg1 count:(unsigned long long)arg2;	// IMP=0x00000000000387a5
- (void)_purgeDevice;	// IMP=0x000000000003879f
- (id)newCommandQueueWithDescriptor:(id)arg1;	// IMP=0x0000000000038797
- (id)newCommandQueueWithMaxCommandBufferCount:(unsigned long long)arg1;	// IMP=0x000000000003873e
- (id)newCommandQueue;	// IMP=0x0000000000038708
- (void)_decrementCommandQueueCount;	// IMP=0x00000000000386d2
- (void)_incrementCommandQueueCount;	// IMP=0x00000000000386c1
@property(readonly) unsigned long long maxArgumentBufferSamplerCount;
- (unsigned long long)minLinearTextureAlignmentForPixelFormat:(unsigned long long)arg1;	// IMP=0x0000000000038650
- (unsigned long long)minimumLinearTextureAlignmentForPixelFormat:(unsigned long long)arg1;	// IMP=0x00000000000385a7
@property(readonly) unsigned long long deviceCreationFlags;
- (_Bool)supportsPrimitiveType:(unsigned long long)arg1;	// IMP=0x0000000000038592
- (_Bool)supportsTextureSampleCount:(unsigned long long)arg1;	// IMP=0x0000000000038580
- (void)getConstantSamplersBitmasks:(unsigned long long **)arg1 uniqueIdentifiers:(unsigned long long **)arg2 constantSamplerCount:(unsigned long long *)arg3 forComputeVariant:(id)arg4;	// IMP=0x000000000003856f
- (void)getConstantSamplersBitmasks:(unsigned long long **)arg1 uniqueIdentifiers:(unsigned long long **)arg2 constantSamplerCount:(unsigned long long *)arg3 forVertexVariant:(id)arg4 fragmentVariant:(id)arg5;	// IMP=0x000000000003855e
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)arg1 compileTimeOutput:(id)arg2;	// IMP=0x0000000000038556
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2 vertexCompileTimeOutput:(id)arg3 fragmentCompileTimeOutput:(id)arg4;	// IMP=0x000000000003854e
- (id)pipelinePerformanceStatisticsWithComputeVariant:(id)arg1;	// IMP=0x0000000000038546
- (id)pipelinePerformanceStatisticsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2;	// IMP=0x000000000003853e
- (CDStruct_596dc0d1)pipelineFlagsWithComputeVariant:(id)arg1;	// IMP=0x0000000000038536
- (CDStruct_7ce1aa5b)pipelineFlagsWithVertexVariant:(id)arg1 fragmentVariant:(id)arg2;	// IMP=0x000000000003852e
- (id)newComputePipelineWithDescriptor:(id)arg1 variant:(id)arg2 errorMessage:(id *)arg3;	// IMP=0x0000000000038510
- (id)newComputePipelineWithDescriptor:(id)arg1 variant:(id)arg2;	// IMP=0x0000000000038508
- (id)newRenderPipelineWithDescriptor:(id)arg1 vertexVariant:(id)arg2 fragmentVariant:(id)arg3 errorMessage:(id *)arg4;	// IMP=0x00000000000384f6
- (id)newRenderPipelineWithDescriptor:(id)arg1 vertexVariant:(id)arg2 fragmentVariant:(id)arg3;	// IMP=0x00000000000384ee
- (id)newVertexVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;	// IMP=0x000000000003849c
- (id)newFragmentVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;	// IMP=0x000000000003844a
- (id)newComputeVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;	// IMP=0x00000000000383f8
- (id)vertexVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;	// IMP=0x00000000000383f0
- (id)fragmentVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;	// IMP=0x00000000000383e8
- (id)computeVariantWithCompilerOutput:(id)arg1 pipelineStatisticsOutput:(id)arg2;	// IMP=0x00000000000383e0
- (void)freeComputeFunctionKey:(void *)arg1 keySize:(unsigned long long)arg2;	// IMP=0x00000000000383da
- (void)freeComputeLibraryKey:(void *)arg1 libraryKeySize:(unsigned long long)arg2;	// IMP=0x00000000000383cd
- (void *)libraryKeyWithComputePipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 keySize:(unsigned long long *)arg3;	// IMP=0x00000000000383be
- (void *)computeFunctionKeyWithComputePipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 keySize:(unsigned long long *)arg3;	// IMP=0x00000000000383af
- (void)freeVertexFunctionKey:(void *)arg1 vertexKeySize:(unsigned long long)arg2;	// IMP=0x00000000000383a2
- (void)freeFragmentFunctionKey:(void *)arg1 fragmentKeySize:(unsigned long long)arg2;	// IMP=0x0000000000038395
- (void *)vertexFunctionKeyWithRenderPipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 nextStageVariant:(id)arg3 vertexKeySize:(unsigned long long *)arg4;	// IMP=0x0000000000038386
- (void *)fragmentFunctionKeyWithRenderPipelineDescriptor:(id)arg1 options:(unsigned long long)arg2 previousStateVariant:(id)arg3 fragmentKeySize:(unsigned long long *)arg4;	// IMP=0x0000000000038377
- (char *)getMeshFunctionId:(const void *)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;	// IMP=0x000000000003836f
- (char *)getObjectFunctionId:(const void *)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;	// IMP=0x0000000000038367
- (char *)getFragmentFunctionId:(const void *)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;	// IMP=0x000000000003835f
- (char *)getVertexFunctionId:(const void *)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;	// IMP=0x0000000000038357
- (char *)getComputeFunctionId:(const void *)arg1 compilerOptions:(char **)arg2 compilerOptionsSize:(unsigned long long)arg3;	// IMP=0x000000000003834f
- (void)freeTranslatedDriverCompilerOptions:(char **)arg1 compilerOptionsSize:(unsigned long long)arg2;	// IMP=0x0000000000038349
- (char **)newTranslatedDriverCompilerOptions:(id)arg1 compilerOptionsSize:(unsigned long long *)arg2;	// IMP=0x000000000003833a
@property(readonly) MTLCompiler *compiler;
- (void)newRenderPipelineStateWithTileDescriptor:(id)arg1 options:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000382a9
- (id)newRenderPipelineStateWithTileDescriptor:(id)arg1 options:(unsigned long long)arg2 reflection:(id *)arg3 error:(id *)arg4;	// IMP=0x0000000000038226
- (void)newComputePipelineStateWithDescriptor:(id)arg1 options:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000381d3
- (void)newComputePipelineStateWithDescriptor:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000038145
- (id)newComputePipelineStateWithDescriptor:(id)arg1 options:(unsigned long long)arg2 reflection:(id *)arg3 error:(id *)arg4;	// IMP=0x00000000000380ea
- (id)newComputePipelineStateWithDescriptor:(id)arg1 error:(id *)arg2;	// IMP=0x000000000003809e
- (void)newRenderPipelineStateWithDescriptor:(id)arg1 options:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x000000000003804b
- (void)newRenderPipelineStateWithDescriptor:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000037fbd
- (id)newRenderPipelineStateWithDescriptor:(id)arg1 options:(unsigned long long)arg2 reflection:(id *)arg3 error:(id *)arg4;	// IMP=0x0000000000037f62
- (id)newRenderPipelineStateWithDescriptor:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000037f16
@property(readonly) unsigned long long maxConstantBufferArguments;
@property(readonly) unsigned long long maxPredicatedNestingDepth;
@property(readonly) unsigned long long maxComputeAttributes;
@property(readonly) unsigned long long maxTextureBufferWidth;
@property(readonly) unsigned long long maxCustomSamplePositions;
@property(readonly) unsigned long long maxViewportCount;
@property(readonly) unsigned long long maxFenceInstances;
@property(readonly) unsigned long long maxIndirectSamplersPerDevice;
@property(readonly) unsigned long long maxIndirectSamplers;
@property(readonly) unsigned long long maxIndirectTextures;
@property(readonly) unsigned long long maxIndirectBuffers;
@property(readonly) unsigned long long maxTessellationFactor;
@property(readonly) unsigned long long maxInterpolatedComponents;
@property(readonly) unsigned long long maxComputeThreadgroupMemoryAlignmentBytes;
@property(readonly) unsigned long long maxFunctionConstantIndices;
@property(readonly) unsigned long long deviceLinearReadOnlyTextureAlignmentBytes;
@property(readonly) unsigned long long deviceLinearTextureAlignmentBytes;
@property(readonly) unsigned long long iosurfaceReadOnlyTextureAlignmentBytes;
@property(readonly) unsigned long long iosurfaceTextureAlignmentBytes;
@property(readonly) unsigned long long linearTextureAlignmentBytes;
@property(readonly) unsigned long long maxTextureLayers;
@property(readonly) unsigned long long maxTextureDimensionCube;
@property(readonly) unsigned long long maxTextureDepth3D;
@property(readonly) unsigned long long maxTextureHeight3D;
@property(readonly) unsigned long long maxTextureWidth3D;
@property(readonly) unsigned long long maxTextureHeight2D;
@property(readonly) unsigned long long maxTextureWidth2D;
@property(readonly) unsigned long long maxTextureWidth1D;
@property(readonly) unsigned long long minBufferNoCopyAlignmentBytes;
@property(readonly) unsigned long long minConstantBufferAlignmentBytes;
@property(readonly) unsigned long long maxVisibilityQueryOffset;
@property(readonly) float maxPointSize;
@property(readonly) float maxLineWidth;
@property(readonly) unsigned long long maxComputeThreadgroupMemory;
@property(readonly) unsigned long long maxTotalComputeThreadsPerThreadgroup;
@property(readonly) unsigned long long maxComputeLocalMemorySizes;
@property(readonly) unsigned long long maxComputeInlineDataSize;
@property(readonly) unsigned long long maxComputeSamplers;
@property(readonly) unsigned long long maxComputeTextures;
@property(readonly) unsigned long long maxComputeBuffers;
@property(readonly) unsigned long long maxFragmentInlineDataSize;
@property(readonly) unsigned long long maxFragmentSamplers;
@property(readonly) unsigned long long maxFragmentTextures;
@property(readonly) unsigned long long maxFragmentBuffers;
@property(readonly) unsigned long long maxInterpolants;
@property(readonly) unsigned long long maxVertexInlineDataSize;
@property(readonly) unsigned long long maxVertexSamplers;
@property(readonly) unsigned long long maxVertexTextures;
@property(readonly) unsigned long long maxVertexBuffers;
@property(readonly) unsigned long long maxVertexAttributes;
@property(readonly) unsigned long long maxColorAttachments;
@property(readonly) unsigned long long minTilePixels;
@property(readonly) unsigned long long maxTileInlineDataSize;
@property(readonly) unsigned long long maxTileSamplers;
@property(readonly) unsigned long long maxTileTextures;
@property(readonly) unsigned long long maxTileBuffers;
@property(readonly) unsigned long long linearTextureArrayAlignmentSlice;
@property(readonly) unsigned long long linearTextureArrayAlignmentBytes;
@property(readonly) unsigned long long maxFramebufferStorageBits;
@property(readonly) const CDStruct_0eb86347 *limits;
- (void)initLimits;	// IMP=0x00000000000373dc
- (_Bool)deviceSupportsFeatureSet:(unsigned long long)arg1;	// IMP=0x00000000000373d4
- (_Bool)deviceOrFeatureProfileSupportsFeatureSet:(unsigned long long)arg1;	// IMP=0x00000000000372eb
- (_Bool)supportsFeatureSet:(unsigned long long)arg1;	// IMP=0x00000000000372d9
- (_Bool)isMagicMipmapSupported;	// IMP=0x000000000003726b
- (id)newLibraryWithImageFilterFunctionsSPI:(id)arg1 imageFilterFunctionInfo:(const CDStruct_dbc1e4aa *)arg2 error:(id *)arg3;	// IMP=0x0000000000037259
- (id)newDagStringWithGraphs:(id)arg1;	// IMP=0x00000000000371eb
- (id)newLibraryWithDescriptorSPI:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000371d9
- (id)newLibraryWithDescriptor:(id)arg1 destinationBinaryArchive:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000371c7
- (void)newLibraryWithDescriptor:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000371b5
- (id)newLibraryWithDescriptor:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000371a3
- (id)newLibraryWithStitchedDescriptorSPI:(id)arg1 error:(id *)arg2;	// IMP=0x000000000003718c
- (id)newLibraryWithStitchedDescriptor:(id)arg1 destinationBinaryArchive:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000036fe7
- (void)newLibraryWithStitchedDescriptor:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000036d8c
- (id)newLibraryWithStitchedDescriptor:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000035f65
- (id)newLibraryWithDAG:(id)arg1 functions:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000035dbe
- (id)newComputePipelineStateWithImageFilterFunctionsSPI:(id)arg1 imageFilterFunctionInfo:(const CDStruct_dbc1e4aa *)arg2 error:(id *)arg3;	// IMP=0x0000000000035d30
- (void)newComputePipelineStateWithFunction:(id)arg1 options:(unsigned long long)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000035beb
- (id)newComputePipelineStateWithFunction:(id)arg1 options:(unsigned long long)arg2 reflection:(id *)arg3 error:(id *)arg4;	// IMP=0x0000000000035b6a
- (void)newComputePipelineStateWithFunction:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0000000000035a34
- (id)newComputePipelineStateWithFunction:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000359c6
- (_Bool)supportsTextureWriteFPRoundingMode:(long long)arg1;	// IMP=0x00000000000359b4
@property(readonly) long long defaultTextureWriteRoundingMode;
- (_Bool)supportsTextureWriteRoundingMode:(long long)arg1;	// IMP=0x00000000000359a0
@property(readonly, getter=isMsaa32bSupported) _Bool msaa32bSupported;
@property(readonly, getter=isBCTextureCompressionSupported) _Bool BCTextureCompressionSupported;
@property(readonly, getter=isFloat32FilteringSupported) _Bool float32FilteringSupported;
- (id)newDynamicLibraryWithURL:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;	// IMP=0x0000000000035922
- (id)newDynamicLibraryWithURL:(id)arg1 error:(id *)arg2;	// IMP=0x000000000003590b
- (id)newDynamicLibrary:(id)arg1 computeDescriptor:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000358b2
- (id)newDynamicLibrary:(id)arg1 error:(id *)arg2;	// IMP=0x000000000003585a
- (id)_newDynamicLibrary:(id)arg1 computeDescriptor:(id)arg2 error:(id *)arg3;	// IMP=0x000000000003558a
- (_Bool)validateDynamicLibrary:(id)arg1 state:(_Bool)arg2 error:(id *)arg3;	// IMP=0x0000000000035470
- (_Bool)validateDynamicLibraryURL:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000353de
- (id)newDynamicLibraryError:(unsigned long long)arg1 message:(id)arg2;	// IMP=0x0000000000035371
- (id)newBinaryArchiveWithDescriptor:(id)arg1 error:(id *)arg2;	// IMP=0x000000000003532f
- (id)newBinaryLibraryWithOptions:(unsigned long long)arg1 url:(id)arg2 error:(id *)arg3;	// IMP=0x00000000000352ac
- (void)dumpPipelineDescriptorsIfRequested;	// IMP=0x0000000000035261
- (id)endCollectingPipelineDescriptors;	// IMP=0x00000000000351de
- (void)startCollectingPipelineDescriptorsFromLibrary:(id)arg1 filePath:(id)arg2;	// IMP=0x000000000003516b
- (void)startCollectingPipelineDescriptorsUsingPrefixForNames:(id)arg1;	// IMP=0x00000000000350f0
- (void)startCollectingPipelineDescriptors;	// IMP=0x000000000003508e
- (unsigned long long)optionsForPipelineLibrarySerialization;	// IMP=0x0000000000035083
- (void)registerTileRenderPipelineDescriptor:(id)arg1;	// IMP=0x000000000003503d
- (void)registerComputePipelineDescriptor:(id)arg1;	// IMP=0x0000000000034ff7
- (void)registerRenderPipelineDescriptor:(id)arg1;	// IMP=0x0000000000034fb1
- (id)newPipelineLibraryWithFilePath:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000034efa
- (id)newDynamicLibraryFromURL:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000034ee8
- (id)newLibraryWithCIFilters:(id)arg1 imageFilterFunctionInfo:(const CDStruct_dbc1e4aa *)arg2 error:(id *)arg3;	// IMP=0x0000000000034ece
- (void)newLibraryWithSource:(id)arg1 options:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0000000000034e31
- (id)newLibraryWithSource:(id)arg1 options:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000034c33
- (id)newLibraryWithData:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000034bdd
- (id)newDefaultLibraryWithBundle:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000034ae7
- (id)newDefaultLibrary;	// IMP=0x0000000000034a5c
- (CDStruct_c0454aff)pipelineCacheStats;	// IMP=0x0000000000034a31
- (CDStruct_c0454aff)libraryCacheStats;	// IMP=0x0000000000034a06
- (_Bool)copyShaderCacheToPath:(id)arg1;	// IMP=0x00000000000349d5
- (void)unloadShaderCaches;	// IMP=0x000000000003499d
- (id)productName;	// IMP=0x0000000000034990
- (id)familyName;	// IMP=0x0000000000034983
- (id)vendorName;	// IMP=0x0000000000034976
- (void)compilerPropagatesThreadPriority:(_Bool)arg1;	// IMP=0x0000000000034970
- (id)newStructTypeWithSerializedData:(id)arg1;	// IMP=0x00000000000348c3
- (id)serializeStructType:(id)arg1;	// IMP=0x00000000000348ac
- (id)serializeStructType:(id)arg1 version:(unsigned int)arg2;	// IMP=0x00000000000347ec
- (id)newComputePipelineDescriptorWithSerializedData:(id)arg1 deserializationContext:(id)arg2;	// IMP=0x0000000000034798
- (id)serializeComputePipelineDescriptor:(id)arg1;	// IMP=0x00000000000346be
- (id)newRenderPipelineDescriptorWithSerializedData:(id)arg1 deserializationContext:(id)arg2;	// IMP=0x000000000003466a
- (id)serializeRenderPipelineDescriptor:(id)arg1;	// IMP=0x0000000000034563
- (id)_deviceWrapper;	// IMP=0x000000000003455b
- (void)_setDeviceWrapper:(id)arg1;	// IMP=0x0000000000034555
@property(readonly) NSString *name;
- (id)reportLeaks;	// IMP=0x0000000000034301
- (_Bool)isQuadDataSharingSupported;	// IMP=0x00000000000342ea
@property(readonly, getter=areRasterOrderGroupsSupported) _Bool rasterOrderGroupsSupported;
@property(readonly) unsigned long long argumentBuffersSupport;
@property(readonly) unsigned long long readWriteTextureSupport;
- (id)newLibraryWithURL:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000034183
- (void)releaseCacheEntry:(struct MTLLibraryContainer *)arg1;	// IMP=0x000000000003416f
- (id)newLibraryWithFile:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000034123
- (void)allowLibrariesFromOtherPlatforms;	// IMP=0x00000000000340ed
- (_Bool)isCollectingPipelines;	// IMP=0x00000000000340c5
- (_Bool)isCollectingLibraries;	// IMP=0x0000000000034090
- (void)initSerializationPaths;	// IMP=0x0000000000033f72
- (void *)getShaderCacheKeys;	// IMP=0x0000000000033f47
- (id)newFunctionWithGLIR:(void *)arg1 inputsDescription:(id)arg2 functionType:(unsigned long long)arg3;	// IMP=0x0000000000033f0c
- (id)newFunctionWithGLIR:(void *)arg1 functionType:(unsigned long long)arg2;	// IMP=0x0000000000033ed4
- (id)newFunctionWithGLESIR:(void *)arg1 inputsDescription:(id)arg2 functionType:(unsigned long long)arg3;	// IMP=0x0000000000033ec1
- (id)newFunctionWithGLESIR:(void *)arg1 functionType:(unsigned long long)arg2;	// IMP=0x0000000000033eac
- (id)newFunctionWithGLCoreIR:(void *)arg1 inputsDescription:(id)arg2 functionType:(unsigned long long)arg3;	// IMP=0x0000000000033e9c
- (id)newFunctionWithGLCoreIR:(void *)arg1 functionType:(unsigned long long)arg2;	// IMP=0x0000000000033e8a
- (id)description;	// IMP=0x0000000000033e76
- (id)formattedDescription:(unsigned long long)arg1;	// IMP=0x0000000000033d60
- (unsigned long long)getSupportedCommandBufferErrorOptions;	// IMP=0x0000000000033d58
- (_Bool)areProgrammableSamplePositionsSupported;	// IMP=0x0000000000033d50
- (id)loadDynamicLibrariesForFunction:(id)arg1 insertLibraries:(id)arg2 options:(unsigned long long)arg3 error:(id *)arg4;	// IMP=0x0000000000033d23
- (id)loadDynamicLibrariesForFunction:(id)arg1 insertLibraries:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000033d0b
- (id)loadDynamicLibrariesForComputeDescriptor:(id)arg1 options:(unsigned long long)arg2 error:(id *)arg3;	// IMP=0x0000000000033ca2
- (id)loadDynamicLibrariesForComputeDescriptor:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000033c8b
@property(readonly) MTLTargetDeviceArchitecture *targetDeviceArchitecture;
@property(readonly) const struct MTLTargetDeviceArch *targetDeviceInfo;
- (_Bool)supportsFamily:(long long)arg1;	// IMP=0x0000000000033c4b
- (void)initGPUFamilySupport;	// IMP=0x0000000000032896
- (void)initFeatureQueries;	// IMP=0x000000000003283c
- (Class)featureQueryClass;	// IMP=0x000000000003282b
- (void)dealloc;	// IMP=0x000000000003270b
- (void)initProgressTracking;	// IMP=0x00000000000326c0
- (id)init;	// IMP=0x000000000003257c
@property(readonly, nonatomic) _Bool supportsStackOverflowErrorCode;
@property(readonly, nonatomic) _Bool supportsCommandBufferJump;
@property(readonly, nonatomic) _Bool supportsFloat16InfNanFiltering;
@property(readonly, nonatomic) _Bool supportsFloat16BCubicFiltering;
@property(readonly, nonatomic) _Bool supportsForceSeamsOnCubemaps;
@property(readonly, nonatomic) _Bool supportsTexture2DMultisampleArray;
@property(readonly, nonatomic) _Bool supportsDepthClipModeClampExtended;
@property(readonly, nonatomic) _Bool supportsSIMDReduction;
@property(readonly, nonatomic) _Bool supportsMirrorClampToEdgeSamplerMode;
@property(readonly, nonatomic) _Bool supportsBlackOrWhiteSamplerBorderColors;
@property(readonly, nonatomic) _Bool supportsRenderDynamicLibraries;
@property(readonly, nonatomic) _Bool supportsStatefulDynamicLibraries;
@property(readonly, nonatomic) _Bool supportsDynamicLibraries;
@property(readonly, nonatomic) _Bool supportsIndirectWritableTextures;
@property(readonly, nonatomic) _Bool supportsWritableArrayOfTextures;
@property(readonly, nonatomic) _Bool supportsSIMDShufflesAndBroadcast;
@property(readonly, nonatomic) _Bool supportsShaderMinLODClamp;
@property(readonly, nonatomic) _Bool supportsSIMDGroup;
@property(readonly, nonatomic) _Bool supportsUnalignedVertexFetch;
@property(readonly, nonatomic) _Bool supportsFP32TessFactors;
@property(readonly, nonatomic) _Bool supportsStencilFeedback;
@property(readonly, nonatomic) _Bool supportsMSAAStencilResolveFilter;
@property(readonly, nonatomic) _Bool supportsIndirectTessellation;
@property(readonly, nonatomic) _Bool supportsViewportAndScissorArray;
@property(readonly, nonatomic) _Bool supportsLayeredRendering;
@property(readonly, nonatomic) _Bool supports2DLinearTexArraySPI;
@property(readonly, nonatomic) _Bool supportsSeparateVisibilityAndShadingRate;
@property(readonly, nonatomic) _Bool supportsNonSquareTileShaders;
@property(readonly, nonatomic) _Bool supportsLinearTexture2DArray;
@property(readonly, nonatomic) _Bool supportsRasterOrderGroupsColorAttachment;
@property(readonly, nonatomic) _Bool supportsRasterOrderGroups;
@property(readonly, nonatomic) _Bool supportsRenderPassWithoutRenderTarget;
@property(readonly, nonatomic) _Bool supportsConcurrentComputeDispatch;
@property(readonly, nonatomic) _Bool supportsQuadShufflesAndBroadcast;
@property(readonly, nonatomic) _Bool supportsTextureCubeArray;
@property(readonly, nonatomic) _Bool supportsReadWriteTextureCubeArguments;
@property(readonly, nonatomic) _Bool supportsReadWriteTextureArguments;
@property(readonly, nonatomic) _Bool supportsNonUniformThreadgroupSize;
@property(readonly, nonatomic) _Bool supportsMipLevelsSmallerThanBlockSize;
@property(readonly, nonatomic) _Bool supportsPostDepthCoverage;
@property(readonly, nonatomic) _Bool supportsNativeHardwareFP16;
@property(readonly, nonatomic) _Bool supportsImageBlockSampleCoverageControl;
@property(readonly, nonatomic) _Bool supportsTileShaders;
@property(readonly, nonatomic) _Bool supportsImageBlocks;
@property(readonly, nonatomic) _Bool supportsRenderTextureWrites;
@property(readonly, nonatomic) _Bool supportsQuadGroup;
@property(readonly, nonatomic) _Bool supportsMemoryOrderAtomics;
@property(readonly, nonatomic) _Bool supportsAlphaYUVFormats;
@property(readonly, nonatomic) _Bool supportsTextureSwizzle;
@property(readonly, nonatomic) _Bool supportsTextureOutOfBoundsReads;
@property(readonly, nonatomic) _Bool supportsNorm16BCubicFiltering;
@property(readonly, nonatomic) _Bool supportsIndirectTextures;
@property(readonly, nonatomic) _Bool supportsIndirectStageInRegion;
@property(readonly, nonatomic) _Bool supportsCMPIndirectCommandBuffers;
@property(readonly, nonatomic) _Bool supportsGFXIndirectCommandBuffers;
@property(readonly, nonatomic) _Bool supportsMSAADepthResolveFilter;
@property(readonly, nonatomic) _Bool supportsMSAAStencilResolve;
@property(readonly, nonatomic) _Bool supportsMSAADepthResolve;
@property(readonly, nonatomic) _Bool supportsSamplerCompareFunction;
@property(readonly, nonatomic) _Bool supportsMutableTier1ArgumentBuffers;
@property(readonly, nonatomic) _Bool supportsCombinedMSAAStoreAndResolveAction;
@property(readonly, nonatomic) _Bool supportsArrayOfSamplers;
@property(readonly, nonatomic) _Bool supportsArrayOfTextures;
@property(readonly, nonatomic) _Bool supportsReadWriteBufferArguments;
@property(readonly, nonatomic) _Bool supportsTessellation;
@property(readonly, nonatomic) _Bool supportsIndirectDrawAndDispatch;
@property(readonly, nonatomic) _Bool supportsBaseVertexInstanceDrawing;
@property(readonly, nonatomic) _Bool supportsCountingOcclusionQuery;
@property(readonly, nonatomic) _Bool supportsFragmentBufferWrites;
@property(readonly, nonatomic) _Bool supportsExtendedXR10Formats;
@property(readonly, nonatomic) _Bool supports3DASTCTextures;
@property(readonly, nonatomic) _Bool supportsPacked32TextureBufferWrites;
@property(readonly, nonatomic) _Bool supportsDepthClipMode;
@property(readonly, nonatomic) _Bool supportsSRGBwrites;
@property(readonly, nonatomic) _Bool supportsPublicXR10Formats;
@property(readonly, nonatomic) _Bool supportsExtendedYUVFormats;
@property(readonly, nonatomic) _Bool supportsASTCTextureCompression;
@property(readonly, nonatomic) _Bool supportsBinaryLibraries;
@property(readonly, nonatomic) _Bool supportsBinaryArchives;
@property(readonly, nonatomic) _Bool supportsIABHashForTools;
@property(readonly, nonatomic) _Bool supportsDynamicControlPointCount;
@property(readonly, nonatomic) _Bool supportsRenderTargetTextureRotation;
@property(readonly, nonatomic) _Bool supportsCompressedTextureViewSPI;
@property(readonly, nonatomic) _Bool supportsGPUStatistics;
@property(readonly, nonatomic) _Bool supportsSeparateDepthStencil;
@property(readonly, nonatomic) _Bool supportsRelaxedTextureViewRequirements;
@property(readonly, nonatomic) _Bool supportsShaderLODAverage;
@property(readonly, nonatomic) _Bool supportsInvariantVertexPosition;
@property(readonly, nonatomic) _Bool supportsFastMathInfNaNPropagation;
@property(readonly, nonatomic) _Bool supportsMemorylessRenderTargets;
@property(readonly, nonatomic) _Bool supportsRenderToLinearTextures;
@property(readonly, nonatomic) _Bool supportsProgrammableBlending;
@property(readonly, nonatomic) _Bool supportsBufferWithIOSurface;
@property(readonly, nonatomic) _Bool supportsFragmentOnlyEncoders;
@property(readonly, nonatomic) _Bool supportsPipelineLibraries;
@property(readonly, nonatomic) _Bool supportsLinearTextureFromSharedBuffer;
@property(readonly, nonatomic) _Bool supportsSharedStorageTextures;
@property(readonly, nonatomic) _Bool supportsSharedStorageHeapResources;
@property(readonly, nonatomic) _Bool supportsNonPrivateMSAATextures;
@property(readonly, nonatomic) _Bool supportsNonPrivateDepthStencilTextures;
@property(readonly, nonatomic) _Bool supportsLimitedYUVFormats;
@property(readonly, nonatomic) _Bool supportsBufferPrefetchStatistics;
@property(readonly, nonatomic) _Bool supportsSharedTextureHandles;
@property(readonly, nonatomic) _Bool supportsNonZeroTextureWriteLOD;
@property(readonly, nonatomic) _Bool supportsLateEvalEvent;
@property(readonly, nonatomic) _Bool supportsInt64;
@property(readonly, nonatomic) _Bool supportsPullModelInterpolation;
@property(readonly, nonatomic) _Bool supportsOpenCLTextureWriteSwizzles;
@property(readonly, nonatomic) _Bool supportsPlacementHeaps;
@property(readonly, nonatomic) _Bool supports32BitFloatFiltering;
@property(readonly, nonatomic) _Bool supports32BitMSAA;
@property(readonly, nonatomic) _Bool supports32bpcMSAATextures;
@property(readonly, nonatomic) _Bool supportsTLS;
@property(readonly, nonatomic) _Bool supportsGlobalVariableRelocationCompute;
@property(readonly, nonatomic) _Bool supportsGlobalVariableRelocationRender;
@property(readonly, nonatomic) _Bool supportsGlobalVariableRelocation;
@property(readonly, nonatomic) _Bool supportsPrimitiveRestartOverride;
@property(readonly, nonatomic) _Bool supports3DBCTextures;
@property(readonly, nonatomic) _Bool supportsBCTextureCompression;
@property(readonly, nonatomic) _Bool supportsCustomBorderColor;
@property(readonly, nonatomic) _Bool supportsLargeFramebufferConfigs;
@property(readonly, nonatomic) _Bool supportsProgrammableSamplePositions;
@property(readonly, nonatomic) _Bool supportsStreamingCodecSignaling;
@property(readonly, nonatomic) _Bool supportsReadWriteTextureArgumentsTier2;
@property(readonly, nonatomic) _Bool supportsArgumentBuffersTier2;
@property(readonly, nonatomic) _Bool supportsRenderMemoryBarrier;
@property(readonly, nonatomic) _Bool supportsComputeMemoryBarrier;
@property(readonly, nonatomic) _Bool supportsBufferlessClientStorageTexture;

// Remaining properties
@property(readonly) unsigned long long maxBufferLength; // @dynamic maxBufferLength;

@end

