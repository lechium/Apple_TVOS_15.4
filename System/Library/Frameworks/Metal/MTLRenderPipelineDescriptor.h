//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <Metal/NSCopying-Protocol.h>

@class MTLLinkedFunctions, MTLPipelineBufferDescriptorArray, MTLRenderPipelineColorAttachmentDescriptorArray, MTLVertexDescriptor, NSArray, NSString;
@protocol MTLFunction;

@interface MTLRenderPipelineDescriptor : NSObject <NSCopying>
{
    NSArray *_vertexPreloadedLibraries;	// 8 = 0x8
    NSArray *_fragmentPreloadedLibraries;	// 16 = 0x10
}

+ (id)allocWithZone:(struct _NSZone *)arg1;	// IMP=0x0000000000085cd2
+ (id)alloc;	// IMP=0x0000000000085cc8
@property(copy, nonatomic) NSArray *fragmentPreloadedLibraries; // @synthesize fragmentPreloadedLibraries=_fragmentPreloadedLibraries;
@property(copy, nonatomic) NSArray *vertexPreloadedLibraries; // @synthesize vertexPreloadedLibraries=_vertexPreloadedLibraries;
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x0000000000085d43
- (void)reset;	// IMP=0x0000000000085d3d

// Remaining properties
@property(nonatomic, getter=isAlphaToCoverageEnabled) _Bool alphaToCoverageEnabled; // @dynamic alphaToCoverageEnabled;
@property(nonatomic, getter=isAlphaToOneEnabled) _Bool alphaToOneEnabled; // @dynamic alphaToOneEnabled;
@property(copy, nonatomic) NSArray *binaryArchives; // @dynamic binaryArchives;
@property(readonly) MTLRenderPipelineColorAttachmentDescriptorArray *colorAttachments; // @dynamic colorAttachments;
@property(nonatomic) unsigned long long depthAttachmentPixelFormat; // @dynamic depthAttachmentPixelFormat;
@property(readonly) MTLPipelineBufferDescriptorArray *fragmentBuffers; // @dynamic fragmentBuffers;
@property(retain, nonatomic) id <MTLFunction> fragmentFunction; // @dynamic fragmentFunction;
@property(copy, nonatomic) MTLLinkedFunctions *fragmentLinkedFunctions; // @dynamic fragmentLinkedFunctions;
@property(nonatomic) unsigned long long inputPrimitiveTopology; // @dynamic inputPrimitiveTopology;
@property(copy, nonatomic) NSString *label; // @dynamic label;
@property(nonatomic) unsigned long long maxTessellationFactor; // @dynamic maxTessellationFactor;
@property(nonatomic) unsigned long long rasterSampleCount; // @dynamic rasterSampleCount;
@property(nonatomic, getter=isRasterizationEnabled) _Bool rasterizationEnabled; // @dynamic rasterizationEnabled;
@property(nonatomic) unsigned long long sampleCount; // @dynamic sampleCount;
@property(nonatomic) unsigned long long stencilAttachmentPixelFormat; // @dynamic stencilAttachmentPixelFormat;
@property(nonatomic) _Bool supportIndirectCommandBuffers; // @dynamic supportIndirectCommandBuffers;
@property(nonatomic) unsigned long long tessellationControlPointIndexType; // @dynamic tessellationControlPointIndexType;
@property(nonatomic) unsigned long long tessellationFactorFormat; // @dynamic tessellationFactorFormat;
@property(nonatomic, getter=isTessellationFactorScaleEnabled) _Bool tessellationFactorScaleEnabled; // @dynamic tessellationFactorScaleEnabled;
@property(nonatomic) unsigned long long tessellationFactorStepFunction; // @dynamic tessellationFactorStepFunction;
@property(nonatomic) unsigned long long tessellationOutputWindingOrder; // @dynamic tessellationOutputWindingOrder;
@property(nonatomic) unsigned long long tessellationPartitionMode; // @dynamic tessellationPartitionMode;
@property(readonly) MTLPipelineBufferDescriptorArray *vertexBuffers; // @dynamic vertexBuffers;
@property(copy, nonatomic) MTLVertexDescriptor *vertexDescriptor; // @dynamic vertexDescriptor;
@property(retain, nonatomic) id <MTLFunction> vertexFunction; // @dynamic vertexFunction;
@property(copy, nonatomic) MTLLinkedFunctions *vertexLinkedFunctions; // @dynamic vertexLinkedFunctions;

@end

