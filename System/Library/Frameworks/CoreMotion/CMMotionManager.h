//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CMAccelerometerData, CMAmbientPressureData, CMDeviceMotion, CMGyroData, CMMagnetometerData;

@interface CMMotionManager : NSObject
{
    id _internal;	// 8 = 0x8
}

+ (_Bool)hasRunMiniCal;	// IMP=0x00000000000f7523
+ (CDStruct_8d89f794)gyroCalibrationDatabaseGetBiasFitAndEstimate:(CDStruct_31142d93 *)arg1 atTemperature:(float)arg2;	// IMP=0x00000000000f7443
+ (CDStruct_8d89f794)gyroCalibrationDatabaseGetBiasFit;	// IMP=0x00000000000f73cf
+ (_Bool)configureM7Activity:(_Bool)arg1 stepCounting:(_Bool)arg2 activityForceCodeTransition:(_Bool)arg3 stepCountingForceCodeTransition:(_Bool)arg4 threshold:(_Bool)arg5 onBodyDetection:(_Bool)arg6 ispMode:(unsigned char)arg7 predictionInterval:(float)arg8 logLevel:(BOOL)arg9 proactiveRevisitTime:(unsigned short)arg10;	// IMP=0x00000000000f73c7
+ (_Bool)setUrgentCalFlag;	// IMP=0x00000000000f70f6
+ (_Bool)startGyroMiniCalibration;	// IMP=0x00000000000f6e25
+ (_Bool)supportsGyroMiniCalibration;	// IMP=0x00000000000f6dfe
+ (void)dummySelector:(id)arg1;	// IMP=0x00000000000f6df8
+ (_Bool)northAlignedReferenceFrame:(unsigned long long)arg1;	// IMP=0x00000000000f61d3
+ (_Bool)deviceMotionInitialized:(struct Sample *)arg1;	// IMP=0x00000000000f61bb
+ (void)dumpDb:(long long)arg1 toURL:(id)arg2 onCompletion:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f14cc
+ (void)setAllowInBackground:(_Bool)arg1;	// IMP=0x00000000000ef315
+ (unsigned long long)availableAttitudeReferenceFrames;	// IMP=0x00000000000ef307
+ (void)initialize;	// IMP=0x00000000000ef26a
+ (id)virtualAlmondDevice;	// IMP=0x00000000000ef23d
+ (void)setVirtualAlmondDevice:(id)arg1;	// IMP=0x00000000000ef204
- (void)stopFactoryGyroUpdatesPrivate;	// IMP=0x00000000000f8945
- (void)startFactoryGyroUpdatesPrivateToQueue:(id)arg1 atUpdateInterval:(double)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f87a4
- (void)stopFactoryGyroUpdates;	// IMP=0x00000000000f873d
- (void)startFactoryGyroUpdatesToQueue:(id)arg1 atUpdateInterval:(double)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f86a1
- (void)startFactoryGyroUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f8611
- (void)stopDeviceMotionLiteUpdatesForDeviceID:(id)arg1;	// IMP=0x00000000000f7f68
- (void)startDeviceMotionLiteFusedUpdatesForDeviceID:(id)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f7e4c
- (void)startDeviceMotionLiteUpdatesForDeviceID:(id)arg1 usingConfiguration:(CDStruct_fcaf9308)arg2 toQueue:(id)arg3 withFusedHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000f7550
@property(readonly, nonatomic, getter=isDeviceMotionLiteAvailable) _Bool isDeviceMotionLiteAvailable;
- (void)didBecomeActivePrivate:(id)arg1;	// IMP=0x00000000000f6d7b
- (void)willResignActivePrivate:(id)arg1;	// IMP=0x00000000000f6d27
- (void)didBecomeActive:(id)arg1;	// IMP=0x00000000000f6cae
- (void)willResignActive:(id)arg1;	// IMP=0x00000000000f6c35
- (void)onCompensatedAmbientPressure:(const struct Sample *)arg1;	// IMP=0x00000000000f69bb
- (void)onAmbientPressure:(const struct Sample *)arg1;	// IMP=0x00000000000f6759
- (void)onDeviceMotion:(const struct Sample *)arg1;	// IMP=0x00000000000f638b
- (void)applyInitialReference:(struct Sample *)arg1;	// IMP=0x00000000000f62bc
- (void)applyNorthReference:(struct Sample *)arg1;	// IMP=0x00000000000f61fb
- (_Bool)sendDeviceMotionError:(int)arg1;	// IMP=0x00000000000f5f6f
- (void)onMagnetometer:(const struct Sample *)arg1;	// IMP=0x00000000000f5ce4
- (void)onFactoryGyroTemperature:(const struct Temperature *)arg1;	// IMP=0x00000000000f5b5c
- (void)onFactoryGyro:(const struct Sample *)arg1;	// IMP=0x00000000000f5302
- (void)onGyro:(const struct Sample *)arg1;	// IMP=0x00000000000f5077
- (void)onAccelerometer:(const struct Sample *)arg1;	// IMP=0x00000000000f4e07
- (id)predictedDeviceMotionAtTimestamp:(double)arg1 error:(out id *)arg2;	// IMP=0x00000000000f45ae
@property(readonly, nonatomic, getter=isPredictedDeviceMotionAvailable) _Bool predictedDeviceMotionAvailable;
- (void)_stopDeviceMotionErrorUpdates;	// IMP=0x00000000000f44fc
- (void)_startDeviceMotionErrorUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f42fb
- (_Bool)setMotionThreadPriority:(int)arg1;	// IMP=0x00000000000f42de
- (void)setNotificationCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2;	// IMP=0x00000000000f4006
- (void)setPowerConservationMode:(int)arg1;	// IMP=0x00000000000f3ec4
- (void)setSidebandTimeSyncHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000f3ebe
- (_Bool)setSidebandSensorFusionEnable:(_Bool)arg1 measureLatency:(_Bool)arg2 withSnoopHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f347f
- (_Bool)setSidebandSensorFusionEnable:(_Bool)arg1 withSnoopHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f3468
- (_Bool)setSidebandSensorFusionEnable:(_Bool)arg1;	// IMP=0x00000000000f3451
@property(readonly, nonatomic, getter=isSidebandSensorFusionAvailable) _Bool sidebandSensorFusionAvailable;
- (void)connect;	// IMP=0x00000000000f3069
- (void)setDeviceMotionCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3 fsync:(_Bool)arg4;	// IMP=0x00000000000f256a
- (void)setMagnetometerDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;	// IMP=0x00000000000f241f
- (void)setGyroDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;	// IMP=0x00000000000f22d4
- (void)setAccelerometerDataCallback:(CDUnknownFunctionPointerType)arg1 info:(void *)arg2 interval:(double)arg3;	// IMP=0x00000000000f1f89
- (id)initUsingGyroOnlySensorFusion;	// IMP=0x00000000000f1f64
- (id)initUsing6AxisSensorFusion;	// IMP=0x00000000000f1f3f
- (void)dismissDeviceMovementDisplay;	// IMP=0x00000000000f1e74
- (void)showDeviceMovementDisplay;	// IMP=0x00000000000f1d75
- (void)setShowsDeviceMovementDisplayPrivate:(_Bool)arg1;	// IMP=0x00000000000f1d53
@property(nonatomic) _Bool showsDeviceMovementDisplay;
- (void)stopMagnetometerUpdatesPrivate;	// IMP=0x00000000000f1d29
- (void)startMagnetometerUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f1d1f
- (void)setMagnetometerUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000f1c82
- (void)stopMagnetometerUpdates;	// IMP=0x00000000000f1c1b
- (void)startMagnetometerUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f1b93
- (void)startMagnetometerUpdates;	// IMP=0x00000000000f1b28
@property(readonly) CMMagnetometerData *magnetometerData;
@property(nonatomic) double magnetometerUpdateInterval;
@property(readonly, nonatomic, getter=isMagnetometerActive) _Bool magnetometerActive;
@property(readonly, nonatomic, getter=isMagnetometerAvailable) _Bool magnetometerAvailable;
- (int)gyttNumTemperatures;	// IMP=0x00000000000f1aa0
- (void)rebuildGytt;	// IMP=0x00000000000f1892
- (void)stopDeviceMotionUpdatesPrivate;	// IMP=0x00000000000f13a8
- (void)startDeviceMotionUpdatesPrivateUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f1086
- (void)setDeviceMotionUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000f0fe4
- (void)stopDeviceMotionUpdates;	// IMP=0x00000000000f0fbb
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)arg1 toQueue:(id)arg2 withHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000000f0f68
- (void)startDeviceMotionUpdatesUsingReferenceFrame:(unsigned long long)arg1;	// IMP=0x00000000000f0f2d
- (void)startDeviceMotionUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f0eef
- (void)startDeviceMotionUpdates;	// IMP=0x00000000000f0ec6
@property(readonly) CMDeviceMotion *deviceMotion; // @dynamic deviceMotion;
@property(readonly, nonatomic) unsigned long long attitudeReferenceFrame; // @dynamic attitudeReferenceFrame;
@property(nonatomic) double deviceMotionUpdateInterval; // @dynamic deviceMotionUpdateInterval;
@property(readonly, nonatomic, getter=isDeviceMotionActive) _Bool deviceMotionActive; // @dynamic deviceMotionActive;
@property(readonly, nonatomic, getter=isDeviceMotionAvailable) _Bool deviceMotionAvailable; // @dynamic deviceMotionAvailable;
- (void)stopGyroUpdatesPrivate;	// IMP=0x00000000000f0dc9
- (void)startGyroUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f0dbf
- (void)setGyroUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000f0d0b
- (void)stopGyroUpdates;	// IMP=0x00000000000f0ce2
- (void)startGyroUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f0ca4
- (void)startGyroUpdates;	// IMP=0x00000000000f0c7b
@property(readonly) CMGyroData *gyroData; // @dynamic gyroData;
@property(nonatomic) double gyroUpdateInterval; // @dynamic gyroUpdateInterval;
@property(readonly, nonatomic, getter=isGyroActive) _Bool gyroActive; // @dynamic gyroActive;
@property(readonly, nonatomic, getter=isGyroAvailable) _Bool gyroAvailable; // @dynamic gyroAvailable;
- (void)stopCompensatedAmbientPressureUpdatesPrivate;	// IMP=0x00000000000f0aa9
- (void)startCompensatedAmbientPressureUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f098a
- (void)setCompensatedAmbientPressureUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000f08ed
- (void)stopAmbientPressureUpdatesPrivate;	// IMP=0x00000000000f081b
- (void)startAmbientPressureUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f071a
- (void)setAmbientPressureUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000f0689
@property(readonly) CMAmbientPressureData *compensatedAmbientPressureData;
- (void)stopCompensatedAmbientPressureUpdates;	// IMP=0x00000000000f0596
- (void)startCompensatedAmbientPressureUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f050e
- (void)startCompensatedAmbientPressureUpdates;	// IMP=0x00000000000f04a3
- (_Bool)isCompensatedAmbientPressureActive;	// IMP=0x00000000000f048e
- (double)compensatedAmbientPressureUpdateInterval;	// IMP=0x00000000000f047c
- (void)setCompensatedAmbientPressureUpdateInterval:(double)arg1;	// IMP=0x00000000000f03fe
- (id)computeNonlinearPRTTFromDB:(id)arg1 where:(id)arg2;	// IMP=0x00000000000f022f
- (_Bool)readRawAmbientPressureSamplesFromDB:(id)arg1 toQueue:(id)arg2 where:(id)arg3 withHandler:(CDUnknownBlockType)arg4;	// IMP=0x00000000000efe64
@property(readonly) CMAmbientPressureData *ambientPressureData;
- (void)stopAmbientPressureUpdates;	// IMP=0x00000000000efd74
- (void)startAmbientPressureUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000efcec
- (void)startAmbientPressureUpdates;	// IMP=0x00000000000efc81
- (_Bool)isAmbientPressureActive;	// IMP=0x00000000000efc6f
- (double)ambientPressureUpdateInterval;	// IMP=0x00000000000efc60
- (void)setAmbientPressureUpdateInterval:(double)arg1;	// IMP=0x00000000000efbe2
- (_Bool)isAmbientPressureAvailable;	// IMP=0x00000000000efbd5
- (void)stopAccelerometerUpdatesPrivate;	// IMP=0x00000000000efacb
- (void)startAccelerometerUpdatesPrivateToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ef98a
- (void)setAccelerometerUpdateIntervalPrivate:(double)arg1;	// IMP=0x00000000000ef8e2
- (void)stopAccelerometerUpdates;	// IMP=0x00000000000ef8b9
- (void)startAccelerometerUpdatesToQueue:(id)arg1 withHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ef87b
- (void)startAccelerometerUpdates;	// IMP=0x00000000000ef852
@property(readonly) CMAccelerometerData *accelerometerData; // @dynamic accelerometerData;
@property(nonatomic) double accelerometerUpdateInterval; // @dynamic accelerometerUpdateInterval;
@property(readonly, nonatomic, getter=isAccelerometerActive) _Bool accelerometerActive; // @dynamic accelerometerActive;
@property(readonly, nonatomic, getter=isAccelerometerAvailable) _Bool accelerometerAvailable; // @dynamic accelerometerAvailable;
- (void)deallocPrivate;	// IMP=0x00000000000ef650
- (void)dealloc;	// IMP=0x00000000000ef547
- (id)initPrivate;	// IMP=0x00000000000ef493
- (id)init;	// IMP=0x00000000000ef31b
- (_Bool)useAccelerometer;	// IMP=0x00000000000ef25a
- (void)setUseAccelerometer:(_Bool)arg1;	// IMP=0x00000000000ef24a

@end

