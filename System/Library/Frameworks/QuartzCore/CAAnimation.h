//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <QuartzCore/CAAction-Protocol.h>
#import <QuartzCore/CAMediaTiming-Protocol.h>
#import <QuartzCore/CAPropertyInfo-Protocol.h>
#import <QuartzCore/NSCopying-Protocol.h>
#import <QuartzCore/NSMutableCopying-Protocol.h>
#import <QuartzCore/NSSecureCoding-Protocol.h>

@class CAMediaTimingFunction, CAStateControllerTransition, NSString;
@protocol CAAnimationDelegate;

@interface CAAnimation : NSObject <NSMutableCopying, CAPropertyInfo, NSSecureCoding, NSCopying, CAMediaTiming, CAAction>
{
    void *_attr;	// 8 = 0x8
    unsigned int _flags;	// 16 = 0x10
}

+ (_Bool)CA_automaticallyNotifiesObservers:(Class)arg1;	// IMP=0x00000000001bea41
+ (_Bool)automaticallyNotifiesObserversForKey:(id)arg1;	// IMP=0x00000000001bea22
+ (_Bool)supportsSecureCoding;	// IMP=0x00000000001bea1a
+ (_Bool)CA_encodesPropertyConditionally:(unsigned int)arg1 type:(int)arg2;	// IMP=0x00000000001be9ff
+ (id)animation;	// IMP=0x00000000001be9ed
+ (id)defaultValueForKey:(id)arg1;	// IMP=0x00000000001be920
+ (void)CAMLParserStartElement:(id)arg1;	// IMP=0x00000000001c8b02
+ (_Bool)resolveInstanceMethod:(SEL)arg1;	// IMP=0x00000000001c8af5
+ (CDUnknownFunctionPointerType)CA_getterForProperty:(const struct _CAPropertyInfo *)arg1;	// IMP=0x00000000001c8adb
+ (CDUnknownFunctionPointerType)CA_setterForProperty:(const struct _CAPropertyInfo *)arg1;	// IMP=0x00000000001c8ac4
+ (id)properties;	// IMP=0x00000000001c8aba
@property float preferredFrameRateRangePreferred;
@property float preferredFrameRateRangeMaximum;
@property float preferredFrameRateRangeMinimum;
@property(retain) id <CAAnimationDelegate> delegate;
@property(retain) CAMediaTimingFunction *timingFunction;
@property(getter=isRemovedOnCompletion) _Bool removedOnCompletion;
@property(copy) NSString *fillMode;
@property _Bool autoreverses;
@property double repeatDuration;
@property float repeatCount;
@property float speed;
@property double duration;
@property double timeOffset;
@property double beginTime;
- (_Bool)removedOnCompletion;	// IMP=0x00000000001bde68
- (id)debugDescription;	// IMP=0x00000000001bdda1
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000001bdcc6
- (void)setValue:(id)arg1 forKeyPath:(id)arg2;	// IMP=0x00000000001bdcb4
- (id)valueForKeyPath:(id)arg1;	// IMP=0x00000000001bdca7
- (void)setValue:(id)arg1 forUndefinedKey:(id)arg2;	// IMP=0x00000000001bdbb5
- (id)valueForUndefinedKey:(id)arg1;	// IMP=0x00000000001bdaec
- (void)setValue:(id)arg1 forKey:(id)arg2;	// IMP=0x00000000001bdaaa
- (id)valueForKey:(id)arg1;	// IMP=0x00000000001bda77
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000000001bda6a
- (id)initWithCoder:(id)arg1;	// IMP=0x00000000001bda5d
- (_Bool)shouldArchiveValueForKey:(id)arg1;	// IMP=0x00000000001bd9c5
- (void)runActionForKey:(id)arg1 object:(id)arg2 arguments:(id)arg3;	// IMP=0x00000000001bd9a7
@property struct CAFrameRateRange preferredFrameRateRange;
- (void)dealloc;	// IMP=0x00000000001bd7a8
- (unsigned int)_propertyFlagsForLayer:(id)arg1;	// IMP=0x00000000001bd7a0
- (_Bool)_setCARenderAnimation:(void *)arg1 layer:(id)arg2;	// IMP=0x00000000001bd4fe
@property unsigned int highFrameRateReason;
@property(copy) NSString *beginTimeMode;
@property _Bool discretizesTime;
@property(getter=isEnabled) _Bool enabled;
@property long long preferredFramesPerSecond;
@property double frameInterval;
- (_Bool)CAMLTypeSupportedForKey:(id)arg1;	// IMP=0x00000000001c86d7
- (id)CAMLTypeForKey:(id)arg1;	// IMP=0x00000000001c86ca
- (void)encodeWithCAMLWriter:(id)arg1;	// IMP=0x00000000001c86bd
- (void)CAMLParser:(id)arg1 setValue:(id)arg2 forKey:(id)arg3;	// IMP=0x00000000001c86a5
- (id)mutableCopyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000001c8693
- (struct Object *)CA_copyRenderValue;	// IMP=0x00000000001c867f
- (void)applyForTime:(double)arg1 presentationObject:(id)arg2 modelObject:(id)arg3;	// IMP=0x00000000001c8679
- (void)setDefaultDuration:(double)arg1;	// IMP=0x00000000001c8632

// Remaining properties
@property __weak CAStateControllerTransition *CAStateControllerTransition; // @dynamic CAStateControllerTransition;

@end

