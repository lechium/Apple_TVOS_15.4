//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <GameController/CHHapticServerInterface-Protocol.h>

@class GCControllerSettings, NSArray, NSMutableDictionary, NSString, _GCControllerManagerServer;
@protocol NSCopying><NSObject><NSSecureCoding, _GCIPCIncomingConnection;

__attribute__((visibility("hidden")))
@interface _GCHapticClientProxy : NSObject <CHHapticServerInterface>
{
    _Bool _playersPlayedHapticsThisSlice;	// 8 = 0x8
    _GCControllerManagerServer *_server;	// 16 = 0x10
    struct HapticSharedMemory _sharedMemory;	// 24 = 0x18
    GCControllerSettings *_bundleSettings;	// 80 = 0x50
    GCControllerSettings *_globalSettings;	// 88 = 0x58
    _Bool _dirtyMuteState;	// 96 = 0x60
    _Bool _muted;	// 97 = 0x61
    _Bool _neverMute;	// 98 = 0x62
    int _muteReasons[5];	// 100 = 0x64
    _Atomic _Bool _invalid;	// 120 = 0x78
    _Bool _running;	// 121 = 0x79
    _Bool _stopping;	// 122 = 0x7a
    id <_GCIPCIncomingConnection> _connection;	// 128 = 0x80
    id _connectionInvalidationRegistration;	// 136 = 0x88
    id _connectionInterruptedRegistration;	// 144 = 0x90
    double _initializationTime;	// 152 = 0x98
    _Bool _complete;	// 160 = 0xa0
    _Bool _mockClient;	// 161 = 0xa1
    unsigned int _applicationState;	// 164 = 0xa4
    int _totalPlayers;	// 168 = 0xa8
    unsigned long long _clientID;	// 176 = 0xb0
    NSString *_bundleIdentifier;	// 184 = 0xb8
    id <NSCopying><NSObject><NSSecureCoding> _identifier;	// 192 = 0xc0
    NSString *_controllerProductCategory;	// 200 = 0xc8
    NSArray *_actuators;	// 208 = 0xd0
    NSMutableDictionary *_hapticPlayers;	// 216 = 0xd8
    double _activeLifetimeInSeconds;	// 224 = 0xe0
    NSArray *_invalidationHandlers;	// 232 = 0xe8
}

+ (id)clientProxyWithConnection:(id)arg1 server:(id)arg2 clientID:(unsigned long long)arg3;	// IMP=0x000000000008a1b0
- (id).cxx_construct;	// IMP=0x000000000008b8fc
- (void).cxx_destruct;	// IMP=0x000000000008b838
@property(copy, nonatomic) NSArray *invalidationHandlers; // @synthesize invalidationHandlers=_invalidationHandlers;
@property(readonly, nonatomic) double activeLifetimeInSeconds; // @synthesize activeLifetimeInSeconds=_activeLifetimeInSeconds;
@property(readonly, nonatomic) int totalPlayers; // @synthesize totalPlayers=_totalPlayers;
@property(nonatomic) unsigned int applicationState; // @synthesize applicationState=_applicationState;
@property(nonatomic, getter=isMockClient) _Bool mockClient; // @synthesize mockClient=_mockClient;
@property(nonatomic) _Bool complete; // @synthesize complete=_complete;
@property(copy, nonatomic) NSMutableDictionary *hapticPlayers; // @synthesize hapticPlayers=_hapticPlayers;
@property(readonly, copy, nonatomic) NSArray *actuators; // @synthesize actuators=_actuators;
@property(readonly, copy, nonatomic) NSString *controllerProductCategory; // @synthesize controllerProductCategory=_controllerProductCategory;
@property(readonly, copy, nonatomic) id <NSCopying><NSObject><NSSecureCoding> identifier; // @synthesize identifier=_identifier;
@property(copy, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(nonatomic) unsigned long long clientID; // @synthesize clientID=_clientID;
- (void)addActiveTime:(double)arg1;	// IMP=0x000000000008b73c
@property(readonly, nonatomic) double totalLifetimeInSeconds;
- (id)description;	// IMP=0x000000000008b653
- (void)notifyClientCompletedWithError:(id)arg1;	// IMP=0x000000000008b43e
- (_Bool)isMuted;	// IMP=0x000000000008b403
- (_Bool)isMutedForReason:(unsigned long long)arg1;	// IMP=0x000000000008b35f
- (void)setMute:(_Bool)arg1 forReason:(unsigned long long)arg2;	// IMP=0x000000000008b339
- (void)notifyClientOnStopWithReason:(long long)arg1 error:(id)arg2;	// IMP=0x000000000008b1f9
- (void *)sharedMemory;	// IMP=0x000000000008b1ef
- (_Bool)stopping;	// IMP=0x000000000008b1e6
- (_Bool)running;	// IMP=0x000000000008b1dd
- (void)refreshUserSettingForMuteHaptics;	// IMP=0x000000000008afdf
- (void)invalidate;	// IMP=0x000000000008aace
- (void)invalidateDueToControllerDisconnect;	// IMP=0x000000000008a9c4
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x000000000008a8eb
- (void)dealloc;	// IMP=0x000000000008a5fe
- (id)init;	// IMP=0x000000000008a5c0
- (id)_initWithConnection:(id)arg1 server:(id)arg2 clientID:(unsigned long long)arg3;	// IMP=0x000000000008a24b
- (id)addInvalidationHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000008b944
@property(readonly, nonatomic, getter=isInvalid) _Bool invalid;
- (void)debugEngineIsRunning:(CDUnknownBlockType)arg1;	// IMP=0x000000000008fa9f
- (void)debugExpectNotifyOnFinishAfter:(double)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008f9b0
- (void)stopRunning:(CDUnknownBlockType)arg1;	// IMP=0x000000000008f8ca
- (void)stopRunning;	// IMP=0x000000000008f824
- (void)startRunning:(CDUnknownBlockType)arg1;	// IMP=0x000000000008f745
- (void)stopPrewarm;	// IMP=0x000000000008f6a5
- (void)prewarm:(CDUnknownBlockType)arg1;	// IMP=0x000000000008f5cb
- (void)detachSequence:(unsigned long long)arg1;	// IMP=0x000000000008f516
- (void)prepareHapticSequence:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008f3f2
- (void)removeCustomAudioEvent:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008f2ce
- (void)releaseCustomAudioEvent:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008f1aa
- (void)referenceCustomAudioEvent:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008f086
- (void)copyCustomAudioEvent:(unsigned long long)arg1 options:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x000000000008ef26
- (void)createCustomAudioEvent:(id)arg1 format:(id)arg2 frames:(unsigned long long)arg3 options:(id)arg4 reply:(CDUnknownBlockType)arg5;	// IMP=0x000000000008ed70
- (void)setSequenceEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 channelIndex:(unsigned long long)arg3 reply:(CDUnknownBlockType)arg4;	// IMP=0x000000000008ec4c
- (void)loadVibePattern:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008eaff
- (void)loadHapticSequenceFromEvents:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008e99f
- (void)loadHapticSequenceFromData:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008e83f
- (void)loadHapticEvent:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008e6f2
- (void)setChannelEventBehavior:(unsigned long long)arg1 behavior:(unsigned long long)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x000000000008e3ce
- (void)removeChannel:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008e034
- (void)requestChannels:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008d8ef
- (void)releaseChannels;	// IMP=0x000000000008d5fd
- (void)teardownAndReleaseChannels;	// IMP=0x000000000008d2f7
- (void)setPlayerBehavior:(unsigned long long)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008d103
- (void)getHapticLatency:(CDUnknownBlockType)arg1;	// IMP=0x000000000008d021
- (void)releaseClientResources;	// IMP=0x000000000008cf70
- (void)allocateClientResources:(CDUnknownBlockType)arg1;	// IMP=0x000000000008cddc
- (void)queryCapabilities:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008c7d1
- (void)configureWithOptions:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x000000000008c1f8
- (void)_configureActuatorsLegacyWithOptions:(id)arg1;	// IMP=0x000000000008bcea

@end

