//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <EventKit/CalDateRangeProtocol-Protocol.h>
#import <EventKit/EKJunkInvitationProtocol_Private-Protocol.h>

@class EKCalendarDate, EKEventStore, EKParticipant, EKReadWriteLock, EKRecurrenceIdentifier, EKStructuredLocation, EKSuggestedEventInfo, EKVirtualConference, NSArray, NSDate, NSNumber, NSSet, NSString, NSURL;

@interface EKEvent <EKJunkInvitationProtocol_Private, CalDateRangeProtocol>
{
    EKStructuredLocation *_cachedLocationPrediction;	// 8 = 0x8
    NSDate *_cachedLocationPredictionExpirationDate;	// 16 = 0x10
    _Bool _locationPredictionFrozen;	// 24 = 0x18
    _Bool _locationPredictionAllowed;	// 25 = 0x19
    EKReadWriteLock *_locationPredictionLock;	// 32 = 0x20
    _Bool _occurrenceIsAllDay;	// 40 = 0x28
    _Bool _requiresDetachDueToSnoozedAlarm;	// 41 = 0x29
    _Bool _preventConferenceURLDetection;	// 42 = 0x2a
    int _clearModifiedFlags;	// 44 = 0x2c
    NSString *_birthdayPersonUniqueID;	// 48 = 0x30
    EKCalendarDate *_occurrenceStartDate;	// 56 = 0x38
    EKCalendarDate *_occurrenceEndDate;	// 64 = 0x40
    EKCalendarDate *_originalOccurrenceStartDate;	// 72 = 0x48
    EKCalendarDate *_originalOccurrenceEndDate;	// 80 = 0x50
    NSNumber *_originalOccurrenceIsAllDay;	// 88 = 0x58
    NSDate *_proposedEndDate;	// 96 = 0x60
    NSString *_showEventURLString;	// 104 = 0x68
    NSString *_virtualConferenceTextRepresentation;	// 112 = 0x70
}

+ (id)eventFromICSEvent:(id)arg1 inStore:(id)arg2;	// IMP=0x00000000000992b2
+ (_Bool)_calendarsAreSharedToMeInSameSourceAndHaveSameOwner:(id)arg1;	// IMP=0x0000000000098630
+ (id)knownPerUserPropertyKeys;	// IMP=0x0000000000095351
+ (id)knownRequireRSVPKeys;	// IMP=0x0000000000095280
+ (id)generateUniqueIDWithEvent:(id)arg1 originalEvent:(id)arg2 calendar:(id)arg3;	// IMP=0x0000000000094b56
+ (long long)_coercedEventAvailabilityForDesiredAvailability:(long long)arg1 supportedAvailabilities:(unsigned long long)arg2;	// IMP=0x0000000000088ea3
+ (_Bool)isMultiDayTimedEventWithStartDate:(id)arg1 endDate:(id)arg2 allDay:(_Bool)arg3 inCalendar:(id)arg4;	// IMP=0x000000000008178a
+ (id)_relatedCachedTimeKeys;	// IMP=0x0000000000080fc4
+ (id)_basicChangesRequiringSpanAll;	// IMP=0x0000000000080686
+ (id)_updatedPredictedLocationRespectingTimeoutBudgetForEvent:(id)arg1 error:(id *)arg2;	// IMP=0x000000000007eccb
+ (long long)_eventAvailabilityForParticipantStatus:(long long)arg1 supportedEventAvailabilities:(unsigned long long)arg2 isAllDayEvent:(_Bool)arg3;	// IMP=0x000000000007a3e5
+ (id)_modifiedNotificationUserInfoWithIdentifier:(id)arg1 forRevert:(_Bool)arg2;	// IMP=0x0000000000077666
+ (id)externalUriScheme;	// IMP=0x0000000000077114
+ (id)eventWithEventStore:(id)arg1;	// IMP=0x0000000000076868
+ (id)knownSingleValueKeysForComparison;	// IMP=0x00000000000765b3
+ (id)knownKeysToUseForFutureChanges;	// IMP=0x00000000000764c6
+ (id)knownKeysToSkipForFutureChanges;	// IMP=0x00000000000763a1
+ (id)knownRelationshipMultiValueKeys;	// IMP=0x0000000000076239
+ (id)knownRelationshipSingleValueKeys;	// IMP=0x00000000000760d1
+ (Class)frozenClass;	// IMP=0x00000000000760c0
+ (id)_locationStringForLocations:(id)arg1;	// IMP=0x00000000000335c7
+ (id)EKObjectChangeSummarizer_multiValueDiffKeys;	// IMP=0x0000000000069ade
+ (id)EKObjectChangeSummarizer_singleValueDiffKeys;	// IMP=0x0000000000069852
- (void).cxx_destruct;	// IMP=0x00000000000995dc
@property(retain, nonatomic) NSString *virtualConferenceTextRepresentation; // @synthesize virtualConferenceTextRepresentation=_virtualConferenceTextRepresentation;
@property(readonly, nonatomic) NSString *showEventURLString; // @synthesize showEventURLString=_showEventURLString;
@property(nonatomic) _Bool preventConferenceURLDetection; // @synthesize preventConferenceURLDetection=_preventConferenceURLDetection;
@property(retain, nonatomic) NSDate *proposedEndDate; // @synthesize proposedEndDate=_proposedEndDate;
@property(nonatomic) int clearModifiedFlags; // @synthesize clearModifiedFlags=_clearModifiedFlags;
@property(nonatomic) _Bool requiresDetachDueToSnoozedAlarm; // @synthesize requiresDetachDueToSnoozedAlarm=_requiresDetachDueToSnoozedAlarm;
@property(copy, nonatomic) NSNumber *originalOccurrenceIsAllDay; // @synthesize originalOccurrenceIsAllDay=_originalOccurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceEndDate; // @synthesize originalOccurrenceEndDate=_originalOccurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *originalOccurrenceStartDate; // @synthesize originalOccurrenceStartDate=_originalOccurrenceStartDate;
@property(nonatomic) _Bool occurrenceIsAllDay; // @synthesize occurrenceIsAllDay=_occurrenceIsAllDay;
@property(copy, nonatomic) EKCalendarDate *occurrenceEndDate; // @synthesize occurrenceEndDate=_occurrenceEndDate;
@property(copy, nonatomic) EKCalendarDate *occurrenceStartDate; // @synthesize occurrenceStartDate=_occurrenceStartDate;
@property(readonly, nonatomic) NSString *birthdayPersonUniqueID; // @synthesize birthdayPersonUniqueID=_birthdayPersonUniqueID;
- (_Bool)_requirementsToMoveToCalendarHelperRemoveAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x000000000009916e
- (_Bool)_requirementsToMoveToCalendarHelperReinviteAttendeesRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x0000000000098e74
- (_Bool)_requirementsToMoveToCalendarHelperNeedToRemoveOriginalToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x0000000000098c46
- (_Bool)_requirementsToMoveToCalendarHelperDuplicationRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x0000000000098903
- (_Bool)_requirementsToMoveToCalendarHelperAlterationsRequiredToMoveEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x0000000000097c8f
- (_Bool)isAttendeeSameAsOrganizer:(id)arg1;	// IMP=0x0000000000097be5
- (id)attendeesNotIncludingOrganizer;	// IMP=0x00000000000979b9
- (_Bool)isValidAttendee:(id)arg1 forCalendar:(id)arg2;	// IMP=0x00000000000974f1
- (id)suggestedStartDateForCurrentRecurrenceRule;	// IMP=0x000000000009708b
- (_Bool)_suggestedStartDateHelperRecurrenceRuleRequiresExpansion:(id)arg1 forDate:(id)arg2;	// IMP=0x0000000000096da2
- (id)_nsCalendar;	// IMP=0x0000000000096ce0
- (_Bool)_hasAbsoluteAlarms;	// IMP=0x0000000000096b64
- (_Bool)_requirementsToMoveOrCopyToCalendarHelperAllowedToMoveOrCopyEventFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x0000000000096901
- (_Bool)seriesHasOverlappingOrOnSameDayOrOutOfOrderEvents;	// IMP=0x0000000000096730
- (_Bool)seriesHasOutOfOrderEvents;	// IMP=0x0000000000095fd7
- (_Bool)_canMoveOrCopyFromCalendar:(id)arg1 toCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;	// IMP=0x0000000000095c8b
- (_Bool)requiresCopyToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x0000000000095c72
- (_Bool)canMoveOrCopyToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000095c4e
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 allowedRequirements:(long long)arg3 error:(id *)arg4;	// IMP=0x0000000000095c33
- (_Bool)canMoveToCalendar:(id)arg1 fromCalendar:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000095c18
- (long long)requirementsToMoveToCalendar:(id)arg1;	// IMP=0x0000000000095ba7
- (long long)requirementsToMoveFromCalendar:(id)arg1 toCalendar:(id)arg2;	// IMP=0x0000000000095a71
@property(readonly, nonatomic, getter=isPrivacySet) _Bool privacySet;
- (_Bool)isDifferentFromCommittedEventAndHasUnscheduledAttendees;	// IMP=0x0000000000095a05
- (_Bool)isDifferentAndHasUnscheduledAttendeesWithDiff:(id)arg1;	// IMP=0x0000000000095971
- (_Bool)isDifferentFromCommittedEventAndRequiresRSVP;	// IMP=0x000000000009591e
- (_Bool)isDifferentAndRequiresRSVPWithDiff:(id)arg1;	// IMP=0x000000000009590a
- (_Bool)isDifferentFromCommittedEventAndRequiresReschedule;	// IMP=0x00000000000958b7
- (_Bool)isDifferentExceptingPerUserPropertiesWithDiff:(id)arg1;	// IMP=0x0000000000095796
- (_Bool)isDifferentAndHasNewProposedTimeWithDiff:(id)arg1;	// IMP=0x00000000000956f3
- (_Bool)isDifferentAndHasForwardedAttendeesWithDiff:(id)arg1;	// IMP=0x0000000000095674
- (_Bool)isDifferentAndModifiedAttendeesWithDiff:(id)arg1;	// IMP=0x00000000000955af
- (_Bool)isDifferentAndRequiresRescheduleWithDiff:(id)arg1;	// IMP=0x0000000000095598
- (_Bool)_diff:(id)arg1 isDifferentFromCommittedEventHelperRequiresReschedule:(_Bool)arg2;	// IMP=0x0000000000095411
- (_Bool)isDifferentWithDiff:(id)arg1;	// IMP=0x0000000000095265
- (_Bool)isEqual:(id)arg1 comparingKeys:(id)arg2;	// IMP=0x000000000009524d
- (id)diffFromCommitted;	// IMP=0x00000000000951d0
- (void)declineProposedTimeNotificationFromAttendee:(id)arg1;	// IMP=0x00000000000951bc
- (void)acceptProposedTimeNotificationFromAttendee:(id)arg1;	// IMP=0x00000000000951a5
- (void)_respondToProposedTimeFromAttendee:(id)arg1 shouldAccept:(_Bool)arg2;	// IMP=0x0000000000095036
- (void)dismissAttendeeRepliedNotification;	// IMP=0x0000000000094e66
- (void)_clearAttendeeChangedFlags;	// IMP=0x0000000000094e16
- (void)dismissAcceptedProposeNewTimeNotification;	// IMP=0x0000000000094dc5
@property(readonly, nonatomic) NSURL *launchURL;
- (_Bool)updateWithGeocodedMapItemAndSaveWithCommit:(id)arg1 eventStore:(id)arg2 error:(id *)arg3;	// IMP=0x0000000000094857
- (id)scanForConflicts;	// IMP=0x0000000000093c4a
- (id)potentialConflictOccurrenceDatesInTimePeriod:(double *)arg1;	// IMP=0x0000000000093965
- (_Bool)_fetchedEventIsConflict:(id)arg1 forStartDate:(id)arg2 endDate:(id)arg3;	// IMP=0x00000000000936e4
- (_Bool)updateEventToEvent:(id)arg1 commit:(_Bool)arg2;	// IMP=0x0000000000092ec4
- (_Bool)updateEventToEvent:(id)arg1;	// IMP=0x0000000000092ead
@property(retain, nonatomic) EKSuggestedEventInfo *suggestionInfo;
- (id)privacyLevelString;	// IMP=0x0000000000092dd4
- (void)_detachWithStartDate:(id)arg1 newStartDate:(id)arg2 future:(_Bool)arg3;	// IMP=0x0000000000091863
- (_Bool)_shouldPreserveFutureWhenSlicingWithStartDate:(id)arg1 newStartDate:(id)arg2;	// IMP=0x00000000000917ce
- (void)rebaseToEventStore:(id)arg1;	// IMP=0x0000000000091746
- (_Bool)_noRemainingEarlierOccurrences;	// IMP=0x0000000000091465
- (_Bool)_eventIsTheOnlyRemainingOccurrence;	// IMP=0x0000000000090e88
- (id)masterEvent;	// IMP=0x0000000000090dbb
- (_Bool)isOnlyOccurrence;	// IMP=0x0000000000090da9
- (_Bool)isMainOccurrence;	// IMP=0x0000000000090d70
- (_Bool)isFirstOccurrence;	// IMP=0x0000000000090c7b
- (_Bool)removeWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x000000000009075f
- (_Bool)_isOriginalOccurrenceStartDateSameAsCommittedStartDate;	// IMP=0x000000000009063f
- (void)_cancelDetachedEventsWithSpan:(long long)arg1;	// IMP=0x0000000000090503
- (_Bool)_cancelWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x00000000000902ac
- (void)_deleteThisOccurrence;	// IMP=0x000000000008f75b
- (void)_updateSelfFromDetachedEventIfNeededForDelete;	// IMP=0x000000000008ed76
- (void)_deleteFromOccurrenceDateOnward:(id)arg1;	// IMP=0x000000000008e24b
- (_Bool)_deleteWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x000000000008e060
- (_Bool)_shouldDeclineInsteadOfDelete;	// IMP=0x000000000008df45
- (_Bool)_shouldCancelInsteadOfDeleteWithSpan:(long long)arg1;	// IMP=0x000000000008de14
- (_Bool)_isSimpleRepeatingEvent;	// IMP=0x000000000008dd63
@property(readonly, nonatomic) _Bool allowsResponseCommentModifications;
- (_Bool)allowsSpansOtherThanThisEvent;	// IMP=0x000000000008dba3
- (_Bool)conformsToRecurrenceRules:(id)arg1;	// IMP=0x000000000008d8c0
- (_Bool)_checkStartDateConstraintAgainstDate:(CDStruct_79f9e052)arg1 timeZone:(id)arg2 error:(id *)arg3;	// IMP=0x000000000008d769
- (_Bool)_occurrenceExistsOnDate:(id)arg1 timeZone:(id)arg2;	// IMP=0x000000000008d389
- (_Bool)_validateAlarmIntervalConstrainedToRecurrenceInterval:(long long)arg1;	// IMP=0x000000000008bd9a
- (_Bool)durationOverlapsRecurrenceInterval;	// IMP=0x000000000008ba6e
- (_Bool)_validateDatesAndRecurrencesGivenSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x000000000008b528
- (_Bool)overlapsWithOrIsSameDayAsEventInSeries;	// IMP=0x000000000008b254
- (_Bool)validateRecurrenceRule:(id)arg1 error:(id *)arg2;	// IMP=0x000000000008aeed
@property(copy, nonatomic) NSString *recurrenceSet;
- (unsigned long long)countOfAttendeeProposedTimes;	// IMP=0x000000000008acd2
- (id)_keysToChangeForDuplicateWithOptions:(long long)arg1;	// IMP=0x000000000008a8ba
- (id)duplicateWithOptions:(long long)arg1;	// IMP=0x000000000008a685
- (_Bool)hasAttendeeProposedTimes;	// IMP=0x000000000008a4c3
- (id)nextOccurrenceOrDetachmentAfter:(id)arg1;	// IMP=0x0000000000089db9
- (id)_dateForNextOccurrence;	// IMP=0x0000000000089c62
- (void)rollback;	// IMP=0x00000000000898f5
- (_Bool)revert;	// IMP=0x000000000008976a
- (_Bool)_reset;	// IMP=0x00000000000896ad
- (void)reset;	// IMP=0x000000000008966d
- (void)_addNewAttendeesToRecentsIfNeeded;	// IMP=0x0000000000089193
- (void)_addOrganizerToRecentsIfNeeded;	// IMP=0x0000000000089086
- (void)markAsUndeleted;	// IMP=0x0000000000088fb3
- (void)markAsCommitted;	// IMP=0x0000000000088f70
- (void)markAsSaved;	// IMP=0x0000000000088f10
- (void)_adjustAfterRebaseForMovingFromOldSource:(id)arg1 toNewSource:(id)arg2 savingItem:(id)arg3;	// IMP=0x0000000000088b8f
- (void)_adjustForNewCalendarBeforeSave;	// IMP=0x0000000000088198
- (id)_leftoversInDates:(id)arg1 withGeneratedDates:(id)arg2;	// IMP=0x00000000000880d5
- (void)_filterExceptionDatesAndDetachments;	// IMP=0x0000000000087803
- (void)_clearExceptionDatesAndUpdateDetachedOriginalDates;	// IMP=0x00000000000874cb
- (void)_applyTimeChangesToMaster;	// IMP=0x0000000000087267
- (id)_updateMasterDate:(id)arg1 forChangeToOccurrenceDate:(id)arg2 fromOriginalOccurrenceDate:(id)arg3;	// IMP=0x0000000000087174
- (_Bool)_isSignificantlyDetachedComparedToMaster:(id)arg1 shouldIgnorePartStat:(_Bool)arg2;	// IMP=0x0000000000086952
@property(readonly, nonatomic) _Bool isSignificantlyDetachedIgnoringParticipation;
@property(readonly, nonatomic) _Bool isSignificantlyDetached;
- (void)_propagateChangesToDetachedEvents:(id)arg1 significantlyDetachedEvents:(id)arg2 startDateOffset:(id)arg3 duration:(id)arg4 calendar:(id)arg5;	// IMP=0x00000000000864de
- (void)_propagateAlarmChangesToDetachedEvents:(id)arg1;	// IMP=0x0000000000085bfe
- (void)_updateModifiedProperties;	// IMP=0x000000000008585c
- (void)_updateVideoConferenceOnlyModified;	// IMP=0x000000000008550a
- (void)_updateModifiedPropertiesForThisEventAndAllDetachments;	// IMP=0x000000000008534e
- (void)_extendConferenceURLExpirationDateToDate:(id)arg1;	// IMP=0x0000000000085159
- (_Bool)saveWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x0000000000083837
- (void)_willSave;	// IMP=0x00000000000837d8
- (id)_generateNewUniqueID;	// IMP=0x000000000008373e
- (_Bool)validateWithSpan:(long long)arg1 error:(id *)arg2;	// IMP=0x0000000000082c19
- (_Bool)validate:(id *)arg1;	// IMP=0x0000000000082c02
- (void)snoozeAlarm:(id)arg1 withTimeIntervalFromNow:(double)arg2;	// IMP=0x0000000000082882
- (_Bool)validateAndUpdateOccurrenceDateFieldsAfterRefresh;	// IMP=0x0000000000082637
- (_Bool)refreshAndNotify:(_Bool)arg1;	// IMP=0x00000000000824b2
- (_Bool)refresh;	// IMP=0x0000000000082483
- (id)privacyDescription;	// IMP=0x0000000000082381
@property(readonly, copy) NSString *description;
@property(readonly, nonatomic) _Bool allowsParticipationStatusModifications;
- (_Bool)hasValidEventAction;	// IMP=0x0000000000081cb1
- (_Bool)_hasExternalIDOrDeliverySource;	// IMP=0x0000000000081c0e
@property(readonly, nonatomic) _Bool canBeRespondedTo;
- (_Bool)allowsAlarmModifications;	// IMP=0x0000000000081bb4
@property(readonly, nonatomic) _Bool allowsAvailabilityModifications;
- (id)uniqueId;	// IMP=0x0000000000081adb
@property(readonly, nonatomic) long long pendingParticipationStatus;
- (void)_resetInternalState;	// IMP=0x000000000008195d
- (void)_clearOriginalDateFields;	// IMP=0x000000000008191c
- (_Bool)isMultiDayTimedEventInCalendar:(id)arg1;	// IMP=0x000000000008155c
- (long long)daysSpannedInCalendar:(id)arg1;	// IMP=0x00000000000813a1
- (id)startOfDayForEndDateInCalendar:(id)arg1;	// IMP=0x0000000000081233
- (id)startOfDayForStartDateInCalendar:(id)arg1;	// IMP=0x00000000000810dd
- (void)clearCachedTimeValues;	// IMP=0x0000000000081089
- (_Bool)couldBeJunk;	// IMP=0x0000000000080fb2
@property(readonly, nonatomic) _Bool supportsJunkReporting;
@property(readonly, nonatomic) NSString *sendersPhoneNumber;
@property(readonly, nonatomic) NSString *sendersEmail;
@property(nonatomic) unsigned long long junkStatus;
@property(readonly, nonatomic) _Bool travelAdvisoryBehaviorIsEffectivelyEnabled;
@property(nonatomic) long long travelAdvisoryBehavior;
- (_Bool)_eligibleForTravelAdvisoriesIncludePotential:(_Bool)arg1;	// IMP=0x0000000000080b25
@property(readonly, nonatomic) _Bool potentiallyEligibleForTravelAdvisories;
@property(readonly, nonatomic) _Bool eligibleForTravelAdvisories;
@property(readonly, nonatomic) _Bool automaticLocationGeocodingAllowed;
- (_Bool)_hasRecurrenceRuleChangeRequiringSpanAll;	// IMP=0x000000000008083b
- (_Bool)_hasBasicChangesRequiringSpanAll;	// IMP=0x00000000000807c8
- (_Bool)_hasOrHadRecurrenceRule;	// IMP=0x0000000000080785
- (_Bool)hasChangesRequiringSpanAll;	// IMP=0x0000000000080738
- (_Bool)changingAllDayPropertyIsAllowed;	// IMP=0x00000000000805c9
@property(readonly, nonatomic) _Bool hasAttachmentChanges;
@property(readonly, nonatomic) _Bool canDetachSingleOccurrence;
- (_Bool)requiresDetach;	// IMP=0x0000000000080321
@property(readonly, nonatomic) _Bool responseMustApplyToAll;
- (_Bool)allowsCalendarModifications;	// IMP=0x000000000008016d
- (_Bool)allowsRecurrenceModifications;	// IMP=0x0000000000080083
@property(readonly, nonatomic) _Bool isPrivateEventSharedToMe;
@property(readonly, nonatomic) _Bool isEditable;
@property(readonly, nonatomic) _Bool isDetached;
- (long long)compareStartDateIncludingTravelWithEvent:(id)arg1;	// IMP=0x000000000007fe81
- (long long)compareStartDateWithEvent:(id)arg1;	// IMP=0x000000000007fdf0
- (_Bool)isTentative;	// IMP=0x000000000007fcea
@property(retain, nonatomic) NSDate *participationStatusModifiedDate;
@property(retain, nonatomic) EKStructuredLocation *endLocation; // @dynamic endLocation;
- (void)setCalendar:(id)arg1;	// IMP=0x000000000007fbe6
@property(retain, nonatomic) NSURL *conferenceURL;
- (void)setConferenceURLString:(id)arg1;	// IMP=0x000000000007fb17
- (id)conferenceURLString;	// IMP=0x000000000007fafb
- (void)forceLocationPredictionUpdate;	// IMP=0x000000000007fae9
- (void)setLocationPredictionAllowed:(_Bool)arg1;	// IMP=0x000000000007fa6d
- (void)setPredictedLocationFrozen:(_Bool)arg1;	// IMP=0x000000000007f995
@property(readonly, nonatomic) _Bool hasPredictedLocation;
- (void)rejectPredictedLocation;	// IMP=0x000000000007f8e2
- (void)confirmPredictedLocation:(id)arg1;	// IMP=0x000000000007f769
@property(readonly, nonatomic) NSString *locationWithoutPrediction;
@property(readonly, nonatomic) EKStructuredLocation *preferredLocationWithoutPrediction;
- (void)_clearLocationPredictionCacheIfNotFrozen;	// IMP=0x000000000007f5e1
- (void)_clearLocationPredictionCacheIfNotFrozenHoldingLock;	// IMP=0x000000000007f582
- (id)_updatePredictedLocationCacheIfNeeded;	// IMP=0x000000000007f31a
- (id)_firstNonConferenceRoomLocationTitle;	// IMP=0x000000000007efa7
- (id)_updatePredictedLocationCacheIfNeededHoldingLock;	// IMP=0x000000000007ea6f
- (_Bool)_needsPredictedLocationCacheUpdateHoldingLock;	// IMP=0x000000000007e9e1
- (id)_conferenceRoomDisplayStrings;	// IMP=0x000000000007e83a
- (void)removeConferenceRooms:(id)arg1;	// IMP=0x000000000007e441
- (void)addConferenceRooms:(id)arg1;	// IMP=0x000000000007e2d9
- (id)roomAttendees;	// IMP=0x000000000007e23c
- (void)setStructuredLocation:(id)arg1 preserveConferenceRooms:(_Bool)arg2;	// IMP=0x000000000007dec4
@property(copy, nonatomic) EKStructuredLocation *structuredLocation; // @dynamic structuredLocation;
- (void)setURL:(id)arg1;	// IMP=0x000000000007dd9d
- (void)setDisplayNotes:(id)arg1;	// IMP=0x000000000007dc70
- (id)displayNotes;	// IMP=0x000000000007db54
- (void)setNotes:(id)arg1;	// IMP=0x000000000007da4f
- (_Bool)supportsAddingAttachments;	// IMP=0x000000000007d966
@property(readonly, nonatomic) _Bool allowsProposedTimeModifications;
- (_Bool)disallowProposeNewTime;	// IMP=0x000000000007d6ba
- (_Bool)serverSupportedProposeNewTime;	// IMP=0x000000000007d5a1
@property(nonatomic) _Bool dontSendNotificationForChanges;
- (_Bool)canForward;	// IMP=0x000000000007d413
@property(nonatomic) _Bool attendeeReplyChanged; // @dynamic attendeeReplyChanged;
@property(nonatomic) _Bool attendeeDeclinedStartDate;
@property(nonatomic) _Bool attendeeProposedStartDate;
@property(nonatomic) _Bool attendeeStatus;
@property(nonatomic) _Bool attendeeComment;
@property(nonatomic) _Bool videoConferenceChanged;
@property(nonatomic) _Bool locationChanged;
@property(nonatomic) _Bool titleChanged;
@property(nonatomic) _Bool timeChanged;
@property(nonatomic) _Bool dateChanged;
- (void)_setInvitationChangedProperty:(_Bool)arg1 forFlag:(unsigned int)arg2;	// IMP=0x000000000007d1e3
- (void)setInvitationChangedProperties:(unsigned int)arg1;	// IMP=0x000000000007d186
- (unsigned int)invitationChangedProperties;	// IMP=0x000000000007d138
- (_Bool)_invitationChangedPropertyForFlag:(unsigned int)arg1;	// IMP=0x000000000007d117
@property(readonly, nonatomic) _Bool locationIsAConferenceRoom;
@property(nonatomic) long long privacyLevel;
@property(readonly, nonatomic) _Bool allowsAllDayModifications;
@property(readonly, nonatomic) _Bool allowsPrivacyLevelModifications;
@property(readonly, nonatomic) _Bool allowsTravelTimeModifications;
- (_Bool)allowsAttendeesModifications;	// IMP=0x000000000007c8f3
@property(readonly, nonatomic) long long travelRoutingMode;
@property(retain, nonatomic) NSDate *proposedStartDate;
- (_Bool)isProposedTimeEvent;	// IMP=0x000000000007c5fe
@property(nonatomic) double travelTime;
@property(readonly, nonatomic) NSDate *startDateIncludingTravel;
- (id)_travelTimeInternalDescription;	// IMP=0x000000000007c34e
@property(nonatomic) int externalTrackingStatus;
- (_Bool)_shouldAlertInviteeDeclines;	// IMP=0x000000000007c293
- (void)_setInvitationStatusUnalertedIfNecessary;	// IMP=0x000000000007c23a
- (void)_setInvitationStatusAlertedIfNecessary;	// IMP=0x000000000007c1fc
@property(nonatomic) _Bool isAlerted;
- (void)removeEventAction:(id)arg1;	// IMP=0x000000000007c183
- (void)addEventAction:(id)arg1;	// IMP=0x000000000007c167
@property(copy, nonatomic) NSSet *actions;
- (void)clearInvitationStatus;	// IMP=0x000000000007c0e8
@property(nonatomic) unsigned long long invitationStatus;
- (void)setConferencesSet:(id)arg1;	// IMP=0x000000000007c021
- (id)conferencesSet;	// IMP=0x000000000007c005
- (id)_buildConferenceStringFromNotesWithoutConference:(id)arg1 serializedConference:(id)arg2;	// IMP=0x000000000007bf22
@property(retain, nonatomic) EKVirtualConference *virtualConference;
- (id)_originallyCommittedVirtualConference;	// IMP=0x000000000007ba6f
- (void)_removeDefaultAlarms;	// IMP=0x000000000007b448
- (void)_addDefaultAlarms;	// IMP=0x000000000007b30e
- (void)_updateDefaultAlarms;	// IMP=0x000000000007b2c7
- (id)defaultAlarms;	// IMP=0x000000000007b0c1
- (void)setResponseComment:(id)arg1;	// IMP=0x000000000007b0a5
- (id)responseComment;	// IMP=0x000000000007b089
@property(nonatomic) long long availability;
- (_Bool)futureOccurrencesCannotBeAffectedByChangingStartDateToDate:(id)arg1;	// IMP=0x000000000007ae30
@property(readonly, nonatomic) _Bool hasComplexRecurrence;
- (id)startDateForRecurrence;	// IMP=0x000000000007a9af
- (void)makeRecurrenceEndCountBased;	// IMP=0x000000000007a861
- (void)makeRecurrenceEndDateBased;	// IMP=0x000000000007a723
- (void)setRecurrenceRule:(id)arg1;	// IMP=0x000000000007a6a6
- (id)recurrenceRule;	// IMP=0x000000000007a630
- (id)lunarCalendarString;	// IMP=0x000000000007a61e
- (void)setLunarCalendarString:(id)arg1;	// IMP=0x000000000007a60c
- (_Bool)isBirthday;	// IMP=0x000000000007a5d9
- (void)setBirthdayContact:(id)arg1;	// IMP=0x000000000007a52f
- (id)birthdayContactName;	// IMP=0x000000000007a513
- (void)setBirthdayContactIdentifier:(id)arg1;	// IMP=0x000000000007a4f7
@property(readonly, nonatomic) NSString *birthdayContactIdentifier;
@property(readonly, nonatomic) long long birthdayPersonID;
- (id)birthdayID;	// IMP=0x000000000007a46e
- (long long)_parentParticipationStatus;	// IMP=0x000000000007a421
- (void)markEventAsAttendeeForward;	// IMP=0x000000000007a3b0
- (_Bool)currentUserMayActAsOrganizer;	// IMP=0x000000000007a2d5
@property(readonly, nonatomic, getter=isCurrentUserInvitedAttendee) _Bool currentUserInvitedAttendee;
@property(readonly, nonatomic) long long currentUserGeneralizedParticipantRole;
- (_Bool)_userAddressesRepresentInvitedAttendee:(id)arg1 checkEmailAddresses:(_Bool)arg2;	// IMP=0x0000000000079c60
@property(readonly, nonatomic) _Bool allowsParticipantStatusModifications;
@property(readonly, nonatomic) _Bool supportsParticipationStatusModificationsWithoutNotification;
@property(nonatomic) long long participationStatus;
- (_Bool)_isParticipationStatusDirty;	// IMP=0x00000000000797db
@property(nonatomic) _Bool firedTTL;
@property(nonatomic) long long locationPredictionState;
- (void)setNeedsOccurrenceCacheUpdate:(_Bool)arg1;	// IMP=0x00000000000795d8
- (_Bool)needsOccurrenceCacheUpdate;	// IMP=0x000000000007958a
@property(nonatomic) long long status;
@property(readonly, copy, nonatomic) NSDate *initialEndDate;
@property(readonly, nonatomic) NSDate *occurrenceDate;
@property(readonly, nonatomic) _Bool isMasterOrDetachedOccurrence;
@property(readonly, nonatomic) _Bool isMaster;
@property(readonly, copy, nonatomic) NSDate *initialStartDate;
- (void)setOriginalStartDate:(id)arg1;	// IMP=0x00000000000792c6
@property(readonly, nonatomic) NSDate *originalStartDate;
- (_Bool)isFloating;	// IMP=0x0000000000079277
- (id)effectiveTimeZone;	// IMP=0x00000000000791fe
- (_Bool)_settingTimeZoneChangesStartEndDates;	// IMP=0x00000000000791f6
- (void)setTimeZone:(id)arg1;	// IMP=0x0000000000078e87
- (void)forceSetTimeZone:(id)arg1;	// IMP=0x0000000000078e58
@property(copy, nonatomic) NSDate *endDate;
- (void)_updateEndDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;	// IMP=0x0000000000078c2b
@property(readonly, nonatomic) EKCalendarDate *endCalendarDate;
- (void)setEndDateRaw:(id)arg1;	// IMP=0x0000000000078b91
- (id)endDateRaw;	// IMP=0x0000000000078b75
@property(readonly, nonatomic) double durationIncludingTravel;
@property(readonly, nonatomic) double duration;
- (void)_setStartDate:(id)arg1 andClearProposedTimes:(_Bool)arg2;	// IMP=0x00000000000787d3
- (void)_updateStartDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;	// IMP=0x000000000007863d
- (id)_adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2 pinMode:(unsigned long long)arg3 clientCalendarDate:(id *)arg4;	// IMP=0x00000000000784ae
- (id)adjustedPersistedDateForDate:(id)arg1 withAdjustmentMode:(unsigned long long)arg2;	// IMP=0x0000000000078496
- (id)_pinDate:(id)arg1 withPinMode:(unsigned long long)arg2;	// IMP=0x000000000007835f
- (void)overrideStartDate:(id)arg1;	// IMP=0x000000000007834b
@property(copy, nonatomic) NSDate *startDate;
@property(readonly, nonatomic) EKCalendarDate *startCalendarDate;
- (id)_committedEndDate;	// IMP=0x00000000000782ba
- (id)_committedStartDate;	// IMP=0x0000000000078272
- (void)setStartDateRaw:(id)arg1;	// IMP=0x000000000007823a
- (id)startDateRaw;	// IMP=0x000000000007821e
@property(readonly, nonatomic) EKCalendarDate *startCalendarDateIncludingTravelTime;
@property(nonatomic, getter=isAllDay) _Bool allDay;
- (_Bool)_isAllDay;	// IMP=0x0000000000077e5d
@property(nonatomic) _Bool isPhantom;
- (void)setPhantomMaster:(_Bool)arg1;	// IMP=0x0000000000077d97
- (_Bool)phantomMaster;	// IMP=0x0000000000077d85
- (id)title;	// IMP=0x0000000000077ac9
- (void)setTitle:(id)arg1;	// IMP=0x0000000000077a65
- (id)committedValueForKey:(id)arg1;	// IMP=0x0000000000077978
- (void)setNeedsGeocoding:(_Bool)arg1;	// IMP=0x0000000000077927
- (_Bool)needsGeocoding;	// IMP=0x00000000000778d4
- (void)postModifiedNotificationWithUserInfo:(id)arg1;	// IMP=0x0000000000077851
- (void)postModifiedNotification;	// IMP=0x00000000000777c9
@property(readonly, nonatomic) _Bool isAllDayDirty;
@property(readonly, nonatomic) _Bool isEndDateDirty;
@property(readonly, nonatomic) _Bool isStartDateDirty;
@property(readonly, nonatomic) _Bool isStatusDirty;
@property(readonly) unsigned long long hash;
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000000773d4
@property(readonly, nonatomic) NSURL *externalURL;
- (id)externalURI;	// IMP=0x0000000000077102
@property(readonly, nonatomic) NSDate *recurrenceDate;
@property(readonly, nonatomic) EKRecurrenceIdentifier *recurrenceIdentifier;
@property(readonly, nonatomic) NSString *eventOccurrenceID;
- (id)specificIdentifier;	// IMP=0x0000000000076f6c
@property(readonly, nonatomic) NSString *eventIdentifier;
- (unsigned long long)entityType;	// IMP=0x0000000000076e76
- (id)_calculateDurationWithStart:(id)arg1 end:(id)arg2 allDay:(_Bool)arg3;	// IMP=0x0000000000076e30
- (id)initWithPersistentObject:(id)arg1 occurrenceDate:(id)arg2;	// IMP=0x0000000000076b28
- (id)initWithObjectForCopy:(id)arg1;	// IMP=0x00000000000769f4
- (id)initWithPersistentObject:(id)arg1;	// IMP=0x00000000000769e0
- (id)initWithEventStore:(id)arg1;	// IMP=0x00000000000768f3
- (id)init;	// IMP=0x00000000000768b1
- (id)_prioritizedConferencesSources;	// IMP=0x0000000000033b54
- (id)_detectConferenceURL;	// IMP=0x0000000000033af1
- (id)conferenceURLDetected;	// IMP=0x00000000000339f5
- (void)clearDetectedConferenceURL;	// IMP=0x00000000000339dc
- (id)conferenceURLForDisplay;	// IMP=0x00000000000338fa
- (_Bool)conferenceURLForDisplayCached;	// IMP=0x00000000000337f0
- (void)clearParsedConference;	// IMP=0x00000000000337d7
- (id)parsedConference;	// IMP=0x000000000003366b
- (void)setURLCommon:(id)arg1;	// IMP=0x0000000000033659
- (void)setNotesCommon:(id)arg1;	// IMP=0x000000000003362b
@property(readonly, nonatomic) NSArray *locationsWithoutPrediction;
@property(retain, nonatomic) NSArray *locations;
- (_Bool)_couldBeJunkCommon;	// IMP=0x00000000000333d6
@property(nonatomic) unsigned long long cachedJunkStatus; // @dynamic cachedJunkStatus;
- (void)setIsJunk:(_Bool)arg1 shouldSave:(_Bool)arg2;	// IMP=0x0000000000032f52

// Remaining properties
@property(readonly, nonatomic) NSString *UUID; // @dynamic UUID;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, nonatomic) EKEventStore *eventStore;
@property(readonly, nonatomic) EKParticipant *organizer; // @dynamic organizer;
@property(readonly) Class superclass;
@property(retain, nonatomic) EKStructuredLocation *travelStartLocation; // @dynamic travelStartLocation;

@end

