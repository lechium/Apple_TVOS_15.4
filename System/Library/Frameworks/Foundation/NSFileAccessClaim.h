//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <Foundation/NSSecureCoding-Protocol.h>

@class NSArray, NSCountedSet, NSError, NSFileAccessProcessManager, NSMutableArray, NSMutableDictionary, NSMutableOrderedSet, NSMutableSet, NSString, NSXPCConnection;
@protocol OS_dispatch_queue, OS_dispatch_semaphore;

__attribute__((visibility("hidden")))
@interface NSFileAccessClaim : NSObject <NSSecureCoding>
{
    NSXPCConnection *_client;	// 8 = 0x8
    NSString *_claimID;	// 16 = 0x10
    NSString *_purposeIDOrNil;	// 24 = 0x18
    _Bool _cameFromSuperarbiter;	// 32 = 0x20
    unsigned long long _blockageCount;	// 40 = 0x28
    _Bool _didWait;	// 48 = 0x30
    _Bool _isRevoked;	// 49 = 0x31
    NSMutableArray *_claimerBlockageReasons;	// 56 = 0x38
    NSError *_claimerError;	// 64 = 0x40
    NSMutableOrderedSet *_pendingClaims;	// 72 = 0x48
    NSMutableSet *_blockingClaims;	// 80 = 0x50
    NSCountedSet *_blockingReactorIDs;	// 88 = 0x58
    NSMutableArray *_providerCancellationProcedures;	// 96 = 0x60
    NSMutableDictionary *_reacquisitionProceduresByPresenterID;	// 104 = 0x68
    NSMutableArray *_revocationProcedures;	// 112 = 0x70
    NSMutableArray *_devaluationProcedures;	// 120 = 0x78
    NSMutableArray *_finishingProcedures;	// 128 = 0x80
    NSFileAccessProcessManager *_processManager;	// 136 = 0x88
    NSObject<OS_dispatch_semaphore> *_claimerWaiter;	// 144 = 0x90
    _Bool _hasInvokedClaimer;	// 152 = 0x98
    _Bool _shouldEnableMaterializationDuringAccessorBlock;	// 153 = 0x99
    id _claimerOrNil;	// 160 = 0xa0
    CDUnknownBlockType _serverClaimerOrNil;	// 168 = 0xa8
    NSMutableArray *_sandboxTokens;	// 176 = 0xb0
    NSObject<OS_dispatch_queue> *_arbiterQueue;	// 184 = 0xb8
    id _originatingReactorQueueID;	// 192 = 0xc0
    NSMutableDictionary *_fileHandlesForEvictionProtection;	// 200 = 0xc8
}

+ (_Bool)supportsSecureCoding;	// IMP=0x00000000001d60db
+ (_Bool)canNewWriteOfItemAtLocation:(id)arg1 options:(unsigned long long)arg2 safelyOverlapExistingWriteOfItemAtLocation:(id)arg3 options:(unsigned long long)arg4;	// IMP=0x00000000001d5b68
+ (_Bool)canReadingItemAtLocation:(id)arg1 options:(unsigned long long)arg2 safelyOverlapNewWriting:(_Bool)arg3 ofItemAtLocation:(id)arg4 options:(unsigned long long)arg5;	// IMP=0x00000000001d5aff
@property _Bool shouldEnableMaterializationDuringAccessorBlock; // @synthesize shouldEnableMaterializationDuringAccessorBlock=_shouldEnableMaterializationDuringAccessorBlock;
@property(readonly) NSObject<OS_dispatch_semaphore> *claimerWaiter; // @synthesize claimerWaiter=_claimerWaiter;
- (void)_protectIfNecessaryFileAtURL:(id)arg1 withOptions:(unsigned long long)arg2 forReading:(_Bool)arg3;	// IMP=0x00000000001dcfa0
- (void)protectFilesAgainstEviction;	// IMP=0x00000000001dcf9a
- (_Bool)shouldCancelInsteadOfWaiting;	// IMP=0x00000000001dcf92
@property(readonly, copy) NSArray *allURLs;
- (void)disavowed;	// IMP=0x00000000001dce71
- (void)finished;	// IMP=0x00000000001dcc6d
- (_Bool)shouldBeRevokedPriorToInvokingAccessor;	// IMP=0x00000000001dcc65
- (id)purposeIDOfClaimOnItemAtLocation:(id)arg1 forMessagingPresenter:(id)arg2;	// IMP=0x00000000001dcaa6
- (_Bool)checkIfSymbolicLinkAtURL:(id)arg1 withResolutionCount:(long long *)arg2 andIfSoThenReevaluateSelf:(CDUnknownBlockType)arg3;	// IMP=0x00000000001dc844
- (id)description;	// IMP=0x00000000001dc82b
- (id)descriptionWithIndenting:(id)arg1;	// IMP=0x00000000001dc3d7
- (void)itemAtLocation:(id)arg1 wasReplacedByItemAtLocation:(id)arg2;	// IMP=0x00000000001dc3d1
- (_Bool)isRevoked;	// IMP=0x00000000001dc3c8
- (_Bool)isGranted;	// IMP=0x00000000001dc3b0
- (void)devalueOldClaim:(id)arg1;	// IMP=0x00000000001dc3aa
- (void)cancelled;	// IMP=0x00000000001dc1eb
- (void)devalueSelf;	// IMP=0x00000000001dbf08
- (void)revoked;	// IMP=0x00000000001dbbf3
- (void)invokeClaimer;	// IMP=0x00000000001dbbc2
- (void)prepareItemForUploadingFromURL:(id)arg1 thenContinue:(CDUnknownBlockType)arg2;	// IMP=0x00000000001dab21
- (_Bool)_writeArchiveOfDirectoryAtURL:(id)arg1 toURL:(id)arg2 error:(id *)arg3;	// IMP=0x00000000001da46f
- (_Bool)canAccessLocations:(id)arg1 forReading:(_Bool)arg2 error:(id *)arg3;	// IMP=0x00000000001da1dd
- (void)makePresentersOfItemAtLocation:(id)arg1 orContainedItem:(_Bool)arg2 relinquishUsingProcedureGetter:(CDUnknownBlockType)arg3;	// IMP=0x00000000001d96af
- (void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 writingOptions:(unsigned long long)arg3 thenContinue:(CDUnknownBlockType)arg4;	// IMP=0x00000000001d9538
- (void)makeProviderOfItemAtLocation:(id)arg1 provideOrAttachPhysicalURLIfNecessaryForPurposeID:(id)arg2 readingOptions:(unsigned long long)arg3 thenContinue:(CDUnknownBlockType)arg4;	// IMP=0x00000000001d93cf
- (void)makeProviderOfItemAtLocation:(id)arg1 providePhysicalURLThenContinue:(CDUnknownBlockType)arg2;	// IMP=0x00000000001d9100
- (void)makeProvidersProvideItemsForReadingLocations:(id)arg1 options:(unsigned long long *)arg2 andWritingLocationsIfNecessary:(id)arg3 options:(unsigned long long *)arg4 thenContinue:(CDUnknownBlockType)arg5;	// IMP=0x00000000001d8500
- (void)_checkIfMovingRequiresProvidingAmongWritingLocations:(id)arg1 options:(unsigned long long *)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x00000000001d7893
- (void)makeProviderOfItemAtLocation:(id)arg1 provideIfNecessaryWithOptions:(unsigned long long)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x00000000001d7441
- (_Bool)shouldMakeProviderProvideItemAtLocation:(id)arg1 withOptions:(unsigned long long)arg2;	// IMP=0x00000000001d73d4
- (void)ensureProvidersOfItemsAtReadingLocations:(id)arg1 writingLocations:(id)arg2 thenContinue:(CDUnknownBlockType)arg3;	// IMP=0x00000000001d72ec
- (void)granted;	// IMP=0x00000000001d72e6
- (_Bool)isBlockedByWritingItemAtLocation:(id)arg1 options:(unsigned long long)arg2;	// IMP=0x00000000001d72de
- (_Bool)isBlockedByReadingItemAtLocation:(id)arg1 options:(unsigned long long)arg2;	// IMP=0x00000000001d72d6
- (void)removePendingClaims:(id)arg1;	// IMP=0x00000000001d715c
- (id)pendingClaims;	// IMP=0x00000000001d713a
- (void)addPendingClaim:(id)arg1;	// IMP=0x00000000001d709c
- (void)evaluateNewClaim:(id)arg1;	// IMP=0x00000000001d6f59
- (void)scheduleBlockedClaim:(id)arg1;	// IMP=0x00000000001d6ccf
- (void)givePriorityToClaim:(id)arg1;	// IMP=0x00000000001d6b19
- (_Bool)isBlockedByClaimWithPurposeID:(id)arg1;	// IMP=0x00000000001d69de
- (_Bool)claimerInvokingIsBlockedByReactorWithID:(id)arg1;	// IMP=0x00000000001d68a4
- (void)removeBlockingReactorID:(id)arg1;	// IMP=0x00000000001d688e
- (void)addBlockingReactorID:(id)arg1;	// IMP=0x00000000001d6851
- (void)whenFinishedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x00000000001d67e7
- (void)whenDevaluedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x00000000001d6786
- (void)whenRevokedPerformProcedure:(CDUnknownBlockType)arg1;	// IMP=0x00000000001d6725
- (_Bool)evaluateSelfWithRootNode:(id)arg1 checkSubarbitrability:(_Bool)arg2;	// IMP=0x00000000001d671d
- (id)claimerError;	// IMP=0x00000000001d6706
- (void)setClaimerError:(id)arg1;	// IMP=0x00000000001d66d1
- (void)unblockClaimerForReason:(id)arg1;	// IMP=0x00000000001d6661
- (void)blockClaimerForReason:(id)arg1;	// IMP=0x00000000001d6615
- (_Bool)didWait;	// IMP=0x00000000001d660c
- (void)unblock;	// IMP=0x00000000001d6563
- (void)block;	// IMP=0x00000000001d6531
- (void)startObservingClientState;	// IMP=0x00000000001d62e9
- (_Bool)cameFromSuperarbiter;	// IMP=0x00000000001d62e0
- (void)setCameFromSuperarbiter;	// IMP=0x00000000001d62d6
- (void)acceptClaimFromClient:(id)arg1 arbiterQueue:(id)arg2 grantHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000001d6222
- (void)prepareClaimForGrantingWithArbiterQueue:(id)arg1;	// IMP=0x00000000001d614f
- (void)forwardUsingConnection:(id)arg1 crashHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000001d6149
- (int)clientProcessIdentifier;	// IMP=0x00000000001d6128
- (id)purposeID;	// IMP=0x00000000001d6111
- (id)claimID;	// IMP=0x00000000001d60fa
- (id)client;	// IMP=0x00000000001d60e3
- (id)initWithCoder:(id)arg1;	// IMP=0x00000000001d5fd8
- (void)encodeWithCoder:(id)arg1;	// IMP=0x00000000001d5f2d
- (void)dealloc;	// IMP=0x00000000001d5df0
- (id)initWithClient:(id)arg1 claimID:(id)arg2 purposeID:(id)arg3;	// IMP=0x00000000001d5d48
- (void)_setupWithClaimID:(id)arg1 purposeID:(id)arg2 originatingReactorQueueID:(id)arg3;	// IMP=0x00000000001d5cb2
- (_Bool)shouldInformProvidersAboutEndOfWriteWithOptions:(unsigned long long)arg1;	// IMP=0x00000000001d5c88
- (_Bool)shouldWritingWithOptions:(unsigned long long)arg1 causePresenterToRelinquish:(id)arg2;	// IMP=0x00000000001d5c78
- (_Bool)shouldReadingWithOptions:(unsigned long long)arg1 causePresenterToRelinquish:(id)arg2;	// IMP=0x00000000001d5bf9

@end

