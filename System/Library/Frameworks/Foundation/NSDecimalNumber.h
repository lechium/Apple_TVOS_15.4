//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@interface NSDecimalNumber
{
    unsigned int _exponent:8;	// 8 = 0x8
    unsigned int _length:4;	// 9 = 0x9
    unsigned int _isNegative:1;	// 9 = 0x9
    unsigned int _isCompact:1;	// 9 = 0x9
    unsigned int _reserved:1;	// 9 = 0x9
    unsigned int _hasExternalRefCount:1;	// 9 = 0x9
    unsigned int _refs:16;	// 10 = 0xa
    unsigned short _mantissa[0];	// 12 = 0xc
}

+ (id)defaultBehavior;	// IMP=0x000000000004bc3a
+ (void)setDefaultBehavior:(id)arg1;	// IMP=0x000000000004bbf0
+ (id)notANumber;	// IMP=0x000000000004b185
+ (id)one;	// IMP=0x000000000004b178
+ (id)zero;	// IMP=0x000000000004b16b
+ (id)maximumDecimalNumber;	// IMP=0x000000000004b15e
+ (id)minimumDecimalNumber;	// IMP=0x000000000004b151
+ (_Bool)supportsSecureCoding;	// IMP=0x000000000004b0c1
+ (id)decimalNumberWithString:(id)arg1 locale:(id)arg2;	// IMP=0x000000000004afb8
+ (id)decimalNumberWithString:(id)arg1;	// IMP=0x000000000004af97
+ (id)decimalNumberWithDecimal:(CDStruct_5fe7aead)arg1;	// IMP=0x000000000004af5f
+ (id)decimalNumberWithMantissa:(unsigned long long)arg1 exponent:(short)arg2 isNegative:(_Bool)arg3;	// IMP=0x000000000004af3e
+ (id)allocWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000004ae4c
+ (void)initialize;	// IMP=0x000000000004ae2e
+ (id)numberWithBool:(_Bool)arg1;	// IMP=0x000000000004d43e
+ (id)numberWithDouble:(double)arg1;	// IMP=0x000000000004d403
+ (id)numberWithFloat:(float)arg1;	// IMP=0x000000000004d3c8
+ (id)numberWithUnsignedLongLong:(unsigned long long)arg1;	// IMP=0x000000000004d392
+ (id)numberWithLongLong:(long long)arg1;	// IMP=0x000000000004d35c
+ (id)numberWithUnsignedLong:(unsigned long long)arg1;	// IMP=0x000000000004d326
+ (id)numberWithLong:(long long)arg1;	// IMP=0x000000000004d2f0
+ (id)numberWithUnsignedInteger:(unsigned long long)arg1;	// IMP=0x000000000004d2ba
+ (id)numberWithUnsignedInt:(unsigned int)arg1;	// IMP=0x000000000004d286
+ (id)numberWithInteger:(long long)arg1;	// IMP=0x000000000004d250
+ (id)numberWithInt:(int)arg1;	// IMP=0x000000000004d21c
+ (id)numberWithUnsignedShort:(unsigned short)arg1;	// IMP=0x000000000004d1e8
+ (id)numberWithShort:(short)arg1;	// IMP=0x000000000004d1b4
+ (id)numberWithUnsignedChar:(unsigned char)arg1;	// IMP=0x000000000004d180
+ (id)numberWithChar:(BOOL)arg1;	// IMP=0x000000000004d14c
- (_Bool)_getCString:(char *)arg1 length:(int)arg2 multiplier:(double)arg3;	// IMP=0x000000000004c24a
- (_Bool)boolValue;	// IMP=0x000000000004c226
- (float)floatValue;	// IMP=0x000000000004c20f
- (unsigned long long)unsignedLongLongValue;	// IMP=0x000000000004c170
- (long long)longLongValue;	// IMP=0x000000000004c0c7
- (unsigned long long)unsignedLongValue;	// IMP=0x000000000004c028
- (long long)longValue;	// IMP=0x000000000004bf7f
- (unsigned int)unsignedIntValue;	// IMP=0x000000000004bf67
- (int)intValue;	// IMP=0x000000000004bf50
- (unsigned short)unsignedShortValue;	// IMP=0x000000000004bf36
- (short)shortValue;	// IMP=0x000000000004bf1e
- (unsigned char)unsignedCharValue;	// IMP=0x000000000004bf04
- (BOOL)charValue;	// IMP=0x000000000004beea
- (_Bool)_allowsDirectEncoding;	// IMP=0x000000000004bee2
- (void)encodeWithCoder:(id)arg1;	// IMP=0x000000000004bcad
- (Class)classForCoder;	// IMP=0x000000000004bc9c
- (id)decimalNumberByRoundingAccordingToBehavior:(id)arg1;	// IMP=0x000000000004baf0
- (id)decimalNumberByMultiplyingByPowerOf10:(short)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004ba25
- (id)decimalNumberByMultiplyingByPowerOf10:(short)arg1;	// IMP=0x000000000004b9d6
- (id)decimalNumberByRaisingToPower:(unsigned long long)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004b909
- (id)decimalNumberByRaisingToPower:(unsigned long long)arg1;	// IMP=0x000000000004b8ba
- (id)decimalNumberByDividingBy:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004b7ea
- (id)decimalNumberByDividingBy:(id)arg1;	// IMP=0x000000000004b79b
- (id)decimalNumberByMultiplyingBy:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004b6cb
- (id)decimalNumberByMultiplyingBy:(id)arg1;	// IMP=0x000000000004b67c
- (id)decimalNumberBySubtracting:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004b5ac
- (id)decimalNumberBySubtracting:(id)arg1;	// IMP=0x000000000004b55d
- (id)decimalNumberBySubstracting:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004b54b
- (id)decimalNumberBySubstracting:(id)arg1;	// IMP=0x000000000004b504
- (id)decimalNumberByAdding:(id)arg1 withBehavior:(id)arg2;	// IMP=0x000000000004b38e
- (id)decimalNumberByAdding:(id)arg1;	// IMP=0x000000000004b33f
- (void)getValue:(void *)arg1;	// IMP=0x000000000004b31e
@property(readonly) double doubleValue;
@property(readonly) const char *objCType;
- (_Bool)isEqual:(id)arg1;	// IMP=0x000000000004b216
- (long long)compare:(id)arg1;	// IMP=0x000000000004b192
@property(readonly) CDStruct_5fe7aead decimalValue;
- (id)descriptionWithLocale:(id)arg1;	// IMP=0x000000000004b117
- (id)description;	// IMP=0x000000000004b103
- (id)initWithCoder:(id)arg1;	// IMP=0x000000000004b0c9
- (id)initWithString:(id)arg1 locale:(id)arg2;	// IMP=0x000000000004b087
- (id)initWithString:(id)arg1;	// IMP=0x000000000004b04d
- (id)initWithDecimal:(CDStruct_5fe7aead)arg1;	// IMP=0x000000000004b013
- (id)initWithMantissa:(unsigned long long)arg1 exponent:(short)arg2 isNegative:(_Bool)arg3;	// IMP=0x000000000004afd9
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x000000000004ae92
- (id)copy;	// IMP=0x000000000004ae87

@end

