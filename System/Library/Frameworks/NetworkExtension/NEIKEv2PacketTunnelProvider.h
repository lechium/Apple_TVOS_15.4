//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class NEIKEv2MOBIKE, NEIKEv2Rekey, NEIKEv2Server, NEIKEv2Session, NEUserNotification, NSArray, NSDictionary, NSObject, NWPath, NWPathEvaluator, NWResolver;
@protocol OS_dispatch_queue, OS_dispatch_semaphore, OS_dispatch_source;

@interface NEIKEv2PacketTunnelProvider
{
    _Bool _isIfCellular;	// 9 = 0x9
    _Bool _hasNAT;	// 10 = 0xa
    _Bool _dispose;	// 11 = 0xb
    _Bool _sessionDidConnect;	// 12 = 0xc
    _Bool _mobikeCapable;	// 13 = 0xd
    _Bool _authenticationPrompted;	// 14 = 0xe
    _Bool _isObserving;	// 15 = 0xf
    unsigned int _flags;	// 16 = 0x10
    NSArray *_ikeConfig;	// 24 = 0x18
    NSArray *_localTrafficSelectors;	// 32 = 0x20
    NSArray *_remoteTrafficSelectors;	// 40 = 0x28
    NSDictionary *_options;	// 48 = 0x30
    struct NEVirtualInterface_s *_virtualInterface;	// 56 = 0x38
    NEIKEv2Server *_server;	// 64 = 0x40
    NWResolver *_resolver;	// 72 = 0x48
    NSObject<OS_dispatch_source> *_resolverWaitTimer;	// 80 = 0x50
    NEIKEv2Rekey *_rekey;	// 88 = 0x58
    NSObject<OS_dispatch_semaphore> *_getSocketSemaphore;	// 96 = 0x60
    NEIKEv2MOBIKE *_mobikeHandle;	// 104 = 0x68
    CDUnknownBlockType _startTunnelCompletionHandler;	// 112 = 0x70
    CDUnknownBlockType _stopTunnelCompletionHandler;	// 120 = 0x78
    CDUnknownBlockType _dnsResolverCompletionHandler;	// 128 = 0x80
    long long _tunnelKind;	// 136 = 0x88
    NWPath *_path;	// 144 = 0x90
    NEUserNotification *_g_notification;	// 152 = 0x98
    NEIKEv2Session *_session;	// 160 = 0xa0
    unsigned long long _ifIndex;	// 168 = 0xa8
    long long _pathStatus;	// 176 = 0xb0
    NSObject<OS_dispatch_queue> *_queue;	// 184 = 0xb8
    NWPathEvaluator *_scopedPathEvaluator;	// 192 = 0xc0
}

- (void).cxx_destruct;	// IMP=0x00000000000f4c77
@property(retain) NWPathEvaluator *scopedPathEvaluator; // @synthesize scopedPathEvaluator=_scopedPathEvaluator;
@property unsigned int flags; // @synthesize flags=_flags;
@property(retain) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property long long pathStatus; // @synthesize pathStatus=_pathStatus;
@property unsigned long long ifIndex; // @synthesize ifIndex=_ifIndex;
@property(retain) NEIKEv2Session *session; // @synthesize session=_session;
@property _Bool isObserving; // @synthesize isObserving=_isObserving;
@property(retain) NEUserNotification *g_notification; // @synthesize g_notification=_g_notification;
@property _Bool authenticationPrompted; // @synthesize authenticationPrompted=_authenticationPrompted;
@property(retain) NWPath *path; // @synthesize path=_path;
@property _Bool mobikeCapable; // @synthesize mobikeCapable=_mobikeCapable;
@property _Bool sessionDidConnect; // @synthesize sessionDidConnect=_sessionDidConnect;
@property long long tunnelKind; // @synthesize tunnelKind=_tunnelKind;
@property _Bool dispose; // @synthesize dispose=_dispose;
@property(copy) CDUnknownBlockType dnsResolverCompletionHandler; // @synthesize dnsResolverCompletionHandler=_dnsResolverCompletionHandler;
@property(copy) CDUnknownBlockType stopTunnelCompletionHandler; // @synthesize stopTunnelCompletionHandler=_stopTunnelCompletionHandler;
@property(copy) CDUnknownBlockType startTunnelCompletionHandler; // @synthesize startTunnelCompletionHandler=_startTunnelCompletionHandler;
@property(retain) NEIKEv2MOBIKE *mobikeHandle; // @synthesize mobikeHandle=_mobikeHandle;
@property(retain) NSObject<OS_dispatch_semaphore> *getSocketSemaphore; // @synthesize getSocketSemaphore=_getSocketSemaphore;
@property(retain) NEIKEv2Rekey *rekey; // @synthesize rekey=_rekey;
@property(retain) NSObject<OS_dispatch_source> *resolverWaitTimer; // @synthesize resolverWaitTimer=_resolverWaitTimer;
@property(retain) NWResolver *resolver; // @synthesize resolver=_resolver;
@property(retain) NEIKEv2Server *server; // @synthesize server=_server;
@property _Bool hasNAT; // @synthesize hasNAT=_hasNAT;
@property _Bool isIfCellular; // @synthesize isIfCellular=_isIfCellular;
@property struct NEVirtualInterface_s *virtualInterface; // @synthesize virtualInterface=_virtualInterface;
@property(retain) NSDictionary *options; // @synthesize options=_options;
@property(retain) NSArray *remoteTrafficSelectors; // @synthesize remoteTrafficSelectors=_remoteTrafficSelectors;
@property(retain) NSArray *localTrafficSelectors; // @synthesize localTrafficSelectors=_localTrafficSelectors;
@property(retain) NSArray *ikeConfig; // @synthesize ikeConfig=_ikeConfig;
- (_Bool)NEIKEv2ProviderAuthenticate:(id)arg1;	// IMP=0x00000000000f43bd
- (_Bool)tryAlternateServerAddresses;	// IMP=0x00000000000f400b
- (void)setTunnelNetworkSettings:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000f3dea
- (void)startRekeyTimer:(_Bool)arg1;	// IMP=0x00000000000f3802
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x00000000000f3590
- (void)observerHelperHandler:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;	// IMP=0x00000000000f3479
- (void)handleConfigChange;	// IMP=0x00000000000f2eef
- (void)handleDNSResolution;	// IMP=0x00000000000f256f
- (void)handleScopedPathChange;	// IMP=0x00000000000f2068
- (void)watchIKESocketChange;	// IMP=0x00000000000f1c95
- (void)handleDefaultPathChange;	// IMP=0x00000000000f1592
- (void)handleInterfaceChange:(_Bool)arg1;	// IMP=0x00000000000f0ebf
- (void)handleInterfaceDown;	// IMP=0x00000000000f0c22
- (void)handleAdditionalServerAddressesNotification:(id)arg1;	// IMP=0x00000000000f08d7
- (int)handleRedirectNotification:(id)arg1;	// IMP=0x00000000000f0464
- (void)invokeCancelTunnel:(int)arg1;	// IMP=0x00000000000f03c0
- (_Bool)invokeStartTunnelCompletionHandler:(id)arg1;	// IMP=0x00000000000f0283
- (id)createPacketTunnelNetworkSettings;	// IMP=0x00000000000eff02
- (long long)tunnelTeardown;	// IMP=0x00000000000efb58
- (int)tunnelBringup;	// IMP=0x00000000000eec4c
- (void)setupIKEv2CallbackBlocks;	// IMP=0x00000000000ed4b7
- (void)resolveServerAddressIfNeeded:(CDUnknownBlockType)arg1;	// IMP=0x00000000000ece1b
- (void)wake;	// IMP=0x00000000000ecd0a
- (void)wakeIKEv2;	// IMP=0x00000000000ec7fc
- (void)stopTunnelWithReason:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ec617
- (void)stopIKEv2TunnelWithReason:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ec4ca
- (void)startTunnelWithOptions:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000ec340
- (void)startIKEv2TunnelWithOptions:(id)arg1;	// IMP=0x00000000000eb63d
- (void)dealloc;	// IMP=0x00000000000eb595
- (void)stopObserving;	// IMP=0x00000000000eb51d
- (void)reset:(_Bool)arg1;	// IMP=0x00000000000eb27d
- (id)init;	// IMP=0x00000000000eb0bb
- (void)ignoreSigPipe;	// IMP=0x00000000000eb08e
- (id)description;	// IMP=0x00000000000eb00d
- (id)stringForTunnelKind;	// IMP=0x00000000000eafbd

@end

