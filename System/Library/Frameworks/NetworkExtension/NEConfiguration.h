//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

#import <NetworkExtension/NEConfigurationValidating-Protocol.h>
#import <NetworkExtension/NEProfilePayloadHandlerDelegate-Protocol.h>
#import <NetworkExtension/NSCopying-Protocol.h>
#import <NetworkExtension/NSSecureCoding-Protocol.h>

@class NEAOVPN, NEAppPush, NEContentFilter, NEDNSProxy, NEDNSSettingsBundle, NEPathController, NEProfileIngestionPayloadInfo, NEVPN, NEVPNApp, NSString, NSUUID;

@interface NEConfiguration : NSObject <NEProfilePayloadHandlerDelegate, NEConfigurationValidating, NSSecureCoding, NSCopying>
{
    long long _grade;	// 8 = 0x8
    NSUUID *_identifier;	// 16 = 0x10
    NSString *_application;	// 24 = 0x18
    NSString *_name;	// 32 = 0x20
    NSString *_applicationName;	// 40 = 0x28
    NSString *_applicationIdentifier;	// 48 = 0x30
    NSString *_externalIdentifier;	// 56 = 0x38
    NEVPN *_VPN;	// 64 = 0x40
    NEAOVPN *_alwaysOnVPN;	// 72 = 0x48
    NEVPNApp *_appVPN;	// 80 = 0x50
    NEContentFilter *_contentFilter;	// 88 = 0x58
    NEProfileIngestionPayloadInfo *_payloadInfo;	// 96 = 0x60
    NEPathController *_pathController;	// 104 = 0x68
    NEDNSProxy *_dnsProxy;	// 112 = 0x70
    NEDNSSettingsBundle *_dnsSettings;	// 120 = 0x78
    NEAppPush *_appPush;	// 128 = 0x80
    long long _appPermissionType;	// 136 = 0x88
}

+ (id)configurationWithProfilePayload:(id)arg1;	// IMP=0x0000000000016122
+ (id)configurationWithProfilePayload:(id)arg1 grade:(long long)arg2;	// IMP=0x0000000000015e43
+ (void)addError:(id)arg1 toList:(id)arg2;	// IMP=0x000000000001582f
+ (_Bool)supportsSecureCoding;	// IMP=0x0000000000015827
+ (struct __CFDictionary *)copyConfigurationForProtocol:(struct __CFString *)arg1 inService:(struct __SCNetworkService *)arg2;	// IMP=0x000000000002a7fd
+ (_Bool)setConfiguration:(struct __CFDictionary *)arg1 forProtocol:(struct __CFString *)arg2 inService:(struct __SCNetworkService *)arg3;	// IMP=0x000000000002a6c7
+ (_Bool)removeSCServiceWithIdentifier:(id)arg1 fromPreferences:(struct __SCPreferences *)arg2;	// IMP=0x000000000002982c
+ (_Bool)SCServiceWithIdentifier:(id)arg1 existsInPreferences:(struct __SCPreferences *)arg2;	// IMP=0x00000000000297eb
- (void).cxx_destruct;	// IMP=0x0000000000018dca
@property(nonatomic) long long appPermissionType; // @synthesize appPermissionType=_appPermissionType;
@property(copy) NEAppPush *appPush; // @synthesize appPush=_appPush;
@property(copy) NEDNSSettingsBundle *dnsSettings; // @synthesize dnsSettings=_dnsSettings;
@property(copy) NEDNSProxy *dnsProxy; // @synthesize dnsProxy=_dnsProxy;
@property(copy) NEPathController *pathController; // @synthesize pathController=_pathController;
@property(copy) NEProfileIngestionPayloadInfo *payloadInfo; // @synthesize payloadInfo=_payloadInfo;
@property(copy) NEContentFilter *contentFilter; // @synthesize contentFilter=_contentFilter;
@property(copy) NEVPNApp *appVPN; // @synthesize appVPN=_appVPN;
@property(copy) NEAOVPN *alwaysOnVPN; // @synthesize alwaysOnVPN=_alwaysOnVPN;
@property(copy) NEVPN *VPN; // @synthesize VPN=_VPN;
@property(copy) NSString *externalIdentifier; // @synthesize externalIdentifier=_externalIdentifier;
@property(copy) NSString *applicationIdentifier; // @synthesize applicationIdentifier=_applicationIdentifier;
@property(copy) NSString *applicationName; // @synthesize applicationName=_applicationName;
@property(copy) NSString *name; // @synthesize name=_name;
@property(copy) NSString *application; // @synthesize application=_application;
@property(readonly) NSUUID *identifier; // @synthesize identifier=_identifier;
@property(readonly) long long grade; // @synthesize grade=_grade;
- (void)applyOverrides;	// IMP=0x0000000000018617
- (void)copyPasswordsFromSystemKeychain;	// IMP=0x0000000000018563
@property(readonly) NSString *pluginType;
- (void)clearUserKeychain;	// IMP=0x000000000001806e
- (void)clearSystemKeychain;	// IMP=0x000000000001805a
- (void)clearKeychainInDomain:(long long)arg1;	// IMP=0x0000000000017b39
- (_Bool)needToUpdateKeychain;	// IMP=0x000000000001777d
- (void)syncWithUserKeychain;	// IMP=0x0000000000017766
- (void)syncWithSystemKeychain;	// IMP=0x0000000000017752
- (void)syncWithKeychainInDomain:(long long)arg1;	// IMP=0x0000000000017344
- (id)descriptionWithOptions:(unsigned long long)arg1;	// IMP=0x0000000000016f03
- (id)description;	// IMP=0x0000000000016eef
- (id)generateSignature;	// IMP=0x0000000000016ed3
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x0000000000016ce0
- (_Bool)checkValidityAndCollectErrors:(id)arg1;	// IMP=0x000000000001685c
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0000000000016519
- (id)initWithCoder:(id)arg1;	// IMP=0x00000000000161b3
- (id)initWithIdentifier:(id)arg1;	// IMP=0x0000000000016140
- (void)updateWithConfiguration:(id)arg1;	// IMP=0x0000000000015b21
- (id)initWithConfiguration:(id)arg1;	// IMP=0x00000000000159d7
- (id)initWithName:(id)arg1 grade:(long long)arg2;	// IMP=0x0000000000015937
- (unsigned long long)hash;	// IMP=0x00000000000158f3
- (_Bool)isEqual:(id)arg1;	// IMP=0x0000000000015844
- (id)initWithDNSSettingsPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;	// IMP=0x000000000002839b
- (id)initWithDNSProxyPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;	// IMP=0x0000000000027e7a
- (id)initWithPathControllerPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;	// IMP=0x0000000000027604
- (_Bool)setAssociatedDomains:(id)arg1;	// IMP=0x00000000000274dd
- (_Bool)setExcludedDomains:(id)arg1;	// IMP=0x00000000000273d5
- (_Bool)setRestrictDomains:(_Bool)arg1;	// IMP=0x0000000000027354
- (_Bool)setContactsDomains:(id)arg1 accountIdentifiers:(id)arg2;	// IMP=0x00000000000270bb
- (_Bool)setContactsDomains:(id)arg1;	// IMP=0x00000000000270a7
- (_Bool)setCalendarDomains:(id)arg1 accountIdentifiers:(id)arg2;	// IMP=0x0000000000026de1
- (_Bool)setCalendarDomains:(id)arg1;	// IMP=0x0000000000026dcd
- (_Bool)setMailDomains:(id)arg1 accountIdentifiers:(id)arg2;	// IMP=0x0000000000026ae9
- (_Bool)setMailDomains:(id)arg1;	// IMP=0x0000000000026ad5
- (_Bool)validateStrings:(id)arg1;	// IMP=0x00000000000269ac
- (_Bool)setSMBDomains:(id)arg1;	// IMP=0x0000000000026885
- (_Bool)setAppLayerVPNUUID:(id)arg1 andSafariDomains:(id)arg2;	// IMP=0x000000000002668b
- (_Bool)setAppLayerVPNRuleSettings:(id)arg1 withAppIdentifier:(id)arg2;	// IMP=0x0000000000025b17
- (id)mergeArray:(id)arg1 withArray:(id)arg2;	// IMP=0x0000000000025914
- (_Bool)setProfileInfo:(id)arg1;	// IMP=0x000000000002560b
- (_Bool)setPayloadInfoCommon:(id)arg1 payloadOrganization:(id)arg2;	// IMP=0x00000000000253e1
- (_Bool)setPayloadInfoIdentity:(id)arg1;	// IMP=0x00000000000252d6
- (_Bool)setPayloadInfoIdentityPIN:(id)arg1;	// IMP=0x0000000000025236
- (_Bool)setPayloadInfoIdentityIPSecSharedSecret:(id)arg1;	// IMP=0x00000000000250b8
- (_Bool)setPayloadInfoIdentityProxy:(id)arg1;	// IMP=0x0000000000024d21
- (_Bool)setPayloadInfoIdentityUserNameAndPassword:(id)arg1;	// IMP=0x0000000000024bc1
- (_Bool)setConfigurationSharedSecret:(id)arg1;	// IMP=0x00000000000248c2
- (_Bool)setConfigurationVPNPassword:(id)arg1;	// IMP=0x000000000002473f
- (id)getConfigurationIdentifier;	// IMP=0x00000000000246ef
- (id)getPendingCertificateUUIDsInternal:(id)arg1;	// IMP=0x00000000000245c3
- (id)getPendingCertificateInfo:(id)arg1;	// IMP=0x00000000000245b1
- (id)getPendingCertificateUUIDs:(id)arg1;	// IMP=0x000000000002432d
- (id)getPendingCertificateUUIDsContentFilter:(id)arg1;	// IMP=0x0000000000024289
- (id)getPendingCertificateUUIDsAOVpn:(id)arg1;	// IMP=0x0000000000024050
- (id)getPendingCertificateUUIDsAppVPN:(id)arg1;	// IMP=0x0000000000023ea0
- (id)getPendingCertificateUUIDsVPN:(id)arg1;	// IMP=0x0000000000023c00
- (id)getCertificates;	// IMP=0x0000000000023ac4
- (_Bool)setCertificates:(id)arg1;	// IMP=0x000000000002392d
- (_Bool)setCertificateContentFilter:(id)arg1;	// IMP=0x0000000000023821
- (_Bool)setCertificatesVPN:(id)arg1;	// IMP=0x000000000002366a
- (_Bool)setCertificatesAppVPN:(id)arg1;	// IMP=0x0000000000023516
- (_Bool)setCertificatesAOVpn:(id)arg1;	// IMP=0x00000000000230c1
- (id)initWithContentFilterPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;	// IMP=0x00000000000220cf
- (id)initWithAlwaysOnVPNPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;	// IMP=0x0000000000020963
- (id)configureAOVPNTunnelFromTunnelDict:(id)arg1 tunnelDict:(id)arg2 payloadBase:(id)arg3 interfaceType:(id)arg4;	// IMP=0x000000000001fea1
- (id)initWithAppLayerVPNPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;	// IMP=0x000000000001efc5
- (id)initWithVPNPayload:(id)arg1 configurationName:(id)arg2 grade:(long long)arg3;	// IMP=0x000000000001d9e9
- (_Bool)ingestIPSecDict:(id)arg1 vpnType:(id)arg2 vpn:(id)arg3;	// IMP=0x000000000001d114
- (_Bool)ingestPPPData:(id)arg1 vnpType:(id)arg2;	// IMP=0x000000000001d024
- (_Bool)configureVpnOnDemand:(id)arg1 vpnType:(id)arg2;	// IMP=0x000000000001cec7
- (_Bool)configureVpnOnDemandRules:(id)arg1;	// IMP=0x000000000001cbd7
- (_Bool)configureIKE:(id)arg1 vpnType:(id)arg2 payloadBase:(id)arg3 vpn:(id)arg4;	// IMP=0x000000000001b37a
- (_Bool)ingestProxyOptions:(id)arg1;	// IMP=0x000000000001b1c9
- (_Bool)configurePPPWithVPNOptions:(id)arg1 payloadBase:(id)arg2;	// IMP=0x000000000001ae18
- (_Bool)configureL2TPWithPPPOptions:(id)arg1;	// IMP=0x000000000001abc7
- (_Bool)configurePPPCommon:(id)arg1;	// IMP=0x000000000001a8a0
- (_Bool)ingestPPPDict:(id)arg1;	// IMP=0x000000000001a1a7
- (_Bool)ingestDNSOptions:(id)arg1;	// IMP=0x000000000001a0b7
- (_Bool)ingestDisconnectOptions:(id)arg1;	// IMP=0x0000000000019e19
- (_Bool)configurePluginWithPayload:(id)arg1 pluginType:(id)arg2 payloadType:(id)arg3;	// IMP=0x0000000000018fb9
- (id)getConfigurationProtocol;	// IMP=0x0000000000018e84
- (_Bool)updateFromSCService:(struct __SCNetworkService *)arg1;	// IMP=0x000000000002998b
- (id)initFromSCService:(struct __SCNetworkService *)arg1;	// IMP=0x00000000000298e1
- (_Bool)applyChangesToSCServiceInPreferences:(struct __SCPreferences *)arg1;	// IMP=0x0000000000028d63
- (_Bool)isSupportedBySC;	// IMP=0x0000000000028c1e

@end

