//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MPModelAlbum, MPModelArtist, MPModelComposer, MPModelCurator, MPModelGenre, MPModelGroup, MPModelMediaClip, MPModelMovie, MPModelPlaylist, MPModelPlaylistEntry, MPModelPodcast, MPModelPodcastEpisode, MPModelRadioStation, MPModelRadioStationEvent, MPModelRecordLabel, MPModelSocialPerson, MPModelSong, MPModelTVEpisode, MPModelTVSeason, MPModelTVShow;

@interface MPModelGenericObject
{
}

+ (id)__group_KEY;	// IMP=0x00000000001e27a2
+ (id)__recordLabel_KEY;	// IMP=0x00000000001e2795
+ (id)__socialPerson_KEY;	// IMP=0x00000000001e2788
+ (id)__curator_KEY;	// IMP=0x00000000001e277b
+ (id)__genre_KEY;	// IMP=0x00000000001e276e
+ (id)__composer_KEY;	// IMP=0x00000000001e2761
+ (id)__radioStationEvent_KEY;	// IMP=0x00000000001e2754
+ (id)__radioStation_KEY;	// IMP=0x00000000001e2747
+ (id)__podcastEpisode_KEY;	// IMP=0x00000000001e273a
+ (id)__podcast_KEY;	// IMP=0x00000000001e272d
+ (id)__mediaClip_KEY;	// IMP=0x00000000001e2720
+ (id)__movie_KEY;	// IMP=0x00000000001e2713
+ (id)__show_KEY;	// IMP=0x00000000001e2706
+ (id)__season_KEY;	// IMP=0x00000000001e26f9
+ (id)__tvEpisode_KEY;	// IMP=0x00000000001e26ec
+ (id)__playlistEntry_KEY;	// IMP=0x00000000001e26df
+ (id)__playlist_KEY;	// IMP=0x00000000001e26d2
+ (id)__artist_KEY;	// IMP=0x00000000001e26c5
+ (id)__album_KEY;	// IMP=0x00000000001e26b8
+ (id)__song_KEY;	// IMP=0x00000000001e26ab
+ (id)genericObjectWithModelObject:(id)arg1;	// IMP=0x00000000001e1840
+ (id)relationshipKeyForGenericObjectType:(long long)arg1;	// IMP=0x00000000001e160e
+ (id)kindWithRelationshipKinds:(id)arg1;	// IMP=0x00000000001e15f5
+ (id)requiredStoreLibraryPersonalizationProperties;	// IMP=0x00000000001fdd7f
- (id)artworkCatalog;	// IMP=0x00000000001dfd87
- (long long)type;	// IMP=0x00000000001dfcda
- (id)flattenedGenericObject;	// IMP=0x00000000001dfbf9
- (id)anyObject;	// IMP=0x00000000001dfb18
- (id)identifiers;	// IMP=0x00000000001df948
- (id)humanDescription;	// IMP=0x00000000001df852
- (id)mergeWithObject:(id)arg1;	// IMP=0x00000000001df40d
- (id)copyWithIdentifiers:(id)arg1 propertySet:(id)arg2;	// IMP=0x00000000001df258
- (id)copyWithIdentifiers:(id)arg1 block:(CDUnknownBlockType)arg2;	// IMP=0x00000000001df1b4
- (id)mediaItemPropertyValues;	// IMP=0x0000000000106e8b
- (id)objectWithStoreLibraryPersonalizationRelativeModelObject:(id)arg1;	// IMP=0x00000000001fd878
- (id)relativeModelObjectForStoreLibraryPersonalization;	// IMP=0x00000000001fd61c
- (id)personalizationScopedPropertiesForProperties:(id)arg1;	// IMP=0x00000000001fd0a9

// Remaining properties
@property(retain, nonatomic) MPModelAlbum *album; // @dynamic album;
@property(retain, nonatomic) MPModelArtist *artist; // @dynamic artist;
@property(retain, nonatomic) MPModelComposer *composer; // @dynamic composer;
@property(retain, nonatomic) MPModelCurator *curator; // @dynamic curator;
@property(retain, nonatomic) MPModelGenre *genre; // @dynamic genre;
@property(retain, nonatomic) MPModelGroup *group; // @dynamic group;
@property(retain, nonatomic) MPModelMediaClip *mediaClip; // @dynamic mediaClip;
@property(retain, nonatomic) MPModelMovie *movie; // @dynamic movie;
@property(retain, nonatomic) MPModelPlaylist *playlist; // @dynamic playlist;
@property(retain, nonatomic) MPModelPlaylistEntry *playlistEntry; // @dynamic playlistEntry;
@property(retain, nonatomic) MPModelPodcast *podcast; // @dynamic podcast;
@property(retain, nonatomic) MPModelPodcastEpisode *podcastEpisode; // @dynamic podcastEpisode;
@property(retain, nonatomic) MPModelRadioStation *radioStation; // @dynamic radioStation;
@property(readonly, nonatomic) MPModelRadioStationEvent *radioStationEvent; // @dynamic radioStationEvent;
@property(retain, nonatomic) MPModelRecordLabel *recordLabel; // @dynamic recordLabel;
@property(retain, nonatomic) MPModelTVSeason *season; // @dynamic season;
@property(retain, nonatomic) MPModelTVShow *show; // @dynamic show;
@property(retain, nonatomic) MPModelSocialPerson *socialPerson; // @dynamic socialPerson;
@property(retain, nonatomic) MPModelSong *song; // @dynamic song;
@property(retain, nonatomic) MPModelTVEpisode *tvEpisode; // @dynamic tvEpisode;

@end

