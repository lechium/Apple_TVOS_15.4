//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

@class MPModelCurator, MPTiledArtworkRequest, NSDate, NSDateComponents, NSString, NSURL;

@interface MPModelPlaylist
{
}

+ (id)__traits_KEY;	// IMP=0x00000000001fe71b
+ (id)__downloadedDate_KEY;	// IMP=0x00000000001fe70e
+ (id)__versionHash_KEY;	// IMP=0x00000000001fe701
+ (id)__cloudVersionHash_KEY;	// IMP=0x00000000001fe6f4
+ (id)__lastDevicePlaybackDate_KEY;	// IMP=0x00000000001fe6e7
+ (id)__keepLocalManagedStatus_KEY;	// IMP=0x00000000001fe6da
+ (id)__keepLocalEnableState_KEY;	// IMP=0x00000000001fe6cd
+ (id)__tiledArtworkRequest_KEY;	// IMP=0x00000000001fe6c0
+ (id)__libraryAddedDate_KEY;	// IMP=0x00000000001fe6b3
+ (id)__libraryAdded_KEY;	// IMP=0x00000000001fe6a6
+ (id)__editorialArtworkCatalogBlock_KEY;	// IMP=0x00000000001fe699
+ (id)__artworkCatalogBlock_KEY;	// IMP=0x00000000001fe68c
+ (id)__lastModifiedDateComponents_KEY;	// IMP=0x00000000001fe67f
+ (id)__releaseDateComponents_KEY;	// IMP=0x00000000001fe672
+ (id)__shareShortURL_KEY;	// IMP=0x00000000001fe665
+ (id)__shareURL_KEY;	// IMP=0x00000000001fe658
+ (id)__shortEditorNotes_KEY;	// IMP=0x00000000001fe64b
+ (id)__editorNotes_KEY;	// IMP=0x00000000001fe63e
+ (id)__trackCount_KEY;	// IMP=0x00000000001fe631
+ (id)__type_KEY;	// IMP=0x00000000001fe624
+ (id)__userEditableComponents_KEY;	// IMP=0x00000000001fe617
+ (id)__subscribed_KEY;	// IMP=0x00000000001fe60a
+ (id)__visiblePlaylist_KEY;	// IMP=0x00000000001fe5fd
+ (id)__publicPlaylist_KEY;	// IMP=0x00000000001fe5f0
+ (id)__owner_KEY;	// IMP=0x00000000001fe5e3
+ (id)__curatorPlaylist_KEY;	// IMP=0x00000000001fe5d6
+ (id)__hasExplicitContent_KEY;	// IMP=0x00000000001fe5c9
+ (id)__hasCleanContent_KEY;	// IMP=0x00000000001fe5bc
+ (id)__curator_KEY;	// IMP=0x00000000001fe5af
+ (id)__descriptionText_KEY;	// IMP=0x00000000001fe5a2
+ (id)__name_KEY;	// IMP=0x00000000001fe595
+ (id)kindWithVariants:(unsigned long long)arg1 playlistEntryKind:(id)arg2 options:(unsigned long long)arg3;	// IMP=0x00000000001fe57c
+ (id)kindWithPlaylistEntryKind:(id)arg1 options:(unsigned long long)arg2;	// IMP=0x00000000001fe55f
+ (id)requiredLibraryAddStatusObservationProperties;	// IMP=0x000000000018fb96
+ (_Bool)supportsLibraryAddStatusObservation;	// IMP=0x000000000018fb8e
+ (_Bool)supportsLibraryRemoval;	// IMP=0x00000000001a82a4
+ (id)requiredLibraryRemovalProperties;	// IMP=0x00000000001a81f6
+ (_Bool)supportsKeepLocalStatusObservation;	// IMP=0x00000000001a8f2f
+ (id)requiredKeepLocalStatusObservationProperties;	// IMP=0x00000000001a8e81
+ (long long)genericObjectType;	// IMP=0x00000000001e3116
+ (id)requiredStoreLibraryPersonalizationProperties;	// IMP=0x00000000001fdb1d
- (id)tracksTiledArtworkCatalogWithRows:(unsigned long long)arg1 columns:(unsigned long long)arg2;	// IMP=0x00000000001fe434
- (id)trackArtworkCatalogsWithCount:(long long)arg1;	// IMP=0x00000000001fe3b9
- (id)editorialArtworkCatalog;	// IMP=0x00000000001fe361
- (id)artworkCatalog;	// IMP=0x00000000001fe309
- (id)humanDescription;	// IMP=0x00000000001fe1e3
- (id)contentItemCollectionInfo;	// IMP=0x000000000009512d
- (struct MPLibraryAddStatusObserverConfiguration)libraryAddStatusObserverConfiguration;	// IMP=0x000000000018f770
- (long long)libraryRemovalSupportedOptions;	// IMP=0x00000000001a7caf
- (id)newKeepLocalStatusObserverConfiguration;	// IMP=0x00000000001a8832
- (id)objectWithStoreLibraryPersonalizationRelativeModelObject:(id)arg1;	// IMP=0x00000000001fc662
- (id)relativeModelObjectForStoreLibraryPersonalization;	// IMP=0x00000000001fc659
- (id)personalizationScopedPropertiesForProperties:(id)arg1;	// IMP=0x00000000001fc64c

// Remaining properties
@property(copy, nonatomic) CDUnknownBlockType artworkCatalogBlock; // @dynamic artworkCatalogBlock;
@property(copy, nonatomic) NSString *cloudVersionHash; // @dynamic cloudVersionHash;
@property(copy, nonatomic) MPModelCurator *curator; // @dynamic curator;
@property(nonatomic, getter=isCuratorPlaylist) _Bool curatorPlaylist; // @dynamic curatorPlaylist;
@property(copy, nonatomic) NSString *descriptionText; // @dynamic descriptionText;
@property(readonly, copy, nonatomic) NSDate *downloadedDate; // @dynamic downloadedDate;
@property(copy, nonatomic) NSString *editorNotes; // @dynamic editorNotes;
@property(copy, nonatomic) CDUnknownBlockType editorialArtworkCatalogBlock; // @dynamic editorialArtworkCatalogBlock;
@property(nonatomic) _Bool hasCleanContent; // @dynamic hasCleanContent;
@property(nonatomic) _Bool hasExplicitContent; // @dynamic hasExplicitContent;
@property(nonatomic) long long keepLocalEnableState; // @dynamic keepLocalEnableState;
@property(nonatomic) long long keepLocalManagedStatus; // @dynamic keepLocalManagedStatus;
@property(copy, nonatomic) NSDate *lastDevicePlaybackDate; // @dynamic lastDevicePlaybackDate;
@property(copy, nonatomic) NSDateComponents *lastModifiedDateComponents; // @dynamic lastModifiedDateComponents;
@property(nonatomic, getter=isLibraryAdded) _Bool libraryAdded; // @dynamic libraryAdded;
@property(copy, nonatomic) NSDate *libraryAddedDate; // @dynamic libraryAddedDate;
@property(copy, nonatomic) NSString *name; // @dynamic name;
@property(nonatomic, getter=isOwner) _Bool owner; // @dynamic owner;
@property(nonatomic, getter=isPublicPlaylist) _Bool publicPlaylist; // @dynamic publicPlaylist;
@property(copy, nonatomic) NSDateComponents *releaseDateComponents; // @dynamic releaseDateComponents;
@property(copy, nonatomic) NSURL *shareShortURL; // @dynamic shareShortURL;
@property(copy, nonatomic) NSURL *shareURL; // @dynamic shareURL;
@property(copy, nonatomic) NSString *shortEditorNotes; // @dynamic shortEditorNotes;
@property(nonatomic, getter=isSubscribed) _Bool subscribed; // @dynamic subscribed;
@property(copy, nonatomic) MPTiledArtworkRequest *tiledArtworkRequest; // @dynamic tiledArtworkRequest;
@property(nonatomic) unsigned long long trackCount; // @dynamic trackCount;
@property(nonatomic) unsigned long long traits; // @dynamic traits;
@property(nonatomic) long long type; // @dynamic type;
@property(nonatomic) long long userEditableComponents; // @dynamic userEditableComponents;
@property(copy, nonatomic) NSString *versionHash; // @dynamic versionHash;
@property(nonatomic, getter=isVisiblePlaylist) _Bool visiblePlaylist; // @dynamic visiblePlaylist;

@end

