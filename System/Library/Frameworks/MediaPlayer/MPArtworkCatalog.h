//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MPArtworkImageAttachments, MPArtworkRepresentationCollection, NSCache, NSString;
@protocol MPArtworkDataSource, MPArtworkDataSourceVisualIdenticality, _MPArtworkCatalogOverlayDelegate;

@interface MPArtworkCatalog : NSObject
{
    struct CGSize _fittingSize;	// 8 = 0x8
    long long _modelRevisionID;	// 24 = 0x18
    struct os_unfair_lock_s _lock;	// 32 = 0x20
    _Bool _allowsVideoConstrainedNetworkAccess;	// 36 = 0x24
    _Bool _loadingRepresentation;	// 37 = 0x25
    double _destinationScale;	// 40 = 0x28
    long long _preferredVideoFormat;	// 48 = 0x30
    id _destination;	// 56 = 0x38
    CDUnknownBlockType _configurationBlock;	// 64 = 0x40
    unsigned long long _representationKinds;	// 72 = 0x48
    MPArtworkRepresentationCollection *_bestAvailableRepresentationCollection;	// 80 = 0x50
    NSString *_cacheIdentifier;	// 88 = 0x58
    id _requestingContext;	// 96 = 0x60
    id _token;	// 104 = 0x68
    id <MPArtworkDataSource> _dataSource;	// 112 = 0x70
    unsigned long long _renderHint;	// 120 = 0x78
    unsigned long long _videoCacheStoragePolicy;	// 128 = 0x80
    id <_MPArtworkCatalogOverlayDelegate> _overlayDelegate;	// 136 = 0x88
    id _overlayToken;	// 144 = 0x90
    id _overlayStorage;	// 152 = 0x98
}

+ (void)setCachePurgesWhenEnteringBackground:(_Bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;	// IMP=0x00000000000c270e
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;	// IMP=0x00000000000c26fc
+ (void)setCachePurgesWhenEnteringBackground:(_Bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;	// IMP=0x00000000000c26ea
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;	// IMP=0x00000000000c26d8
+ (void)_setCachePurgesWhenEnteringBackground:(_Bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;	// IMP=0x00000000000c2683
+ (void)_setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3 representationKind:(long long)arg4;	// IMP=0x00000000000c262e
+ (void)_setCachePurgesWhenEnteringBackground:(_Bool)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;	// IMP=0x00000000000c2619
+ (void)_setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 requestingContext:(id)arg3;	// IMP=0x00000000000c2604
+ (id)_artworkLoadQueue;	// IMP=0x00000000000c25d4
+ (id)_artworkCacheForIdentifier:(id)arg1 requestingContext:(id)arg2 representationKind:(long long)arg3;	// IMP=0x00000000000c2404
+ (id)artworkCatalogWithDataSourceShortDescription:(id)arg1 dataSourceIdentifier:(id)arg2 tokenParameters:(id)arg3;	// IMP=0x00000000000c20d0
+ (id)_registeredIdentifiableDataSourceAndTokenClasses;	// IMP=0x00000000000c20a0
+ (void)setCachePurgesWhenEnteringBackground:(_Bool)arg1 forCacheIdentifier:(id)arg2 cacheReference:(id)arg3 representationKind:(long long)arg4;	// IMP=0x00000000000c208e
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 cacheReference:(id)arg3 representationKind:(long long)arg4;	// IMP=0x00000000000c207c
+ (void)setCachePurgesWhenEnteringBackground:(_Bool)arg1 forCacheIdentifier:(id)arg2 cacheReference:(id)arg3;	// IMP=0x00000000000c206a
+ (void)setCacheLimit:(long long)arg1 forCacheIdentifier:(id)arg2 cacheReference:(id)arg3;	// IMP=0x00000000000c2058
+ (id)placeholderCatalogWithSymbolName:(id)arg1;	// IMP=0x00000000000c1fd3
+ (id)staticArtworkCatalogWithRepresentationCollection:(id)arg1;	// IMP=0x00000000000c1f45
+ (id)staticArtworkCatalogWithImage:(id)arg1;	// IMP=0x00000000000c1e27
- (void).cxx_destruct;	// IMP=0x00000000000c0d81
@property(retain, nonatomic) id overlayStorage; // @synthesize overlayStorage=_overlayStorage;
@property(retain, nonatomic) id overlayToken; // @synthesize overlayToken=_overlayToken;
@property(nonatomic) __weak id <_MPArtworkCatalogOverlayDelegate> overlayDelegate; // @synthesize overlayDelegate=_overlayDelegate;
@property(nonatomic) unsigned long long videoCacheStoragePolicy; // @synthesize videoCacheStoragePolicy=_videoCacheStoragePolicy;
@property(nonatomic) unsigned long long renderHint; // @synthesize renderHint=_renderHint;
@property(readonly, nonatomic) __weak id <MPArtworkDataSource> dataSource; // @synthesize dataSource=_dataSource;
@property(readonly, nonatomic) id token; // @synthesize token=_token;
@property(nonatomic) __weak id requestingContext; // @synthesize requestingContext=_requestingContext;
@property(copy, nonatomic) NSString *cacheIdentifier; // @synthesize cacheIdentifier=_cacheIdentifier;
@property(getter=isLoadingRepresentation) _Bool loadingRepresentation; // @synthesize loadingRepresentation=_loadingRepresentation;
@property(retain, nonatomic) MPArtworkRepresentationCollection *bestAvailableRepresentationCollection; // @synthesize bestAvailableRepresentationCollection=_bestAvailableRepresentationCollection;
@property(nonatomic) unsigned long long representationKinds; // @synthesize representationKinds=_representationKinds;
@property(copy, nonatomic) CDUnknownBlockType configurationBlock; // @synthesize configurationBlock=_configurationBlock;
@property(nonatomic) __weak id destination; // @synthesize destination=_destination;
@property(nonatomic) long long preferredVideoFormat; // @synthesize preferredVideoFormat=_preferredVideoFormat;
@property(nonatomic) _Bool allowsVideoConstrainedNetworkAccess; // @synthesize allowsVideoConstrainedNetworkAccess=_allowsVideoConstrainedNetworkAccess;
@property(nonatomic) struct CGSize fittingSize; // @synthesize fittingSize=_fittingSize;
@property(nonatomic) double destinationScale; // @synthesize destinationScale=_destinationScale;
- (void)setCacheIdentifier:(id)arg1 forRequestingContext:(id)arg2;	// IMP=0x00000000000c0bc8
- (void)setDestination:(id)arg1 progressiveConfigurationBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c0b2b
- (void)_setCacheIdentifier:(id)arg1 forRequestingContext:(id)arg2;	// IMP=0x00000000000c0aca
- (void)_requestBestRepresentationOfKind:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c09a0
- (void)_updateWithRepresentation:(id)arg1 isBestRepresentation:(_Bool)arg2 modelRevisionID:(long long)arg3;	// IMP=0x00000000000c083b
- (void)_updateRepresentationOfKind:(long long)arg1;	// IMP=0x00000000000c0780
- (void)_updateRepresentations;	// IMP=0x00000000000c0733
- (id)_existingRepresentationOfKind:(long long)arg1;	// IMP=0x00000000000c0697
- (void)_loadRepresentationOfKind:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000c050b
- (void)_loadBestRepresentationIfNeededOfKind:(long long)arg1;	// IMP=0x00000000000c0444
@property(readonly, nonatomic) NSCache *videoCache;
@property(readonly, nonatomic) NSCache *cache;
- (void)setCacheIdentifier:(id)arg1 forCacheReference:(id)arg2;	// IMP=0x00000000000c030d
- (void)requestExportableArtworkPropertiesWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000000c0207
@property(readonly, nonatomic) MPArtworkImageAttachments *imageAttachments;
- (void)requestRadiosityImageWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000bffe4
- (void)requestColorAnalysisWithAlgorithm:(long long)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00000000000bfd9c
- (id)existingColorAnalysisWithAlgorithm:(long long)arg1;	// IMP=0x00000000000bfc85
@property(readonly, nonatomic) id <MPArtworkDataSourceVisualIdenticality> visualIdenticalityIdentifier;
- (_Bool)isArtworkVisuallyIdenticalToCatalog:(id)arg1;	// IMP=0x00000000000bf98a
- (void)_callConfigurationWithRevisionID:(long long)arg1;	// IMP=0x00000000000bf87e
- (void)setDestination:(id)arg1 forRepresentationKinds:(unsigned long long)arg2 configurationBlock:(CDUnknownBlockType)arg3;	// IMP=0x00000000000bf6d2
- (void)setPreferredVideoKind:(long long)arg1;	// IMP=0x00000000000bf619
- (void)requestVideoWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000bf493
- (void)setDestination:(id)arg1 configurationBlock:(CDUnknownBlockType)arg2;	// IMP=0x00000000000bf3f6
@property(readonly, nonatomic) _Bool hasImageOnDisk;
- (id)bestImageFromDisk;	// IMP=0x00000000000bf0c5
- (void)requestImageWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x00000000000bf035
- (void)requestImageWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000befa7
@property(readonly, nonatomic) struct CGSize scaledFittingSize;
- (id)description;	// IMP=0x00000000000beac2
- (_Bool)isEqual:(id)arg1;	// IMP=0x00000000000bea5b
- (unsigned long long)hash;	// IMP=0x00000000000be9f6
- (void)dealloc;	// IMP=0x00000000000be974
- (id)initWithToken:(id)arg1 dataSource:(id)arg2;	// IMP=0x00000000000be87f
@property(readonly, nonatomic) long long MP_artworkType;

@end

