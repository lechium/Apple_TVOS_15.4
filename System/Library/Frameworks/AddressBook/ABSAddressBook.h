//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class ABSAddressBookContextStorage, ABSBulkFaultHandler, ABSChangeCallbacks, CNContactStore, CNFuture;

@interface ABSAddressBook : NSObject
{
    ABSAddressBookContextStorage *_contacts;	// 8 = 0x8
    ABSChangeCallbacks *_changeCallbacks;	// 16 = 0x10
    CNFuture *_storeFuture;	// 24 = 0x18
    ABSBulkFaultHandler *_faultHandler;	// 32 = 0x20
    ABSAddressBookContextStorage *_groups;	// 40 = 0x28
    ABSAddressBookContextStorage *_sources;	// 48 = 0x30
}

+ (void)callLocalChangeCallbacks:(_Bool)arg1;	// IMP=0x00000000000189df
+ (void)requestAccessWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x000000000001889d
+ (long long)authorizationStatus;	// IMP=0x000000000001886c
+ (id)localizedLabelForLabel:(id)arg1;	// IMP=0x000000000001374d
+ (_Bool)eraseAllDataAtLocationName:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000011953
+ (void)ABInitialize;	// IMP=0x0000000000011517
+ (void)initialize;	// IMP=0x00000000000114d0
- (void).cxx_destruct;	// IMP=0x0000000000018c15
@property(retain, nonatomic) ABSAddressBookContextStorage *sources; // @synthesize sources=_sources;
@property(retain, nonatomic) ABSAddressBookContextStorage *groups; // @synthesize groups=_groups;
@property(readonly, nonatomic) ABSBulkFaultHandler *faultHandler; // @synthesize faultHandler=_faultHandler;
@property(readonly, nonatomic) CNFuture *storeFuture; // @synthesize storeFuture=_storeFuture;
@property(readonly) ABSChangeCallbacks *changeCallbacks; // @synthesize changeCallbacks=_changeCallbacks;
@property(retain, nonatomic) ABSAddressBookContextStorage *contacts; // @synthesize contacts=_contacts;
- (int)saveSequenceCount;	// IMP=0x0000000000018b58
- (id)uniqueDatabaseVersionIdentifier;	// IMP=0x0000000000018a8a
- (id)groupsInSource:(id)arg1;	// IMP=0x00000000000186b3
- (void)updateFetchingAllPropertiesForGroups:(id)arg1;	// IMP=0x0000000000018240
- (id)groupWithRecordID:(int)arg1;	// IMP=0x0000000000017f81
- (long long)groupCount;	// IMP=0x0000000000017eec
- (id)allGroups;	// IMP=0x00000000000179c9
- (_Bool)removeMember:(id)arg1 fromGroup:(id)arg2 error:(id *)arg3;	// IMP=0x000000000001785a
- (_Bool)addMember:(id)arg1 toGroup:(id)arg2 error:(id *)arg3;	// IMP=0x000000000001764e
- (void)updateFetchingAllPropertiesForSources:(id)arg1;	// IMP=0x0000000000017330
- (id)sourceForRecord:(id)arg1;	// IMP=0x0000000000017189
- (id)localSource;	// IMP=0x0000000000017100
- (id)defaultSource;	// IMP=0x0000000000016fc7
- (id)allSources;	// IMP=0x0000000000016fb3
- (id)sourceWithRecordID:(int)arg1;	// IMP=0x0000000000016f2c
- (id)_sourcesPreferringExistingRecordsFetchedWithPredicate:(id)arg1;	// IMP=0x0000000000016dd1
- (_Bool)unlinkPerson:(id)arg1;	// IMP=0x0000000000016ca3
- (_Bool)linkPerson:(id)arg1 toPerson:(id)arg2;	// IMP=0x0000000000016b32
- (id)peopleLinkedToPerson:(id)arg1;	// IMP=0x00000000000169fa
- (id)mePerson;	// IMP=0x000000000001693b
- (id)peopleMatchingNameString:(id)arg1;	// IMP=0x00000000000166ef
- (id)peopleInGroup:(id)arg1 sortOrder:(unsigned int)arg2;	// IMP=0x0000000000016404
- (id)peopleInSource:(id)arg1 sortOrder:(unsigned int)arg2;	// IMP=0x00000000000162fe
- (id)_peoplePreferringExistingRecordsForFetchRequest:(id)arg1;	// IMP=0x0000000000015fba
- (id)_resultRecordsFromFetchedCNImpls:(id)arg1 mergedWithStorage:(id)arg2 creationBlock:(CDUnknownBlockType)arg3;	// IMP=0x0000000000015b9b
- (void)completePerson:(id)arg1 withKeysToFetch:(id)arg2;	// IMP=0x0000000000015b15
- (void)updatePeople:(id)arg1 refetchingProperties:(id)arg2;	// IMP=0x00000000000154be
- (id)contactsWithIdentifiers:(id)arg1 keysToFetch:(id)arg2;	// IMP=0x0000000000015315
- (id)findPersonMatchingPhoneNumber:(id)arg1 country:(id)arg2;	// IMP=0x000000000001519b
- (id)findPersonMatchingEmailAddress:(id)arg1;	// IMP=0x00000000000150dc
- (id)findPersonMatchingURL:(id)arg1;	// IMP=0x000000000001501d
- (id)personWithRecordID:(int)arg1;	// IMP=0x0000000000014c37
- (id)peopleWithCNIdentifiers:(id)arg1;	// IMP=0x000000000001427b
- (id)allPeople;	// IMP=0x0000000000013c53
- (long long)personCount;	// IMP=0x00000000000137e0
- (void)unregisterExternalChangeCallback:(CDUnknownFunctionPointerType)arg1 context:(void *)arg2;	// IMP=0x00000000000136fc
- (void)registerExternalChangeCallback:(CDUnknownFunctionPointerType)arg1 context:(void *)arg2;	// IMP=0x0000000000013677
- (void)revert;	// IMP=0x00000000000135cf
@property(readonly) _Bool hasUnsavedChanges;
- (_Bool)save:(id *)arg1;	// IMP=0x0000000000011d19
- (_Bool)removeRecord:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000011c45
- (_Bool)recordUpdated:(id)arg1;	// IMP=0x0000000000011b9d
- (_Bool)addRecord:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000011a7f
- (id)_storageForRecordClass:(Class)arg1;	// IMP=0x00000000000119c8
@property(readonly, nonatomic) CNContactStore *store;
- (unsigned long long)_cfTypeID;	// IMP=0x000000000001196c
- (id)initWithSettings:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000011671
- (id)initWithOptions:(id)arg1 policy:(int)arg2 error:(id *)arg3;	// IMP=0x00000000000115e5
- (id)initWithOptions:(id)arg1 error:(id *)arg2;	// IMP=0x000000000001155f
- (id)init;	// IMP=0x000000000001151d

@end

