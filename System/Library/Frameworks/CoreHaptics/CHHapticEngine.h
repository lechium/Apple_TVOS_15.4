//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class AVAudioSession, AVHapticPlayer, CHMetrics, HapticServerConfig, NSArray, NSString;
@protocol OS_dispatch_queue, OS_dispatch_source;

@interface CHHapticEngine : NSObject
{
    NSObject<OS_dispatch_queue> *_dispatchQueue;	// 8 = 0x8
    AVAudioSession *_avAudioSession;	// 16 = 0x10
    unsigned int _audioSessionID;	// 24 = 0x18
    _Bool _sessionIsShared;	// 28 = 0x1c
    _Bool _sessionIsConstantVolume;	// 29 = 0x1d
    struct map<unsigned long, std::pair<NSURL *, NSDictionary *>, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, std::pair<NSURL *, NSDictionary *>>>> _publicAudioResources;	// 32 = 0x20
    AVHapticPlayer *_player;	// 56 = 0x38
    NSObject<OS_dispatch_source> *_timer;	// 64 = 0x40
    CDUnknownBlockType _stoppedHandler;	// 72 = 0x48
    CDUnknownBlockType _resetHandler;	// 80 = 0x50
    _Bool _autoShutdownEnabled;	// 88 = 0x58
    CDUnknownBlockType _clientFinishedHandler;	// 96 = 0x60
    _Bool _running;	// 104 = 0x68
    unsigned long long _currentPlayerBehavior;	// 112 = 0x70
    _Bool _muteHapticsWhileRecordingAudio;	// 120 = 0x78
    HapticServerConfig *_serverConfig;	// 128 = 0x80
    NSString *_priority;	// 136 = 0x88
    NSString *_hapticPowerUsage;	// 144 = 0x90
    NSString *_audioPowerUsage;	// 152 = 0x98
    double _runTimeout;	// 160 = 0xa0
    CHMetrics *_metrics;	// 168 = 0xa8
}

+ (_Bool)resourceIsRegistered:(unsigned long long)arg1;	// IMP=0x000000000002ae8b
+ (_Bool)supports1stPartyHaptics;	// IMP=0x000000000002a7ce
+ (id)capabilitiesForHardware;	// IMP=0x0000000000024968
+ (void)lazyInitResourceMap;	// IMP=0x000000000001ed2a
+ (void)initialize;	// IMP=0x000000000001ecf5
+ (_Bool)doUnregisterAudioResource:(unsigned long long)arg1 fromPattern:(_Bool)arg2 player:(id)arg3 error:(id *)arg4;	// IMP=0x000000000002fba7
+ (unsigned long long)doRegisterAudioResource:(id)arg1 options:(id)arg2 fromPattern:(_Bool)arg3 player:(id)arg4 error:(id *)arg5;	// IMP=0x000000000002e425
+ (void)dispatchOnGlobal:(CDUnknownBlockType)arg1;	// IMP=0x000000000002d1d4
- (id).cxx_construct;	// IMP=0x000000000002d1bc
- (void).cxx_destruct;	// IMP=0x000000000002d10a
@property(readonly) NSString *audioPowerUsage; // @synthesize audioPowerUsage=_audioPowerUsage;
@property(readonly) NSString *hapticPowerUsage; // @synthesize hapticPowerUsage=_hapticPowerUsage;
@property(readonly) NSString *priority; // @synthesize priority=_priority;
@property(readonly) HapticServerConfig *serverConfig; // @synthesize serverConfig=_serverConfig;
@property unsigned long long currentPlayerBehavior; // @synthesize currentPlayerBehavior=_currentPlayerBehavior;
@property(retain) NSObject<OS_dispatch_source> *timer; // @synthesize timer=_timer;
@property(copy) CDUnknownBlockType clientFinishedHandler; // @synthesize clientFinishedHandler=_clientFinishedHandler;
@property(readonly) _Bool sessionIsConstantVolume; // @synthesize sessionIsConstantVolume=_sessionIsConstantVolume;
@property(readonly) _Bool sessionIsShared; // @synthesize sessionIsShared=_sessionIsShared;
@property(readonly) unsigned int audioSessionID; // @synthesize audioSessionID=_audioSessionID;
@property(readonly) AVAudioSession *avAudioSession; // @synthesize avAudioSession=_avAudioSession;
@property(copy) CDUnknownBlockType resetHandler; // @synthesize resetHandler=_resetHandler;
@property(copy) CDUnknownBlockType stoppedHandler; // @synthesize stoppedHandler=_stoppedHandler;
- (_Bool)doPlayPatternFromDictionary:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002c639
- (_Bool)playPatternFromData:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002c090
- (_Bool)playPatternFromURL:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002b7f1
- (void)doUnregisterAllPublicAudioResources;	// IMP=0x000000000002b5c6
- (_Bool)unregisterAudioResource:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x000000000002b238
- (unsigned long long)registerAudioResource:(id)arg1 options:(id)arg2 error:(id *)arg3;	// IMP=0x000000000002aefe
- (void)removePublicAudioResourceID:(unsigned long long)arg1;	// IMP=0x000000000002ad60
- (unsigned long long)idForPublicAudioResourceURL:(id)arg1 withOptions:(id)arg2;	// IMP=0x000000000002ab84
- (_Bool)hasPublicAudioResourceID:(unsigned long long)arg1;	// IMP=0x000000000002aa42
- (void)addPublicAudioResourceID:(unsigned long long)arg1 withURL:(id)arg2 options:(id)arg3;	// IMP=0x000000000002a86c
- (__map_iterator_9d4ef06d)doFindPublicAudioResourceID:(unsigned long long)arg1;	// IMP=0x000000000002a831
- (_Bool)debugEngineIsRunning;	// IMP=0x000000000002a829
- (void)setMetricsTestModeEnabled;	// IMP=0x000000000002a810
- (id)getMetricsForPlayer:(id)arg1;	// IMP=0x000000000002a7e7
- (double)getDurationForResource:(unsigned long long)arg1;	// IMP=0x000000000002a5fe
- (_Bool)resourceIsRegistered:(unsigned long long)arg1;	// IMP=0x000000000002a5e5
- (id)createPrivilegedPlayerWithPlayable:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002a46a
- (id)createAdvancedPlayerWithRingtonePattern:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002a2ef
- (id)createAdvancedPlayerWithRingtoneData:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002a17a
- (id)createAdvancedPlayerWithPattern:(id)arg1 error:(id *)arg2;	// IMP=0x000000000002a002
- (id)createPlayerWithPattern:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000029e8a
- (id)initWithAudioSession:(id)arg1 sessionIsShared:(_Bool)arg2 error:(id *)arg3;	// IMP=0x0000000000029dcc
- (id)initWithAudioSession:(id)arg1 sessionIsShared:(_Bool)arg2 options:(id)arg3 error:(id *)arg4;	// IMP=0x000000000002961b
- (id)initWithAudioSessionID:(unsigned int)arg1 error:(id *)arg2;	// IMP=0x000000000002932c
- (void)notifyWhenPlayersFinished:(CDUnknownBlockType)arg1;	// IMP=0x0000000000028de3
- (void)stopWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000028820
- (void)doStopWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000027fb0
- (_Bool)doStopEngineAndWait:(id *)arg1;	// IMP=0x0000000000027926
- (_Bool)startAndReturnError:(id *)arg1;	// IMP=0x00000000000276e0
- (_Bool)doStartEngineAndWait:(id *)arg1;	// IMP=0x0000000000027148
- (void)startWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00000000000268b2
- (void)doStartWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000025f01
- (void)stopPrewarm;	// IMP=0x0000000000025d11
- (void)prewarmWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0000000000025845
- (id)initWithOptions:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000025663
- (_Bool)doInitWithOptions:(id)arg1 error:(id *)arg2;	// IMP=0x00000000000253be
- (id)initWithAudioSession:(id)arg1 error:(id *)arg2;	// IMP=0x0000000000024dc8
- (id)initAndReturnError:(id *)arg1;	// IMP=0x00000000000249c3
- (id)init;	// IMP=0x00000000000249b5
- (_Bool)doInit:(unsigned int)arg1 sessionIsShared:(_Bool)arg2 options:(id)arg3 error:(id *)arg4;	// IMP=0x0000000000024508
- (void)storeOptions:(id)arg1;	// IMP=0x0000000000024376
- (id)createOptionsFromAudioSessionID:(unsigned int)arg1 shared:(_Bool)arg2;	// IMP=0x000000000002429b
- (void)dealloc;	// IMP=0x0000000000024003
- (void)stopAndWait;	// IMP=0x0000000000023c36
- (void)updateEngineBehavior;	// IMP=0x0000000000023ae8
- (void)handleFinish:(id)arg1;	// IMP=0x0000000000022c67
- (void)cancelIdleTimer;	// IMP=0x0000000000022b19
- (void)beginIdleTimer;	// IMP=0x000000000002254e
- (void)startIdleTimerWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x000000000002221d
- (_Bool)finishInit:(id *)arg1;	// IMP=0x0000000000021157
- (void)handleConnectionError;	// IMP=0x0000000000021124
- (id)createHapticPlayerWithOptions:(id)arg1;	// IMP=0x0000000000020dc9
- (long long)getReporterIDFromAVAudioSession:(id)arg1;	// IMP=0x0000000000020dc1
- (unsigned int)getSessionIDFromAVAudioSession:(id)arg1;	// IMP=0x0000000000020d60
- (void)disconnectAudioSession:(id)arg1;	// IMP=0x0000000000020cab
- (void)connectAudioSession:(id)arg1;	// IMP=0x0000000000020bd5
- (void)handleMediaServerRecovery:(id)arg1;	// IMP=0x0000000000020327
- (_Bool)setupUnsharedAudioSessionAndReturnError:(id *)arg1;	// IMP=0x000000000001f964
@property(readonly) _Bool needsAudioPowerBudget;
@property double autoShutdownTimeout;
@property(readonly) NSString *locality;
@property(readonly) NSArray *availableLocalities;
@property(nonatomic) _Bool highPriority;
@property(nonatomic) _Bool followAudioRoute;
@property(nonatomic, getter=isAutoShutdownEnabled) _Bool autoShutdownEnabled;
@property(nonatomic) _Bool isMutedForHaptics;
@property(nonatomic) _Bool isMutedForAudio;
@property(nonatomic) _Bool muteHapticsWhileRecordingAudio;
@property(nonatomic) _Bool playsHapticsOnly;
@property(readonly) double currentTime;
- (void)toggleBehavior:(unsigned long long)arg1 set:(_Bool)arg2;	// IMP=0x000000000001ee82
- (_Bool)isBehaviorSet:(unsigned long long)arg1;	// IMP=0x000000000001ee5f
- (_Bool)doReferenceAudioResourceByID:(unsigned long long)arg1;	// IMP=0x000000000002e13a
- (void)releaseChannel:(id)arg1;	// IMP=0x000000000002e021
- (id)getAvailableChannel:(id *)arg1;	// IMP=0x000000000002dec9
- (void)notifyPlayerStopped:(id)arg1 atTime:(double)arg2;	// IMP=0x000000000002ddb7
- (_Bool)notifyPlayerStarted:(id)arg1 atTime:(double)arg2;	// IMP=0x000000000002d94e
- (_Bool)checkEngineRunning:(id *)arg1;	// IMP=0x000000000002d902
- (_Bool)checkEngineStateOnStart:(id *)arg1;	// IMP=0x000000000002d79b
- (void)dispatchSyncOnLocal:(CDUnknownBlockType)arg1;	// IMP=0x000000000002d543
- (void)dispatchOnLocal:(CDUnknownBlockType)arg1;	// IMP=0x000000000002d2e7
@property(nonatomic) _Bool activateAudioSessionOnStart;
@property _Bool running;
@property(readonly) CHMetrics *metrics;
@property(readonly) AVHapticPlayer *player;

@end

