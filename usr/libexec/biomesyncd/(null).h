//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class NSDateFormatter, NSMutableDictionary, NSMutableSet, NSString, NSURL;

@interface (null) : NSObject
{
    void *_db;	// 8 = 0x8
    _Bool _isExecutingStatement;	// 16 = 0x10
    double _startBusyRetryTime;	// 24 = 0x18
    NSMutableSet *_openResultSets;	// 32 = 0x20
    NSMutableSet *_openFunctions;	// 40 = 0x28
    NSDateFormatter *_dateFormat;	// 48 = 0x30
    _Bool _shouldCacheStatements;	// 56 = 0x38
    _Bool _traceExecution;	// 57 = 0x39
    _Bool _checkedOut;	// 58 = 0x3a
    _Bool _crashOnErrors;	// 59 = 0x3b
    _Bool _logsErrors;	// 60 = 0x3c
    _Bool _isOpen;	// 61 = 0x3d
    _Bool _isInTransaction;	// 62 = 0x3e
    double _maxBusyRetryTimeInterval;	// 64 = 0x40
    NSMutableDictionary *_cachedStatements;	// 72 = 0x48
    NSString *_databasePath;	// 80 = 0x50
}

+ (id)storeableDateFormat:(id)arg1;	// IMP=0x0040000000025f68
+ (_Bool)isSQLiteThreadSafe;	// IMP=0x00100000000252f3
+ (id)sqliteLibVersion;	// IMP=0x00100000000252af
+ (int)FMDBVersion;	// IMP=0x0010000000025092
+ (id)FMDBUserVersion;	// IMP=0x0010000000025085
+ (id)databaseWithURL:(id)arg1;	// IMP=0x0010000000024e99
+ (id)databaseWithPath:(id)arg1;	// IMP=0x0010000000024e50
- (void).cxx_destruct;	// IMP=0x00100000000290b7
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(readonly, nonatomic) _Bool isInTransaction; // @synthesize isInTransaction=_isInTransaction;
@property(nonatomic) _Bool isOpen; // @synthesize isOpen=_isOpen;
@property(retain) NSMutableDictionary *cachedStatements; // @synthesize cachedStatements=_cachedStatements;
@property _Bool logsErrors; // @synthesize logsErrors=_logsErrors;
@property _Bool crashOnErrors; // @synthesize crashOnErrors=_crashOnErrors;
@property _Bool checkedOut; // @synthesize checkedOut=_checkedOut;
@property _Bool traceExecution; // @synthesize traceExecution=_traceExecution;
- (void)resultErrorTooBigInContext:(void *)arg1;	// IMP=0x0010000000029012
- (void)resultErrorNoMemoryInContext:(void *)arg1;	// IMP=0x0010000000029005
- (void)resultErrorCode:(int)arg1 context:(void *)arg2;	// IMP=0x0010000000028ff6
- (void)resultError:(id)arg1 context:(void *)arg2;	// IMP=0x0010000000028fbf
- (void)resultString:(id)arg1 context:(void *)arg2;	// IMP=0x0010000000028f81
- (void)resultData:(id)arg1 context:(void *)arg2;	// IMP=0x0010000000028f17
- (void)resultDouble:(double)arg1 context:(void *)arg2;	// IMP=0x0010000000028f0a
- (void)resultLong:(long long)arg1 context:(void *)arg2;	// IMP=0x0010000000028efa
- (void)resultInt:(int)arg1 context:(void *)arg2;	// IMP=0x0010000000028eeb
- (void)resultNullInContext:(void *)arg1;	// IMP=0x0010000000028ede
- (id)valueString:(void *)arg1;	// IMP=0x0010000000028ea0
- (id)valueData:(void *)arg1;	// IMP=0x0010000000028e4b
- (double)valueDouble:(void *)arg1;	// IMP=0x0010000000028e3e
- (long long)valueLong:(void *)arg1;	// IMP=0x0010000000028e31
- (int)valueInt:(void *)arg1;	// IMP=0x0010000000028e24
- (int)valueType:(void *)arg1;	// IMP=0x0010000000028e17
- (void)makeFunctionNamed:(id)arg1 arguments:(int)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000028d21
- (void)makeFunctionNamed:(id)arg1 maximumArguments:(int)arg2 withBlock:(CDUnknownBlockType)arg3;	// IMP=0x0010000000028d0f
@property(nonatomic) _Bool shouldCacheStatements; // @synthesize shouldCacheStatements=_shouldCacheStatements;
- (_Bool)checkpoint:(int)arg1 name:(id)arg2 logFrameCount:(int *)arg3 checkpointCount:(int *)arg4 error:(id *)arg5;	// IMP=0x0010000000028b09
- (_Bool)checkpoint:(int)arg1 name:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000028ae4
- (_Bool)checkpoint:(int)arg1 error:(id *)arg2;	// IMP=0x0010000000028abd
- (id)inSavePoint:(CDUnknownBlockType)arg1;	// IMP=0x0010000000028957
- (_Bool)rollbackToSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000028814
- (_Bool)releaseSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000286d1
- (_Bool)startSavePointWithName:(id)arg1 error:(id *)arg2;	// IMP=0x001000000002858e
- (_Bool)interrupt;	// IMP=0x001000000002855d
- (_Bool)inTransaction;	// IMP=0x0010000000028554
- (_Bool)beginExclusiveTransaction;	// IMP=0x0010000000028526
- (_Bool)beginImmediateTransaction;	// IMP=0x00100000000284f8
- (_Bool)beginDeferredTransaction;	// IMP=0x00100000000284ca
- (_Bool)beginTransaction;	// IMP=0x001000000002849c
- (_Bool)commit;	// IMP=0x001000000002846e
- (_Bool)rollback;	// IMP=0x0010000000028440
- (id)prepare:(id)arg1;	// IMP=0x0010000000028416
- (_Bool)update:(id)arg1 withErrorAndBindings:(id *)arg2;	// IMP=0x0010000000028372
- (_Bool)executeUpdate:(id)arg1 withErrorAndBindings:(id *)arg2;	// IMP=0x00100000000282ce
- (_Bool)executeStatements:(id)arg1 withResultBlock:(CDUnknownBlockType)arg2;	// IMP=0x00100000000281d6
- (_Bool)executeStatements:(id)arg1;	// IMP=0x00100000000281c2
- (_Bool)executeUpdateWithFormat:(id)arg1;	// IMP=0x0010000000027ec7
- (_Bool)executeUpdate:(id)arg1 withVAList:(struct __va_list_tag [1])arg2;	// IMP=0x0010000000027ea0
- (_Bool)executeUpdate:(id)arg1 withParameterDictionary:(id)arg2;	// IMP=0x0010000000027e75
- (_Bool)executeUpdate:(id)arg1 values:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000027e46
- (_Bool)executeUpdate:(id)arg1 withArgumentsInArray:(id)arg2;	// IMP=0x0010000000027e1b
- (_Bool)executeUpdate:(id)arg1;	// IMP=0x0010000000027d71
- (_Bool)executeUpdate:(id)arg1 error:(id *)arg2 withArgumentsInArray:(id)arg3 orDictionary:(id)arg4 orVAList:(struct __va_list_tag [1])arg5;	// IMP=0x0010000000027cd2
- (id)executeQuery:(id)arg1 withVAList:(struct __va_list_tag [1])arg2;	// IMP=0x0010000000027ca8
- (id)executeQuery:(id)arg1 values:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000027c34
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2;	// IMP=0x0010000000027c0c
- (id)executeQueryWithFormat:(id)arg1;	// IMP=0x0010000000027a93
- (id)executeQuery:(id)arg1;	// IMP=0x00100000000279da
- (_Bool)bindStatement:(struct sqlite3_stmt *)arg1 WithArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(struct __va_list_tag [1])arg4;	// IMP=0x0010000000027446
- (id)executeQuery:(id)arg1 withArgumentsInArray:(id)arg2 orDictionary:(id)arg3 orVAList:(struct __va_list_tag [1])arg4 shouldBind:(_Bool)arg5;	// IMP=0x00100000000270ca
- (id)executeQuery:(id)arg1 withParameterDictionary:(id)arg2;	// IMP=0x00100000000270a0
- (void)extractSQL:(id)arg1 argumentsList:(struct __va_list_tag [1])arg2 intoString:(id)arg3 arguments:(id)arg4;	// IMP=0x0010000000026886
- (int)bindObject:(id)arg1 toColumn:(int)arg2 inStatement:(struct sqlite3_stmt *)arg3;	// IMP=0x0010000000026320
@property(readonly, nonatomic) int changes;
@property(readonly, nonatomic) long long lastInsertRowId;
- (id)lastError;	// IMP=0x001000000002624b
- (id)errorWithMessage:(id)arg1;	// IMP=0x00100000000261c4
- (int)lastExtendedErrorCode;	// IMP=0x00100000000261b6
- (int)lastErrorCode;	// IMP=0x00100000000261a8
- (_Bool)hadError;	// IMP=0x001000000002618d
- (id)lastErrorMessage;	// IMP=0x001000000002615e
- (_Bool)databaseExists;	// IMP=0x0010000000026114
- (void)warnInUse;	// IMP=0x00100000000260dd
@property(readonly, nonatomic) _Bool goodConnection;
- (id)stringFromDate:(id)arg1;	// IMP=0x0010000000026067
- (id)dateFromString:(id)arg1;	// IMP=0x0010000000026051
- (void)setDateFormat:(id)arg1;	// IMP=0x0010000000026040
- (_Bool)hasDateFormatter;	// IMP=0x0010000000026032
- (_Bool)setKeyWithData:(id)arg1;	// IMP=0x0010000000025f60
- (_Bool)setKey:(id)arg1;	// IMP=0x0010000000025e9b
- (_Bool)rekeyWithData:(id)arg1;	// IMP=0x0010000000025e93
- (_Bool)rekey:(id)arg1;	// IMP=0x0010000000025dce
- (void)setCachedStatement:(id)arg1 forQuery:(id)arg2;	// IMP=0x0010000000025c60
- (id)cachedStatementForQuery:(id)arg1;	// IMP=0x0010000000025bb7
- (void)clearCachedStatements;	// IMP=0x0010000000025958
- (void)resultSetDidClose:(id)arg1;	// IMP=0x0010000000025904
- (void)closeOpenResultSets;	// IMP=0x0010000000025726
@property(readonly, nonatomic) _Bool hasOpenResultSets;
- (void)setBusyRetryTimeout:(int)arg1;	// IMP=0x00100000000256db
- (int)busyRetryTimeout;	// IMP=0x00100000000256a8
@property(nonatomic) double maxBusyRetryTimeInterval; // @synthesize maxBusyRetryTimeInterval=_maxBusyRetryTimeInterval;
- (_Bool)close;	// IMP=0x00100000000254fb
- (_Bool)openWithFlags:(int)arg1 vfs:(id)arg2;	// IMP=0x001000000002541b
- (_Bool)openWithFlags:(int)arg1;	// IMP=0x0010000000025407
- (_Bool)open;	// IMP=0x0010000000025371
- (int)limitFor:(int)arg1 value:(int)arg2;	// IMP=0x001000000002535f
- (const char *)sqlitePath;	// IMP=0x001000000002530d
@property(readonly, nonatomic) void *sqliteHandle;
@property(readonly, nonatomic) NSURL *databaseURL;
- (void)dealloc;	// IMP=0x0010000000025010
- (id)initWithPath:(id)arg1;	// IMP=0x0010000000024f4c
- (id)initWithURL:(id)arg1;	// IMP=0x0010000000024ef6
- (id)init;	// IMP=0x0010000000024ee2
- (_Bool)DELETE_FROM:(id)arg1 WHERE:(id)arg2;	// IMP=0x001000000001d624
- (_Bool)INSERT_INTO:(id)arg1 VALUES:(id)arg2;	// IMP=0x001000000001d2e8
- (_Bool)UPDATE:(id)arg1 SET:(id)arg2 WHERE:(id)arg3;	// IMP=0x001000000001cff4
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 JOIN:(id)arg3 WHERE:(id)arg4 GROUP_BY:(id)arg5 HAVING:(id)arg6 ORDER_BY:(id)arg7 LIMIT:(id)arg8;	// IMP=0x001000000001c8e8
- (id)_SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 JOIN:(id)arg3 WHERE:(id)arg4 GROUP_BY:(id)arg5 ORDER_BY:(id)arg6 LIMIT:(id)arg7;	// IMP=0x001000000001c3ca
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 WHERE:(id)arg3 GROUP_BY:(id)arg4;	// IMP=0x001000000001c39a
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 JOIN:(id)arg3 WHERE:(id)arg4 ORDER_BY:(id)arg5 LIMIT:(id)arg6;	// IMP=0x001000000001c36e
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 WHERE:(id)arg3 ORDER_BY:(id)arg4 LIMIT:(id)arg5;	// IMP=0x001000000001c344
- (id)SELECT_FROM:(id)arg1 COLUMNS:(id)arg2 WHERE:(id)arg3;	// IMP=0x001000000001c313
- (_Bool)validateSQL:(id)arg1 error:(id *)arg2;	// IMP=0x001000000002a15b
- (_Bool)columnExists:(id)arg1 columnName:(id)arg2;	// IMP=0x001000000002a140
@property(nonatomic) unsigned int userVersion;
@property(nonatomic) unsigned int applicationID;
- (_Bool)columnExists:(id)arg1 inTableWithName:(id)arg2;	// IMP=0x0010000000029ddc
- (id)getTableSchema:(id)arg1;	// IMP=0x0010000000029d47
- (id)getSchema;	// IMP=0x0010000000029d2c
- (_Bool)tableExists:(id)arg1;	// IMP=0x0010000000029c9f
- (id)dateForQuery:(id)arg1;	// IMP=0x0010000000029b7c
- (id)dataForQuery:(id)arg1;	// IMP=0x0010000000029a59
- (double)doubleForQuery:(id)arg1;	// IMP=0x001000000002993d
- (_Bool)boolForQuery:(id)arg1;	// IMP=0x0010000000029826
- (long long)longForQuery:(id)arg1;	// IMP=0x001000000002970f
- (int)intForQuery:(id)arg1;	// IMP=0x00100000000295f8
- (id)stringForQuery:(id)arg1;	// IMP=0x00100000000294d5

@end

