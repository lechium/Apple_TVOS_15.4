//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CLLocationManager, NSData, NSDate, NSDictionary, NSError, NSHashTable, NSMutableArray, NSMutableDictionary, NSMutableSet, NSSet, NSString, SDAutoUnlockIconTransferStore, SDAutoUnlockLocalDeviceController, SDAutoUnlockPeer, SDAutoUnlockSuggestionManager, SFAutoUnlockDevice, SFDeviceDiscovery;
@protocol OS_dispatch_queue, OS_dispatch_source, SDAutoUnlockTransportProtocol, SDKeyManaging, SDUnlockMagnetTransport;

__attribute__((visibility("hidden")))
@interface SDAutoUnlockSessionManager : NSObject
{
    _Bool _attemptInProgress;	// 8 = 0x8
    _Bool _watchUnlockEnabled;	// 9 = 0x9
    _Bool _previousNearbyState;	// 10 = 0xa
    _Bool _attemptPrewarmed;	// 11 = 0xb
    _Bool _extendedTimer;	// 12 = 0xc
    _Bool _notifiedForProxy;	// 13 = 0xd
    _Bool _proxyNotAvailableForUnlock;	// 14 = 0xe
    _Bool _presentedBluetoothError;	// 15 = 0xf
    _Bool _presentedWiFiError;	// 16 = 0x10
    _Bool _currentlyAdvertising;	// 17 = 0x11
    _Bool _previousConnectedState;	// 18 = 0x12
    _Bool _autoRelockAssertionTimerActive;	// 19 = 0x13
    _Bool _cachedDeviceWiFiState;	// 20 = 0x14
    _Bool _cachedWatchWiFiState;	// 21 = 0x15
    _Bool _wifiStateNeedsUpdating;	// 22 = 0x16
    _Bool _useBTPipe;	// 23 = 0x17
    _Bool _preventRadarNotification;	// 24 = 0x18
    _Bool _lastUnlockedByWatch;	// 25 = 0x19
    _Bool _lastLockedByRelock;	// 26 = 0x1a
    _Bool _doNotPostUnlockConfirmation;	// 27 = 0x1b
    _Bool _suppressAlert;	// 28 = 0x1c
    _Bool _needsArming;	// 29 = 0x1d
    _Bool _isBeingUsedForSiri;	// 30 = 0x1e
    _Bool _needsStrictMotionCheck;	// 31 = 0x1f
    int _proxyRSSI;	// 32 = 0x20
    NSString *_state;	// 40 = 0x28
    NSData *_attemptExternalACMContext;	// 48 = 0x30
    unsigned long long _stateHandle;	// 56 = 0x38
    NSDictionary *_awdlInfo;	// 64 = 0x40
    NSObject<OS_dispatch_queue> *_sessionManagerQueue;	// 72 = 0x48
    NSHashTable *_observerTable;	// 80 = 0x50
    SDAutoUnlockSuggestionManager *_suggestionManager;	// 88 = 0x58
    NSMutableDictionary *_lockAuthSessions;	// 96 = 0x60
    NSMutableArray *_canceledPairingKeySessions;	// 104 = 0x68
    NSMutableArray *_canceledAuthLockSessions;	// 112 = 0x70
    NSMutableDictionary *_keyAuthSessions;	// 120 = 0x78
    NSMutableDictionary *_lockPairingSessions;	// 128 = 0x80
    NSMutableDictionary *_keyPairingSessions;	// 136 = 0x88
    NSMutableDictionary *_proxySessions;	// 144 = 0x90
    NSMutableArray *_locksWithAKSTokens;	// 152 = 0x98
    NSMutableArray *_keysWithAKSTokens;	// 160 = 0xa0
    NSMutableDictionary *_keyRegistrationSessionsByDeviceID;	// 168 = 0xa8
    NSMutableDictionary *_lockRegistrationSessionsByDeviceID;	// 176 = 0xb0
    NSMutableSet *_serviceClients;	// 184 = 0xb8
    NSData *_previousMacAddressData;	// 192 = 0xc0
    NSObject<OS_dispatch_source> *_nearbyPushTimer;	// 200 = 0xc8
    NSDate *_prewarmStart;	// 208 = 0xd0
    NSDate *_attemptStart;	// 216 = 0xd8
    SFDeviceDiscovery *_scanner;	// 224 = 0xe0
    SFAutoUnlockDevice *;	// 232 = 0xe8
    long long _attemptType;	// 240 = 0xf0
    NSString *_attemptBundlePath;	// 248 = 0xf8
    NSString *_attemptAppName;	// 256 = 0x100
    CDUnknownBlockType _attemptActivatedHandler;	// 264 = 0x108
    NSObject<OS_dispatch_source> *_scanTimer;	// 272 = 0x110
    double _proxyDiscoverTime;	// 280 = 0x118
    NSString *_scanErrorString;	// 288 = 0x120
    NSError *_authSessionError;	// 296 = 0x128
    long long _proxyErrorCode;	// 304 = 0x130
    NSString *_proxyDeviceModel;	// 312 = 0x138
    long long _lastProxyState;	// 320 = 0x140
    double _proxyConnectionTime;	// 328 = 0x148
    NSSet *_scanAutoUnlockDevices;	// 336 = 0x150
    NSSet *_scanWatchIDs;	// 344 = 0x158
    NSSet *_scanPhoneIDs;	// 352 = 0x160
    long long _attemptCount;	// 360 = 0x168
    NSString *_attemptID;	// 368 = 0x170
    NSString *_incrementedCountID;	// 376 = 0x178
    long long _connectedBluetoothDevices;	// 384 = 0x180
    long long _timeSinceLastMachineWake;	// 392 = 0x188
    long long _lastSleepType;	// 400 = 0x190
    NSSet *_eligibleDevices;	// 408 = 0x198
    long long _wifiErrorCount;	// 416 = 0x1a0
    long long _bluetoothErrorCount;	// 424 = 0x1a8
    long long _idsMacCountCache;	// 432 = 0x1b0
    NSDate *_advertisingChangedDate;	// 440 = 0x1b8
    NSDate *_wristStateChangedDate;	// 448 = 0x1c0
    NSDate *_lockStateChangedDate;	// 456 = 0x1c8
    NSDate *_nearbyDeviceChangedDate;	// 464 = 0x1d0
    NSDate *_pipeConnectionChangedDate;	// 472 = 0x1d8
    NSMutableDictionary *_cachedMetrics;	// 480 = 0x1e0
    NSMutableArray *_previousSessionIDs;	// 488 = 0x1e8
    SDAutoUnlockIconTransferStore *_iconTransferStore;	// 496 = 0x1f0
    SDAutoUnlockLocalDeviceController *_localDeviceController;	// 504 = 0x1f8
    NSObject<OS_dispatch_source> *_magnetLinkTimer;	// 512 = 0x200
    NSDate *_lastUnlockDate;	// 520 = 0x208
    long long _periocularStatus;	// 528 = 0x210
    CLLocationManager *_clManager;	// 536 = 0x218
    id <SDAutoUnlockTransportProtocol> _autoUnlockTransport;	// 544 = 0x220
    id <SDUnlockMagnetTransport> _magnetTransport;	// 552 = 0x228
    id <SDKeyManaging> _keyManager;	// 560 = 0x230
    CDUnknownBlockType _isSignedIntoPrimaryiCloudAccount;	// 568 = 0x238
    CDUnknownBlockType _isFaceIDEnabled;	// 576 = 0x240
    CDUnknownBlockType _isWifiEnabled;	// 584 = 0x248
    CDUnknownBlockType _isBluetoothEnabled;	// 592 = 0x250
    CDUnknownBlockType _isActiveDeviceNearby;	// 600 = 0x258
    SDAutoUnlockPeer *_remotePeer;	// 608 = 0x260
}

+ (id)sharedManager;	// IMP=0x0020000000057300
- (void).cxx_destruct;	// IMP=0x002000000006bae1
@property(retain, nonatomic) SDAutoUnlockPeer *remotePeer; // @synthesize remotePeer=_remotePeer;
@property(copy, nonatomic) CDUnknownBlockType isActiveDeviceNearby; // @synthesize isActiveDeviceNearby=_isActiveDeviceNearby;
@property(copy, nonatomic) CDUnknownBlockType isBluetoothEnabled; // @synthesize isBluetoothEnabled=_isBluetoothEnabled;
@property(copy, nonatomic) CDUnknownBlockType isWifiEnabled; // @synthesize isWifiEnabled=_isWifiEnabled;
@property(copy, nonatomic) CDUnknownBlockType isFaceIDEnabled; // @synthesize isFaceIDEnabled=_isFaceIDEnabled;
@property(copy, nonatomic) CDUnknownBlockType isSignedIntoPrimaryiCloudAccount; // @synthesize isSignedIntoPrimaryiCloudAccount=_isSignedIntoPrimaryiCloudAccount;
@property(readonly, nonatomic) __weak id <SDKeyManaging> keyManager; // @synthesize keyManager=_keyManager;
@property(readonly, nonatomic) __weak id <SDUnlockMagnetTransport> magnetTransport; // @synthesize magnetTransport=_magnetTransport;
@property(readonly, nonatomic) __weak id <SDAutoUnlockTransportProtocol> autoUnlockTransport; // @synthesize autoUnlockTransport=_autoUnlockTransport;
@property(nonatomic) _Bool needsStrictMotionCheck; // @synthesize needsStrictMotionCheck=_needsStrictMotionCheck;
@property(nonatomic) _Bool isBeingUsedForSiri; // @synthesize isBeingUsedForSiri=_isBeingUsedForSiri;
@property(nonatomic) _Bool needsArming; // @synthesize needsArming=_needsArming;
@property(retain, nonatomic) CLLocationManager *clManager; // @synthesize clManager=_clManager;
@property(nonatomic) long long periocularStatus; // @synthesize periocularStatus=_periocularStatus;
@property(nonatomic) _Bool suppressAlert; // @synthesize suppressAlert=_suppressAlert;
@property(nonatomic) _Bool doNotPostUnlockConfirmation; // @synthesize doNotPostUnlockConfirmation=_doNotPostUnlockConfirmation;
@property(nonatomic) _Bool lastLockedByRelock; // @synthesize lastLockedByRelock=_lastLockedByRelock;
@property(nonatomic) _Bool lastUnlockedByWatch; // @synthesize lastUnlockedByWatch=_lastUnlockedByWatch;
@property(retain, nonatomic) NSDate *lastUnlockDate; // @synthesize lastUnlockDate=_lastUnlockDate;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *magnetLinkTimer; // @synthesize magnetLinkTimer=_magnetLinkTimer;
@property(retain, nonatomic) SDAutoUnlockLocalDeviceController *localDeviceController; // @synthesize localDeviceController=_localDeviceController;
@property(retain, nonatomic) SDAutoUnlockIconTransferStore *iconTransferStore; // @synthesize iconTransferStore=_iconTransferStore;
@property(retain, nonatomic) NSMutableArray *previousSessionIDs; // @synthesize previousSessionIDs=_previousSessionIDs;
@property(retain, nonatomic) NSMutableDictionary *cachedMetrics; // @synthesize cachedMetrics=_cachedMetrics;
@property(nonatomic) _Bool preventRadarNotification; // @synthesize preventRadarNotification=_preventRadarNotification;
@property(nonatomic) _Bool useBTPipe; // @synthesize useBTPipe=_useBTPipe;
@property(nonatomic) _Bool wifiStateNeedsUpdating; // @synthesize wifiStateNeedsUpdating=_wifiStateNeedsUpdating;
@property(nonatomic) _Bool cachedWatchWiFiState; // @synthesize cachedWatchWiFiState=_cachedWatchWiFiState;
@property(nonatomic) _Bool cachedDeviceWiFiState; // @synthesize cachedDeviceWiFiState=_cachedDeviceWiFiState;
@property(nonatomic) _Bool autoRelockAssertionTimerActive; // @synthesize autoRelockAssertionTimerActive=_autoRelockAssertionTimerActive;
@property(nonatomic) _Bool previousConnectedState; // @synthesize previousConnectedState=_previousConnectedState;
@property(retain, nonatomic) NSDate *pipeConnectionChangedDate; // @synthesize pipeConnectionChangedDate=_pipeConnectionChangedDate;
@property(retain, nonatomic) NSDate *nearbyDeviceChangedDate; // @synthesize nearbyDeviceChangedDate=_nearbyDeviceChangedDate;
@property(retain, nonatomic) NSDate *lockStateChangedDate; // @synthesize lockStateChangedDate=_lockStateChangedDate;
@property(retain, nonatomic) NSDate *wristStateChangedDate; // @synthesize wristStateChangedDate=_wristStateChangedDate;
@property(retain, nonatomic) NSDate *advertisingChangedDate; // @synthesize advertisingChangedDate=_advertisingChangedDate;
@property(nonatomic) long long idsMacCountCache; // @synthesize idsMacCountCache=_idsMacCountCache;
@property(nonatomic) _Bool currentlyAdvertising; // @synthesize currentlyAdvertising=_currentlyAdvertising;
@property(nonatomic) _Bool presentedWiFiError; // @synthesize presentedWiFiError=_presentedWiFiError;
@property(nonatomic) _Bool presentedBluetoothError; // @synthesize presentedBluetoothError=_presentedBluetoothError;
@property(nonatomic) long long bluetoothErrorCount; // @synthesize bluetoothErrorCount=_bluetoothErrorCount;
@property(nonatomic) long long wifiErrorCount; // @synthesize wifiErrorCount=_wifiErrorCount;
@property(retain, nonatomic) NSSet *eligibleDevices; // @synthesize eligibleDevices=_eligibleDevices;
@property(nonatomic) long long lastSleepType; // @synthesize lastSleepType=_lastSleepType;
@property(nonatomic) long long timeSinceLastMachineWake; // @synthesize timeSinceLastMachineWake=_timeSinceLastMachineWake;
@property(nonatomic) long long connectedBluetoothDevices; // @synthesize connectedBluetoothDevices=_connectedBluetoothDevices;
@property(retain, nonatomic) NSString *incrementedCountID; // @synthesize incrementedCountID=_incrementedCountID;
@property(retain, nonatomic) NSString *attemptID; // @synthesize attemptID=_attemptID;
@property(nonatomic) long long attemptCount; // @synthesize attemptCount=_attemptCount;
@property(retain, nonatomic) NSSet *scanPhoneIDs; // @synthesize scanPhoneIDs=_scanPhoneIDs;
@property(retain, nonatomic) NSSet *scanWatchIDs; // @synthesize scanWatchIDs=_scanWatchIDs;
@property(retain, nonatomic) NSSet *scanAutoUnlockDevices; // @synthesize scanAutoUnlockDevices=_scanAutoUnlockDevices;
@property(nonatomic) _Bool proxyNotAvailableForUnlock; // @synthesize proxyNotAvailableForUnlock=_proxyNotAvailableForUnlock;
@property(nonatomic) double proxyConnectionTime; // @synthesize proxyConnectionTime=_proxyConnectionTime;
@property(nonatomic) long long lastProxyState; // @synthesize lastProxyState=_lastProxyState;
@property(nonatomic) int proxyRSSI; // @synthesize proxyRSSI=_proxyRSSI;
@property(retain, nonatomic) NSString *proxyDeviceModel; // @synthesize proxyDeviceModel=_proxyDeviceModel;
@property(nonatomic) long long proxyErrorCode; // @synthesize proxyErrorCode=_proxyErrorCode;
@property(retain, nonatomic) NSError *authSessionError; // @synthesize authSessionError=_authSessionError;
@property(retain, nonatomic) NSString *scanErrorString; // @synthesize scanErrorString=_scanErrorString;
@property(nonatomic) _Bool notifiedForProxy; // @synthesize notifiedForProxy=_notifiedForProxy;
@property(nonatomic) double proxyDiscoverTime; // @synthesize proxyDiscoverTime=_proxyDiscoverTime;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *scanTimer; // @synthesize scanTimer=_scanTimer;
@property(copy, nonatomic) CDUnknownBlockType attemptActivatedHandler; // @synthesize attemptActivatedHandler=_attemptActivatedHandler;
@property(retain, nonatomic) NSString *attemptAppName; // @synthesize attemptAppName=_attemptAppName;
@property(retain, nonatomic) NSString *attemptBundlePath; // @synthesize attemptBundlePath=_attemptBundlePath;
@property(nonatomic) long long attemptType; // @synthesize attemptType=_attemptType;
@property(retain, nonatomic) SFAutoUnlockDevice *attemptDevice; // @synthesize attemptDevice=_attemptDevice;
@property(retain, nonatomic) SFDeviceDiscovery *scanner; // @synthesize scanner=_scanner;
@property(nonatomic) _Bool extendedTimer; // @synthesize extendedTimer=_extendedTimer;
@property(retain, nonatomic) NSDate *attemptStart; // @synthesize attemptStart=_attemptStart;
@property(retain, nonatomic) NSDate *prewarmStart; // @synthesize prewarmStart=_prewarmStart;
@property(nonatomic) _Bool attemptPrewarmed; // @synthesize attemptPrewarmed=_attemptPrewarmed;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *nearbyPushTimer; // @synthesize nearbyPushTimer=_nearbyPushTimer;
@property(nonatomic) _Bool previousNearbyState; // @synthesize previousNearbyState=_previousNearbyState;
@property(retain, nonatomic) NSData *previousMacAddressData; // @synthesize previousMacAddressData=_previousMacAddressData;
@property(nonatomic) _Bool watchUnlockEnabled; // @synthesize watchUnlockEnabled=_watchUnlockEnabled;
@property(retain, nonatomic) NSMutableSet *serviceClients; // @synthesize serviceClients=_serviceClients;
@property(retain, nonatomic) NSMutableDictionary *lockRegistrationSessionsByDeviceID; // @synthesize lockRegistrationSessionsByDeviceID=_lockRegistrationSessionsByDeviceID;
@property(retain, nonatomic) NSMutableDictionary *keyRegistrationSessionsByDeviceID; // @synthesize keyRegistrationSessionsByDeviceID=_keyRegistrationSessionsByDeviceID;
@property(retain, nonatomic) NSMutableArray *keysWithAKSTokens; // @synthesize keysWithAKSTokens=_keysWithAKSTokens;
@property(retain, nonatomic) NSMutableArray *locksWithAKSTokens; // @synthesize locksWithAKSTokens=_locksWithAKSTokens;
@property(retain, nonatomic) NSMutableDictionary *proxySessions; // @synthesize proxySessions=_proxySessions;
@property(retain, nonatomic) NSMutableDictionary *keyPairingSessions; // @synthesize keyPairingSessions=_keyPairingSessions;
@property(retain, nonatomic) NSMutableDictionary *lockPairingSessions; // @synthesize lockPairingSessions=_lockPairingSessions;
@property(retain, nonatomic) NSMutableDictionary *keyAuthSessions; // @synthesize keyAuthSessions=_keyAuthSessions;
@property(retain, nonatomic) NSMutableArray *canceledAuthLockSessions; // @synthesize canceledAuthLockSessions=_canceledAuthLockSessions;
@property(retain, nonatomic) NSMutableArray *canceledPairingKeySessions; // @synthesize canceledPairingKeySessions=_canceledPairingKeySessions;
@property(retain, nonatomic) NSMutableDictionary *lockAuthSessions; // @synthesize lockAuthSessions=_lockAuthSessions;
@property(retain, nonatomic) SDAutoUnlockSuggestionManager *suggestionManager; // @synthesize suggestionManager=_suggestionManager;
@property(retain, nonatomic) NSHashTable *observerTable; // @synthesize observerTable=_observerTable;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *sessionManagerQueue; // @synthesize sessionManagerQueue=_sessionManagerQueue;
@property(copy, nonatomic) NSDictionary *awdlInfo; // @synthesize awdlInfo=_awdlInfo;
@property(nonatomic) unsigned long long stateHandle; // @synthesize stateHandle=_stateHandle;
@property(retain, nonatomic) NSData *attemptExternalACMContext; // @synthesize attemptExternalACMContext=_attemptExternalACMContext;
@property(nonatomic) _Bool attemptInProgress; // @synthesize attemptInProgress=_attemptInProgress;
@property(copy, nonatomic) NSString *state; // @synthesize state=_state;
- (void)loadPreviousSessionIDs;	// IMP=0x001000000006af9c
- (_Bool)previousSessionExists:(id)arg1;	// IMP=0x001000000006aefa
- (void)storePreviousSessionID:(id)arg1;	// IMP=0x001000000006ad4b
- (struct os_state_data_s *)dumpState;	// IMP=0x001000000006a6de
- (void)initializeCaptureBlock;	// IMP=0x001000000006a63f
- (void)generateStateDump;	// IMP=0x001000000006a5fe
- (void)savePresentedWiFiError;	// IMP=0x001000000006a58a
- (void)savePresentedBluetoothError;	// IMP=0x001000000006a516
- (void)loadPresentedWiFiError;	// IMP=0x001000000006a4af
- (void)loadPresentedBluetoothError;	// IMP=0x001000000006a448
- (_Bool)shouldShowErrorForWiFiEnabled:(_Bool)arg1;	// IMP=0x001000000006a2d3
- (_Bool)shouldShowErrorForBluetoothEnabled:(_Bool)arg1;	// IMP=0x001000000006a15e
- (long long)errorCodeForBluetoothEnabled:(_Bool)arg1 wifiEnabled:(_Bool)arg2 faceIDEnabled:(_Bool)arg3;	// IMP=0x001000000006a12d
- (id)errorStringForBluetoothEnabled:(_Bool)arg1 wifiEnabled:(_Bool)arg2 faceIDEnabled:(_Bool)arg3;	// IMP=0x001000000006a0ba
- (void)handleWiFiPowerChanged:(id)arg1;	// IMP=0x001000000006a0b4
- (void)handleBluetoothPowerChanged:(id)arg1;	// IMP=0x0010000000069f9d
- (id)baseResultsDictionaryForError:(id)arg1;	// IMP=0x0010000000069d5a
- (void)createRadarForError:(id)arg1 devices:(id)arg2 rangingResults:(id)arg3;	// IMP=0x0010000000069d54
- (void)cancelMagnetLinkTimer;	// IMP=0x0010000000069b08
- (void)btPipeConnectionChanged:(id)arg1;	// IMP=0x0010000000069b02
- (void)setUpMagnetLinkTimer;	// IMP=0x0010000000069715
- (_Bool)deviceCurrentlyUnlockedByWatch;	// IMP=0x00100000000696a5
- (void)releaseLanguageAssertionForAutoRelock;	// IMP=0x0010000000069600
- (void)grabLanguageAssertionForAutoRelock;	// IMP=0x00100000000694a4
- (void)handleAuthenticationSessionStarted;	// IMP=0x00100000000692da
- (void)handlePairedDeviceLockStateChanged;	// IMP=0x00100000000692d4
- (void)handleBioLockout;	// IMP=0x001000000006907f
- (void)beginKeyRegistrationIfNecessary;	// IMP=0x0010000000068d93
- (void)handleDisplayStateChanged:(unsigned long long)arg1;	// IMP=0x0010000000068cd7
- (void)handleNearbyStateChanged;	// IMP=0x0010000000068cc5
- (void)pipeConnectionChanged:(id)arg1;	// IMP=0x0010000000068bfd
- (id)unlockedOnWristDate;	// IMP=0x0010000000068bf5
- (void)wristStateChanged:(id)arg1;	// IMP=0x0010000000068bef
- (void)handleLockStateChanged;	// IMP=0x0010000000068a8f
- (void)handleUnexpectedDisablement:(id)arg1;	// IMP=0x0010000000068960
- (_Bool)shouldNotify;	// IMP=0x0010000000068958
- (void)upsellPhoneAutoUnlock;	// IMP=0x0010000000068952
- (void)upsellBehaviorChangedAfterUpgradeIfNecessary;	// IMP=0x0010000000068615
- (_Bool)behaviorChangedAfterUpgrade;	// IMP=0x001000000006860d
- (void)clearPhoneAutoUnlockNotification:(_Bool)arg1;	// IMP=0x0010000000068514
- (void)screenLockUnlocked:(id)arg1;	// IMP=0x001000000006850e
- (void)onqueue_keyBagLockStateChange:(id)arg1;	// IMP=0x0010000000068392
- (void)keyBagLockStateChange:(id)arg1;	// IMP=0x00100000000682c4
- (void)handleRelockMessage;	// IMP=0x001000000006828f
- (void)handleBLEDataReceivedNotification:(id)arg1;	// IMP=0x00100000000678cc
- (void)removeServiceClientForIdentifier:(id)arg1;	// IMP=0x001000000006784d
- (void)addServiceClientForIdentifier:(id)arg1;	// IMP=0x00100000000677ce
- (long long)idsMacCount;	// IMP=0x0010000000067723
- (_Bool)watchLockedAndOnWrist;	// IMP=0x001000000006771b
- (_Bool)advertisingEnabled;	// IMP=0x0010000000067713
- (void)updateAdvertising;	// IMP=0x001000000006742a
- (_Bool)watchLockedOnWristForPeer:(id)arg1;	// IMP=0x00100000000673fd
- (_Bool)proxyAdvertisementForPeer:(id)arg1;	// IMP=0x00100000000673d0
- (_Bool)unlockEnabledForPeer:(id)arg1;	// IMP=0x00100000000673a3
- (void)handleScanTimerFired;	// IMP=0x0010000000066d74
- (void)handleBLEScanTimerFired;	// IMP=0x0010000000066d1d
- (void)invalidateScanTimer;	// IMP=0x0010000000066c47
- (void)restartScanTimer:(unsigned long long)arg1;	// IMP=0x0010000000066a0e
- (void)handleFoundPeer:(id)arg1;	// IMP=0x00100000000664ea
- (void)invalidateScanner;	// IMP=0x0010000000066375
- (void)startScannerWithWatchBluetoothIDs:(id)arg1 phoneBluetoothIDs:(id)arg2;	// IMP=0x001000000006590d
- (void)idsController:(id)arg1 didReceiveProtoData:(id)arg2 forType:(unsigned short)arg3 deviceID:(id)arg4;	// IMP=0x00100000000653e0
- (void)transport:(id)arg1 didReceiveKeyOriginatingRegistrationRequestWithSessionID:(id)arg2 deviceID:(id)arg3 requestData:(id)arg4;	// IMP=0x0010000000065259
- (void)transport:(id)arg1 didReceiveRegistrationRequestWithSessionID:(id)arg2 deviceID:(id)arg3 requestData:(id)arg4;	// IMP=0x0010000000065107
- (void)transport:(id)arg1 didReceivePairingRequestWithSessionID:(id)arg2 deviceID:(id)arg3 requestData:(id)arg4;	// IMP=0x0010000000064fd6
- (void)transportDidChangeNearbyState:(id)arg1;	// IMP=0x0010000000064f2b
- (void)transportDidChangeDevices:(id)arg1;	// IMP=0x0010000000064e53
- (void)performRegistrationIfNecessaryForLockSession:(id)arg1 error:(id)arg2;	// IMP=0x0010000000064cae
- (_Bool)isDisplayOff;	// IMP=0x0010000000064ca6
- (void)sessionDidSendInitialData:(id)arg1;	// IMP=0x0010000000064ca0
- (void)sessionDidReceiveKeyDeviceLocked:(id)arg1;	// IMP=0x0010000000064be2
- (void)handleProxyConnectionStartedForSession:(id)arg1;	// IMP=0x00100000000647d6
- (void)handleLockConnectionStartedForSession:(id)arg1;	// IMP=0x0010000000063e8e
- (void)sessionDidStartConnection:(id)arg1;	// IMP=0x0010000000063e19
- (void)handleProxySessionCompleted:(id)arg1 error:(id)arg2;	// IMP=0x0010000000063b6e
- (void)handleLockSessionCompleted:(id)arg1 error:(id)arg2;	// IMP=0x0010000000062f7e
- (void)session:(id)arg1 didCompleteWithError:(id)arg2;	// IMP=0x0010000000061f6d
- (void)cancelParallelRegistrationSessionsForDeviceID:(id)arg1 newSessionID:(id)arg2;	// IMP=0x0010000000061d55
- (void)registerRemotePeerIfNecessary;	// IMP=0x0010000000061d4f
- (void)initializeRemotePeer;	// IMP=0x0010000000061b46
- (void)armDevicesWaitingForUnlock;	// IMP=0x0010000000061a82
- (void)createRegistrationLockSessionWithDeviceID:(id)arg1 sessionID:(id)arg2 requestData:(id)arg3;	// IMP=0x00100000000617dd
- (void)createRegistrationKeySessionWithIdentifier:(id)arg1 deviceID:(id)arg2 requestData:(id)arg3 locallyGenerated:(_Bool)arg4;	// IMP=0x0010000000061548
- (void)invalidateExistingSessionsForBLEDevice:(id)arg1 incomingSessionID:(id)arg2;	// IMP=0x00000000000610d0
- (void)cancelAllLockSessionsForScanTimeout;	// IMP=0x0010000000060f3c
- (void)clearAllKeysWithTokens;	// IMP=0x0010000000060e98
- (void)cleanUpProxySessions;	// IMP=0x0010000000060c9a
- (void)updateStringForProxySession;	// IMP=0x0010000000060a1a
- (void)createProxySessionWithDeviceID:(id)arg1;	// IMP=0x001000000006075d
- (void)createKeySessionWithBLEDevice:(id)arg1 sessionID:(id)arg2 wrapper:(id)arg3 useEncryption:(_Bool)arg4;	// IMP=0x0010000000060346
- (void)createLockSessionWithWatchDevice:(id)arg1;	// IMP=0x001000000005fdf9
- (void)createPairingKeySessionWithIdentifier:(id)arg1 deviceID:(id)arg2 requestData:(id)arg3;	// IMP=0x001000000005fb81
- (void)createPairingLockSessionWithDevice:(id)arg1 passcode:(id)arg2;	// IMP=0x001000000005f746
- (void)disableKeyPairingForDeviceID:(id)arg1;	// IMP=0x001000000005f5a6
- (void)handleDisableMessageForLock:(id)arg1 fromDeviceID:(id)arg2;	// IMP=0x001000000005f3ca
- (void)handleDisableMessageForKey:(id)arg1 fromDeviceID:(id)arg2;	// IMP=0x001000000005efc4
- (void)transport:(id)arg1 didReceiveDisableMessage:(id)arg2 fromDeviceID:(id)arg3;	// IMP=0x001000000005ed6f
- (void)sendDisableMessageToDeviceID:(id)arg1 pairingID:(id)arg2;	// IMP=0x001000000005eaee
- (_Bool)disablePairingForDeviceID:(id)arg1 pairingID:(id)arg2;	// IMP=0x001000000005e9c9
- (void)authPromptInfoWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000005e938
- (id)stringForState:(long long)arg1;	// IMP=0x001000000005e8e4
- (void)autoUnlockStateWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000005e729
- (void)requestRelock;	// IMP=0x001000000005e5bc
- (void)generateAppIconImageWithOptions:(unsigned int)arg1;	// IMP=0x001000000005e5b6
- (void)decrementAttemptCount;	// IMP=0x001000000005e51b
- (void)incrementAttemptCount;	// IMP=0x001000000005e372
- (void)logUnintentionalAutoUnlockAttempt:(unsigned long long)arg1;	// IMP=0x001000000005e12e
- (void)cancelAttemptsForDeviceUnlocked;	// IMP=0x001000000005df3d
- (void)cancelAutoUnlockWithCancelReason:(long long)arg1 usingTool:(_Bool)arg2;	// IMP=0x001000000005df37
- (void)cancelAutoUnlock;	// IMP=0x001000000005df1c
- (void)completeSuccessfulAttempt;	// IMP=0x001000000005df16
- (void)invalidateAttempt;	// IMP=0x001000000005dc17
- (void)donateDeviceUnlockedWithMask:(_Bool)arg1;	// IMP=0x001000000005db57
- (void)completeAutoUnlockWithNotification:(_Bool)arg1;	// IMP=0x001000000005d3af
- (void)attemptAutoUnlockWithoutNotifyingWatch;	// IMP=0x001000000005d320
- (void)attemptAutoUnlockForSiri;	// IMP=0x001000000005d291
- (void)prewarmAutoUnlock;	// IMP=0x001000000005d177
- (void)attemptAutoUnlock;	// IMP=0x001000000005ba1d
- (void)failedAttemptBeforeStarting:(id)arg1 metricErrorString:(id)arg2;	// IMP=0x001000000005b6ed
- (void)dropEscrowRecordsIfNecessary;	// IMP=0x001000000005b6e7
- (void)generateAttemptForType:(long long)arg1;	// IMP=0x001000000005af16
- (void)attemptAutoUnlockForType:(long long)arg1 externalACMContext:(id)arg2 preventRadarNotification:(_Bool)arg3 bundlePath:(id)arg4 appName:(id)arg5 reply:(CDUnknownBlockType)arg6;	// IMP=0x001000000005aca0
- (void)attemptAutoUnlockForType:(long long)arg1 preventRadarNotification:(_Bool)arg2;	// IMP=0x001000000005ac76
- (void)attemptAutoUnlockForType:(long long)arg1;	// IMP=0x001000000005ac5f
- (void)disableAutoUnlockForDevice:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x001000000005a9dd
- (void)disableAutoUnlockForAllDevices;	// IMP=0x001000000005a836
- (void)cancelEnablingAutoUnlockForDeviceID:(id)arg1;	// IMP=0x001000000005a66b
- (void)cancelEnablingAutoUnlockForDevice:(id)arg1;	// IMP=0x001000000005a569
- (void)cancelEnablingAllDevices;	// IMP=0x001000000005a33b
- (void)enableAutoUnlockWithDevice:(id)arg1 passcode:(id)arg2;	// IMP=0x001000000005a08b
- (void)eligibleDevicesRequestFromBundleID:(id)arg1 withCompletionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000059baf
- (_Bool)phoneAutoUnlockSupportedByDevice:(id)arg1;	// IMP=0x0010000000059ac3
- (void)eligibleDevicesFilterCompatibleDevices:(id)arg1;	// IMP=0x0010000000059857
- (void)repairCloudPairing;	// IMP=0x001000000005977b
- (void)notifyObserversOfUnlockFailureWithResults:(id)arg1 error:(id)arg2;	// IMP=0x0010000000059428
- (void)notifyObserversOfUnlockCompletionWithDevice:(id)arg1;	// IMP=0x001000000005915d
- (void)notifyObserverOfAttemptBeganWithDevice:(id)arg1;	// IMP=0x0010000000058eb1
- (void)notifyObserverOfFailedToEnableDevice:(id)arg1 error:(id)arg2;	// IMP=0x0010000000058bd2
- (void)notifyObserverOfEnabledDevice:(id)arg1;	// IMP=0x0010000000058926
- (void)notifyObserverOfKeyDeviceLockWithDevice:(id)arg1;	// IMP=0x001000000005867a
- (void)unregisterObserver:(id)arg1;	// IMP=0x00100000000584f4
- (void)registerObserver:(id)arg1;	// IMP=0x001000000005836c
- (void)addNotificationsObservers;	// IMP=0x00100000000581f3
- (void)initializeAttemptState;	// IMP=0x0010000000057df0
- (void)onqueue_start;	// IMP=0x0010000000057944
- (void)start;	// IMP=0x00100000000578bb
- (id)initWithTransport:(id)arg1 magnetTransport:(id)arg2 keyManager:(id)arg3;	// IMP=0x0010000000057405
- (id)init;	// IMP=0x0010000000057355

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

