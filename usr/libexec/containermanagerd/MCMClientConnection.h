//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class MCMClientIdentity, MCMCommandQueue, MCMUserIdentityCache, NSArray, NSDictionary, NSMutableDictionary, NSString;

@interface MCMClientConnection : NSObject
{
    NSMutableDictionary *_sanitizedLookup;	// 8 = 0x8
    _Bool _allowOtherIdLookup;	// 16 = 0x10
    _Bool _allowGroupIdLookup;	// 17 = 0x11
    MCMClientIdentity *_clientIdentity;	// 24 = 0x18
    MCMCommandQueue *_commandQueue;	// 32 = 0x20
    NSString *_clientBundleIdentifier;	// 40 = 0x28
    NSArray *_entitledWipeIdentifiers;	// 48 = 0x30
    NSDictionary *_lookup;	// 56 = 0x38
    MCMUserIdentityCache *_userIdentityCache;	// 64 = 0x40
}

+ (id)privilegedClientConnectionWithUserIdentity:(id)arg1;	// IMP=0x0040000000091558
+ (id)privilegedClientConnectionWithUserIdentity:(id)arg1 kernel:(_Bool)arg2;	// IMP=0x00100000000914c3
+ (id)sharedClientConnection;	// IMP=0x0010000000091493
- (void).cxx_destruct;	// IMP=0x002000000008fe85
@property(readonly, nonatomic) MCMUserIdentityCache *userIdentityCache; // @synthesize userIdentityCache=_userIdentityCache;
@property(readonly, nonatomic) NSDictionary *lookup; // @synthesize lookup=_lookup;
@property(retain, nonatomic) NSArray *entitledWipeIdentifiers; // @synthesize entitledWipeIdentifiers=_entitledWipeIdentifiers;
@property(retain, nonatomic) NSString *clientBundleIdentifier; // @synthesize clientBundleIdentifier=_clientBundleIdentifier;
@property(readonly, nonatomic) MCMCommandQueue *commandQueue; // @synthesize commandQueue=_commandQueue;
@property(nonatomic) _Bool allowGroupIdLookup; // @synthesize allowGroupIdLookup=_allowGroupIdLookup;
@property(nonatomic) _Bool allowOtherIdLookup; // @synthesize allowOtherIdLookup=_allowOtherIdLookup;
@property(readonly, nonatomic) MCMClientIdentity *clientIdentity; // @synthesize clientIdentity=_clientIdentity;
- (_Bool)_performOnDemandContainerMigrationIfNecessaryWithMetadata:(id)arg1 error:(unsigned long long *)arg2;	// IMP=0x001000000008f8f7
- (int)_desiredDataProtectionClassForMetadata:(id)arg1;	// IMP=0x001000000008f7e8
- (int)_intendedDataProtectionClassBasedOnEntitlementsForIdentifier:(id)arg1 containerClass:(unsigned long long)arg2 info:(id)arg3;	// IMP=0x001000000008f571
- (id)_setOfStringsFromArray:(id)arg1;	// IMP=0x001000000008f48a
- (id)lookupForContainerClass:(unsigned long long)arg1;	// IMP=0x001000000008f01f
- (void)flushCacheForContainerClass:(unsigned long long)arg1 transient:(_Bool)arg2;	// IMP=0x001000000008ef75
- (_Bool)completeWithError:(unsigned long long *)arg1;	// IMP=0x001000000008ef22
- (id)groupContainersForOwnerIdentifier:(id)arg1 userIdentity:(id)arg2 groupContainerClass:(unsigned long long)arg3 withError:(unsigned long long *)arg4;	// IMP=0x001000000008e7e3
- (_Bool)isEntitledForLookupWithClass:(unsigned long long)arg1 identifier:(id)arg2;	// IMP=0x001000000008e581
- (void)deleteUserManagedAssetWithContainerIdentity:(id)arg1 relativePath:(id)arg2 withError:(unsigned long long *)arg3;	// IMP=0x001000000008d4a0
- (id)userManagedAssetsPathWithContainerIdentity:(id)arg1 isRelative:(_Bool)arg2 createIfNecessary:(_Bool)arg3 existed:(_Bool *)arg4 withError:(unsigned long long *)arg5;	// IMP=0x001000000008c71d
- (id)stageSharedContentForContainerIdentity:(id)arg1 sourceRelativePath:(id)arg2 destRelativePath:(id)arg3 withError:(unsigned long long *)arg4;	// IMP=0x001000000008b353
- (void)retryTestWithNumCrashes:(unsigned long long)arg1 withError:(unsigned long long *)arg2;	// IMP=0x001000000008a7fe
- (unsigned long long)diskUsageWithContainerIdentity:(id)arg1 withError:(unsigned long long *)arg2;	// IMP=0x0010000000089d44
- (void)deleteDataContainerContentWithContainerIdentity:(id)arg1 withError:(unsigned long long *)arg2;	// IMP=0x0010000000089433
- (void)deleteContainerWithContainerIdentity:(id)arg1 transient:(_Bool)arg2 withError:(unsigned long long *)arg3;	// IMP=0x001000000008918c
- (void)regenerateDirectoryUUIDWithContainerIdentity:(id)arg1 withError:(unsigned long long *)arg2;	// IMP=0x0010000000088769
- (void)_regenerateAllSystemContainerPaths;	// IMP=0x0010000000087e8c
- (void)recreateDefaultStructureWithContainerIdentity:(id)arg1 withError:(unsigned long long *)arg2;	// IMP=0x00100000000876e5
- (id)metadataWithContainerIdentity:(id)arg1 updateLinks:(_Bool)arg2 withError:(unsigned long long *)arg3;	// IMP=0x00100000000873b7
- (id)infoValueForKey:(id)arg1 containerIdentity:(id)arg2 useLocking:(_Bool)arg3 withError:(unsigned long long *)arg4;	// IMP=0x0010000000086ee6
- (void)setInfoValue:(id)arg1 forKey:(id)arg2 containerIdentity:(id)arg3 useLocking:(_Bool)arg4 withError:(unsigned long long *)arg5;	// IMP=0x001000000008692a
- (id)replaceContainerIdentity:(id)arg1 withContainerIdentity:(id)arg2 preserveOldPathIdentifier:(_Bool)arg3 preserveOldInternalUUID:(_Bool)arg4 startDeletionThread:(_Bool)arg5 withError:(unsigned long long *)arg6;	// IMP=0x0010000000082c5e
- (id)containersWithClass:(unsigned long long)arg1 transient:(_Bool)arg2 withError:(unsigned long long *)arg3;	// IMP=0x00100000000829a4
- (id)createOrLookupContainerWithContainerIdentity:(id)arg1 createIfNecessary:(_Bool)arg2 transient:(_Bool)arg3 useLocking:(_Bool)arg4 updateLinks:(_Bool)arg5 withError:(unsigned long long *)arg6;	// IMP=0x001000000007f767
- (_Bool)isAllowedToLookupContainerIdentity:(id)arg1;	// IMP=0x001000000007f75f
- (_Bool)isAppropriatePersonaForContainerClass:(unsigned long long)arg1;	// IMP=0x001000000007f757
- (void)rebootContainerManagerCleanupWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000007f1c6
- (void)rebootContainerManagerSetup;	// IMP=0x001000000007e05e
- (void)_cleanupOprhanedCodeSigningMappingData;	// IMP=0x001000000007df1e
- (void)_cleanupOrphanedDataForDirectories:(id)arg1 containerClass:(unsigned long long)arg2;	// IMP=0x001000000007d6f7
- (void)containerManagerCleanupWithCompletion:(CDUnknownBlockType)arg1;	// IMP=0x001000000007d3f0
- (void)containerManagerSetup;	// IMP=0x001000000007d16c
- (id)initWithClientIdentity:(id)arg1 allowOtherIdLookup:(_Bool)arg2 lookup:(id)arg3 entitledWipeIdentifiers:(id)arg4 commandQueue:(id)arg5;	// IMP=0x001000000007cff6
- (id)init;	// IMP=0x001000000007cf17
- (_Bool)_recoverFromReplaceOperationsWithError:(id *)arg1;	// IMP=0x0010000000092714
- (_Bool)_writeToDiskReplaceAt:(id)arg1 old:(id)arg2 withNew:(id)arg3 usingStaging:(id)arg4 toDestination:(id)arg5 error:(id *)arg6;	// IMP=0x00100000000922b3
- (id)_readAndValidateReplaceFileAtUrl:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000091977
- (_Bool)_moveItemAtURLToDeathRow:(id)arg1 isDir:(_Bool)arg2 startDeletionThread:(_Bool)arg3 error:(id *)arg4;	// IMP=0x0010000000091591

@end

