//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CSADPPreventStandbyAssertion, CSAudioCircularBuffer, CSAudioPreprocessor, CSAudioRecordContext, CSAudioRecordDeviceIndicator, CSAudioRecorder, CSAudioTimeConverter, CSMicUsageReporter, CSOSTransaction, MISSING_TYPE, NSHashTable, NSMutableArray, NSMutableDictionary, NSString, NSUUID;
@protocol CSAudioAlertProvidingDelegate, CSAudioProviderDelegate, CSAudioSessionProvidingDelegate, OS_dispatch_group, OS_dispatch_queue, OS_dispatch_source;

@interface CSAudioProvider : NSObject
{
    _Bool _audioSystemRecovering;	// 8 = 0x8
    MISSING_TYPE *_waitingForAlertFinish;	// 9 = 0x9
    NSString *_UUID;	// 16 = 0x10
    NSObject<OS_dispatch_queue> *_recordQueue;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *_loggingQueue;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *_streamHandleQueue;	// 40 = 0x28
    CSAudioRecorder *_audioRecorder;	// 48 = 0x30
    unsigned long long _streamState;	// 56 = 0x38
    NSHashTable *_startPendingStreams;	// 64 = 0x40
    NSHashTable *_startPendingOnStoppingStreams;	// 72 = 0x48
    NSHashTable *_alertPlaybackFinishWaitingStreams;	// 80 = 0x50
    NSHashTable *_streams;	// 88 = 0x58
    NSHashTable *_stopPendingStreams;	// 96 = 0x60
    NSMutableArray *_pendingStartCompletions;	// 104 = 0x68
    NSMutableArray *_alertPlaybackFinishWaitingCompletions;	// 112 = 0x70
    NSMutableArray *_pendingStopCompletions;	// 120 = 0x78
    NSMutableDictionary *_startPendingOnStoppingStreamToCompletionDict;	// 128 = 0x80
    id <CSAudioProviderDelegate> _providerDelegate;	// 136 = 0x88
    id <CSAudioSessionProvidingDelegate> _sessionDelegate;	// 144 = 0x90
    NSMutableArray *_streamHolders;	// 152 = 0x98
    NSHashTable *_historicalBufferRequestStreams;	// 160 = 0xa0
    CSAudioCircularBuffer *_circularBuffer;	// 168 = 0xa8
    id <CSAudioAlertProvidingDelegate> _alertDelegate;	// 176 = 0xb0
    CSAudioRecordContext *_lastAudioRecorderContext;	// 184 = 0xb8
    CSAudioPreprocessor *_audioPreprocessor;	// 192 = 0xc0
    CSOSTransaction *_recordingTransaction;	// 200 = 0xc8
    NSObject<OS_dispatch_group> *_recordingWillStartGroup;	// 208 = 0xd0
    unsigned long long _audioStreamHandleId;	// 216 = 0xd8
    NSUUID *_alertPlaybackFinishTimeoutToken;	// 224 = 0xe0
    NSUUID *_startRecordingWatchDogToken;	// 232 = 0xe8
    NSUUID *_stopRecordingWatchDogToken;	// 240 = 0xf0
    NSObject<OS_dispatch_source> *_audioPacketWatchdog;	// 248 = 0xf8
    unsigned long long _circularBufferStartHostTime;	// 256 = 0x100
    unsigned long long _circularBufferStartSampleCount;	// 264 = 0x108
    CSAudioTimeConverter *_audioTimeConverter;	// 272 = 0x110
    unsigned long long _estimatedStartHostTime;	// 280 = 0x118
    long long _audioStreamType;	// 288 = 0x120
    CSAudioRecordDeviceIndicator *_recordDeviceIndicator;	// 296 = 0x128
    CSMicUsageReporter *_micUsageReporter;	// 304 = 0x130
    unsigned long long _audioPacketDeliveryCount;	// 312 = 0x138
    CSADPPreventStandbyAssertion *_adpAssertion;	// 320 = 0x140
}

- (void).cxx_destruct;	// IMP=0x0020000000049988
@property(retain, nonatomic) CSADPPreventStandbyAssertion *adpAssertion; // @synthesize adpAssertion=_adpAssertion;
@property(nonatomic) unsigned long long audioPacketDeliveryCount; // @synthesize audioPacketDeliveryCount=_audioPacketDeliveryCount;
@property(retain, nonatomic) CSMicUsageReporter *micUsageReporter; // @synthesize micUsageReporter=_micUsageReporter;
@property(retain, nonatomic) CSAudioRecordDeviceIndicator *recordDeviceIndicator; // @synthesize recordDeviceIndicator=_recordDeviceIndicator;
@property(nonatomic) long long audioStreamType; // @synthesize audioStreamType=_audioStreamType;
@property(nonatomic) unsigned long long estimatedStartHostTime; // @synthesize estimatedStartHostTime=_estimatedStartHostTime;
@property(retain, nonatomic) CSAudioTimeConverter *audioTimeConverter; // @synthesize audioTimeConverter=_audioTimeConverter;
@property(nonatomic) unsigned long long circularBufferStartSampleCount; // @synthesize circularBufferStartSampleCount=_circularBufferStartSampleCount;
@property(nonatomic) unsigned long long circularBufferStartHostTime; // @synthesize circularBufferStartHostTime=_circularBufferStartHostTime;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *audioPacketWatchdog; // @synthesize audioPacketWatchdog=_audioPacketWatchdog;
@property(retain, nonatomic) NSUUID *stopRecordingWatchDogToken; // @synthesize stopRecordingWatchDogToken=_stopRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *startRecordingWatchDogToken; // @synthesize startRecordingWatchDogToken=_startRecordingWatchDogToken;
@property(retain, nonatomic) NSUUID *alertPlaybackFinishTimeoutToken; // @synthesize alertPlaybackFinishTimeoutToken=_alertPlaybackFinishTimeoutToken;
@property(nonatomic) unsigned long long audioStreamHandleId; // @synthesize audioStreamHandleId=_audioStreamHandleId;
@property(nonatomic) _Bool waitingForAlertFinish; // @synthesize waitingForAlertFinish=_waitingForAlertFinish;
@property(retain, nonatomic) NSObject<OS_dispatch_group> *recordingWillStartGroup; // @synthesize recordingWillStartGroup=_recordingWillStartGroup;
@property(retain, nonatomic) CSOSTransaction *recordingTransaction; // @synthesize recordingTransaction=_recordingTransaction;
@property(retain, nonatomic) CSAudioPreprocessor *audioPreprocessor; // @synthesize audioPreprocessor=_audioPreprocessor;
@property(nonatomic) _Bool audioSystemRecovering; // @synthesize audioSystemRecovering=_audioSystemRecovering;
@property(retain, nonatomic) CSAudioRecordContext *lastAudioRecorderContext; // @synthesize lastAudioRecorderContext=_lastAudioRecorderContext;
@property(nonatomic) __weak id <CSAudioAlertProvidingDelegate> alertDelegate; // @synthesize alertDelegate=_alertDelegate;
@property(retain, nonatomic) CSAudioCircularBuffer *circularBuffer; // @synthesize circularBuffer=_circularBuffer;
@property(retain, nonatomic) NSHashTable *historicalBufferRequestStreams; // @synthesize historicalBufferRequestStreams=_historicalBufferRequestStreams;
@property(retain, nonatomic) NSMutableArray *streamHolders; // @synthesize streamHolders=_streamHolders;
@property(nonatomic) __weak id <CSAudioSessionProvidingDelegate> sessionDelegate; // @synthesize sessionDelegate=_sessionDelegate;
@property(nonatomic) __weak id <CSAudioProviderDelegate> providerDelegate; // @synthesize providerDelegate=_providerDelegate;
@property(retain, nonatomic) NSMutableDictionary *startPendingOnStoppingStreamToCompletionDict; // @synthesize startPendingOnStoppingStreamToCompletionDict=_startPendingOnStoppingStreamToCompletionDict;
@property(retain, nonatomic) NSMutableArray *pendingStopCompletions; // @synthesize pendingStopCompletions=_pendingStopCompletions;
@property(retain, nonatomic) NSMutableArray *alertPlaybackFinishWaitingCompletions; // @synthesize alertPlaybackFinishWaitingCompletions=_alertPlaybackFinishWaitingCompletions;
@property(retain, nonatomic) NSMutableArray *pendingStartCompletions; // @synthesize pendingStartCompletions=_pendingStartCompletions;
@property(retain, nonatomic) NSHashTable *stopPendingStreams; // @synthesize stopPendingStreams=_stopPendingStreams;
@property(retain, nonatomic) NSHashTable *streams; // @synthesize streams=_streams;
@property(retain, nonatomic) NSHashTable *alertPlaybackFinishWaitingStreams; // @synthesize alertPlaybackFinishWaitingStreams=_alertPlaybackFinishWaitingStreams;
@property(retain, nonatomic) NSHashTable *startPendingOnStoppingStreams; // @synthesize startPendingOnStoppingStreams=_startPendingOnStoppingStreams;
@property(retain, nonatomic) NSHashTable *startPendingStreams; // @synthesize startPendingStreams=_startPendingStreams;
@property(nonatomic) unsigned long long streamState; // @synthesize streamState=_streamState;
@property(retain, nonatomic) CSAudioRecorder *audioRecorder; // @synthesize audioRecorder=_audioRecorder;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *streamHandleQueue; // @synthesize streamHandleQueue=_streamHandleQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *loggingQueue; // @synthesize loggingQueue=_loggingQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *recordQueue; // @synthesize recordQueue=_recordQueue;
@property(readonly, nonatomic) NSString *UUID; // @synthesize UUID=_UUID;
- (void)_updateRemoteDeviceIdFromAVVCIfNeeded;	// IMP=0x00100000000492a4
- (_Bool)_shouldHandleStartPendingOnStopping:(unsigned long long)arg1 withStopReason:(long long)arg2;	// IMP=0x001000000004901b
- (void)_clearDidStopRecordingDelegateWatchDog;	// IMP=0x0010000000048f6b
- (void)_scheduleDidStopRecordingDelegateWatchDog:(id)arg1;	// IMP=0x0010000000048de5
- (void)_scheduleDidStopRecordingDelegateWatchDog;	// IMP=0x0010000000048c1c
- (void)_clearDidStartRecordingDelegateWatchDog;	// IMP=0x0010000000048b6c
- (void)_schduleDidStartRecordingDelegateWatchDogWithToken:(id)arg1;	// IMP=0x00100000000489a6
- (void)_scheduleDidStartRecordingDelegateWatchDog;	// IMP=0x001000000004878d
- (void)_onAudioPacketWatchdogFire;	// IMP=0x00100000000486d0
- (void)_cancelAudioPacketWatchDog;	// IMP=0x0010000000048691
- (void)_scheduleAudioPacketWatchDog;	// IMP=0x001000000004855b
- (void)_holdRecordingExceptionIfNeeded:(_Bool)arg1;	// IMP=0x001000000004843a
- (void)_releaseRecordingTransactionIfNeeded;	// IMP=0x0010000000048219
- (void)_holdRecordingTransactionIfNeeded;	// IMP=0x0010000000048172
- (id)_streamStateName:(unsigned long long)arg1;	// IMP=0x0010000000047f95
- (void)_handleAudioSystemFailure;	// IMP=0x0010000000047dcd
- (void)CSAudioServerCrashMonitorDidReceiveServerRestart:(id)arg1;	// IMP=0x0010000000047caf
- (void)CSAudioServerCrashMonitorDidReceiveServerCrash:(id)arg1;	// IMP=0x0010000000047bf4
- (void)audioRecorderDisconnected:(id)arg1;	// IMP=0x0010000000047b41
- (void)audioRecorder:(id)arg1 didSetAudioSessionActive:(_Bool)arg2;	// IMP=0x0010000000047a9c
- (void)audioRecorder:(id)arg1 willSetAudioSessionActive:(_Bool)arg2;	// IMP=0x00100000000479f7
- (void)audioRecorderEndRecordInterruption:(id)arg1;	// IMP=0x001000000004795a
- (void)audioRecorderBeginRecordInterruption:(id)arg1 withContext:(id)arg2;	// IMP=0x00100000000478b0
- (void)audioRecorderBeginRecordInterruption:(id)arg1;	// IMP=0x0010000000047813
- (void)audioRecorderBuiltInAudioStreamInvalidated:(id)arg1 error:(id)arg2;	// IMP=0x00100000000475dc
- (void)notifyProviderContextChanged;	// IMP=0x00100000000474e7
- (void)audioRecorderDidFinishAlertPlayback:(id)arg1 ofType:(long long)arg2 error:(id)arg3;	// IMP=0x00100000000473d1
- (void)_didReceiveFinishStartAlertPlaybackAt:(unsigned long long)arg1;	// IMP=0x0010000000046507
- (void)_scheduleAlertFinishTimeout:(double)arg1;	// IMP=0x00100000000462b0
- (void)audioRecorderRecordHardwareConfigurationDidChange:(id)arg1 toConfiguration:(long long)arg2;	// IMP=0x0010000000045e72
- (_Bool)isNarrowBand;	// IMP=0x0010000000045d7b
- (_Bool)isRecording;	// IMP=0x0010000000045c6f
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3;	// IMP=0x0010000000045815
- (void)_forwardAudioChunkForTV:(id)arg1 toStream:(id)arg2;	// IMP=0x0010000000045669
- (void)audioRecorderBufferAvailable:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 buffer:(id)arg3 remoteVAD:(id)arg4 atTime:(unsigned long long)arg5 arrivalTimestampToAudioRecorder:(unsigned long long)arg6 numberOfChannels:(int)arg7;	// IMP=0x0010000000045201
- (void)_forwardAudioChunk:(id)arg1 toStream:(id)arg2;	// IMP=0x0010000000044f8b
- (void)_processAudioBuffer:(id)arg1 remoteVAD:(id)arg2 atTime:(unsigned long long)arg3 arrivalTimestampToAudioRecorder:(unsigned long long)arg4 numberOfChannels:(int)arg5;	// IMP=0x0010000000044ab8
- (void)_deliverHistoricalAudioToStreamsWithRemoteVAD:(id)arg1;	// IMP=0x0010000000044761
- (void)_fetchHistoricalAudioAndForwardToStream:(id)arg1 remoteVAD:(id)arg2;	// IMP=0x0010000000043f4a
- (void)audioRecorderWillBeDestroyed:(id)arg1;	// IMP=0x0010000000043dbe
- (void)audioRecorderStreamHandleIdInvalidated:(unsigned long long)arg1;	// IMP=0x0010000000043ba8
- (void)audioRecorderDidStopRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 reason:(long long)arg3;	// IMP=0x0010000000043b29
- (void)audioRecorderDidStartRecord:(id)arg1 audioStreamHandleId:(unsigned long long)arg2 successfully:(_Bool)arg3 error:(id)arg4;	// IMP=0x0010000000043a1d
- (void)audioPreprocessor:(id)arg1 hasAvailableBuffer:(id)arg2 atTime:(unsigned long long)arg3 arrivalTimestampToAudioRecorder:(unsigned long long)arg4 numberOfChannels:(int)arg5;	// IMP=0x0010000000043943
- (_Bool)_shouldStopRecording;	// IMP=0x00100000000435ab
- (void)triggerInfoForContext:(id)arg1 completion:(CDUnknownBlockType)arg2;	// IMP=0x00100000000433ab
- (float)averagePowerForChannel:(unsigned long long)arg1;	// IMP=0x0010000000043354
- (float)peakPowerForChannel:(unsigned long long)arg1;	// IMP=0x00100000000432fd
- (void)updateMeters;	// IMP=0x00100000000432c0
- (void)setMeteringEnabled:(_Bool)arg1;	// IMP=0x0010000000043274
- (id)audioMetric;	// IMP=0x0010000000043224
- (void)configureAlertBehavior:(id)arg1;	// IMP=0x001000000004321e
- (unsigned long long)alertStartTime;	// IMP=0x00100000000430a2
- (_Bool)playRecordStartingAlertAndResetEndpointer;	// IMP=0x0010000000042d3e
- (_Bool)_didPlayStartAlertSoundForSiri:(id)arg1 audioStream:(id)arg2;	// IMP=0x0010000000042d2d
- (_Bool)playAlertSoundForType:(long long)arg1;	// IMP=0x0010000000042ba1
- (_Bool)setAlertSoundFromURL:(id)arg1 forType:(long long)arg2;	// IMP=0x00100000000429ff
- (void)setAudioAlertDelegate:(id)arg1;	// IMP=0x0010000000042957
- (void)setAnnounceCallsEnabled:(_Bool)arg1 withStreamHandleID:(unsigned long long)arg2;	// IMP=0x00100000000428b0
- (void)enableMiniDucking:(_Bool)arg1;	// IMP=0x0010000000042810
- (void)setDuckOthersOption:(_Bool)arg1;	// IMP=0x0010000000042770
- (_Bool)duckOthersOption;	// IMP=0x001000000004268a
- (void)enableSmartRoutingConsideration:(_Bool)arg1;	// IMP=0x00100000000425da
- (_Bool)_deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x001000000004235f
- (_Bool)deactivateAudioSession:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x001000000004212e
- (_Bool)_activateAudioSessionWithReason:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0010000000041e63
- (_Bool)activateAudioSessionWithReason:(unsigned long long)arg1 dynamicAttribute:(unsigned long long)arg2 bundleID:(id)arg3 error:(id *)arg4;	// IMP=0x0010000000041be8
- (void)reportsDynamicActivityAttribute:(unsigned long long)arg1 bundleId:(id)arg2;	// IMP=0x0010000000041b8a
- (_Bool)prewarmAudioSessionWithError:(id *)arg1;	// IMP=0x0010000000041925
- (void)setAudioSessionDelegate:(id)arg1;	// IMP=0x001000000004187d
- (id)playbackRoute;	// IMP=0x0010000000041741
- (id)recordSettings;	// IMP=0x00100000000415f4
- (id)audioDeviceInfo;	// IMP=0x0010000000041491
- (id)recordDeviceInfo;	// IMP=0x001000000004132e
- (id)recordRoute;	// IMP=0x00100000000411e8
- (void)cancelAudioStreamHold:(id)arg1;	// IMP=0x0010000000040e12
- (id)holdAudioStreamWithDescription:(id)arg1 timeout:(double)arg2;	// IMP=0x001000000004077c
- (void)_saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x00100000000405d2
- (void)saveRecordingBufferFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 toURL:(id)arg3;	// IMP=0x001000000004050f
- (void)saveRecordingBufferToEndFrom:(unsigned long long)arg1 toURL:(id)arg2;	// IMP=0x001000000004041b
- (id)_audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 channelIdx:(unsigned long long)arg3;	// IMP=0x00100000000403c5
- (id)_audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x0010000000040374
- (id)audioChunkToEndFrom:(unsigned long long)arg1 channelIdx:(unsigned long long)arg2;	// IMP=0x001000000004023a
- (id)audioChunkToEndFrom:(unsigned long long)arg1;	// IMP=0x0010000000040108
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2 channelIdx:(unsigned long long)arg3;	// IMP=0x001000000003ffdf
- (id)audioChunkFrom:(unsigned long long)arg1 to:(unsigned long long)arg2;	// IMP=0x001000000003fe81
- (void)_stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x001000000003e410
- (void)stopAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x001000000003e306
- (void)_handleDidStopAudioStreamWithReason:(long long)arg1;	// IMP=0x000000000003d48e
- (void)_postEpilogueAudioStream;	// IMP=0x001000000003d3da
- (void)_preEpilogueAudioStream;	// IMP=0x001000000003d34e
- (void)_handleDidStartAudioStreamWithResult:(_Bool)arg1 error:(id)arg2;	// IMP=0x001000000003cdd5
- (void)_resetCircularBufferStartTime;	// IMP=0x001000000003cda3
- (void)_switchToListeningMode;	// IMP=0x001000000003cd39
- (void)_switchToRecordingMode;	// IMP=0x001000000003cccf
- (void)_startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x001000000003b2b7
- (void)prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x001000000003b007
- (_Bool)prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x001000000003acab
- (void)startAudioStream:(id)arg1 option:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x001000000003a6fc
- (void)_tearDownCircularBufferIfNeeded;	// IMP=0x001000000003a567
- (void)_prepareAudioStream:(id)arg1 request:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x001000000003a431
- (_Bool)_prepareAudioStreamSync:(id)arg1 request:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000039edf
- (void)attachTandemStream:(id)arg1 toPrimaryStream:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00100000000399c3
- (void)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 completion:(CDUnknownBlockType)arg3;	// IMP=0x00100000000397c1
- (id)audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x0010000000039507
- (id)_audioStreamWithRequest:(id)arg1 streamName:(id)arg2 error:(id *)arg3;	// IMP=0x00100000000392a1
- (_Bool)setCurrentContext:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000038d69
- (_Bool)_canSetContext;	// IMP=0x0010000000038cea
- (unsigned long long)audioStreamId;	// IMP=0x0010000000038cdd
- (void)_setLatestRecordContext:(id)arg1;	// IMP=0x0010000000038bf4
- (void)setLatestRecordContext:(id)arg1 streamType:(long long)arg2;	// IMP=0x0010000000038b31
- (void)setAudioProviderDelegate:(id)arg1;	// IMP=0x0010000000038a89
- (void)start;	// IMP=0x0010000000038676
- (void)dealloc;	// IMP=0x00100000000385c3
- (id)initWithAudioStreamHandleId:(unsigned long long)arg1 audioStreamType:(long long)arg2 audioRecordContext:(id)arg3 audioRecorder:(id)arg4;	// IMP=0x0010000000037f60

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

