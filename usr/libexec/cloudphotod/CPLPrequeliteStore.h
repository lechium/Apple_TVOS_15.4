//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <CloudPhotoLibrary/CPLPlatformObject.h>

@class CPLChangeSessionUpdate, CPLPrequeliteClientCacheMigrator, CPLPrequeliteVariable, CPLSimpleUpgradeHistory, NSDate, NSMutableDictionary, NSMutableSet, NSObject, NSString, NSURL, PQLConnection;
@protocol OS_dispatch_queue;

@interface CPLPrequeliteStore : CPLPlatformObject
{
    NSObject<OS_dispatch_queue> *_queue;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_writeQueue;	// 16 = 0x10
    PQLConnection *_db;	// 24 = 0x18
    NSURL *_dbURL;	// 32 = 0x20
    _Bool _configuringDB;	// 40 = 0x28
    NSMutableSet *_modifiedVariables;	// 48 = 0x30
    id _globalVariableCacheIdentifier;	// 56 = 0x38
    CPLPrequeliteVariable *_libraryVersionVar;	// 64 = 0x40
    CPLPrequeliteVariable *_userIdentifierVar;	// 72 = 0x48
    CPLPrequeliteVariable *_lastQuarantineCountReportDateVar;	// 80 = 0x50
    CPLPrequeliteVariable *_clientCacheIdentifierVar;	// 88 = 0x58
    CPLPrequeliteVariable *_clientCacheIdentifierAsKnownByClient;	// 96 = 0x60
    CPLPrequeliteVariable *_libraryCreationDateVar;	// 104 = 0x68
    CPLPrequeliteVariable *_changeSessionUpdateVar;	// 112 = 0x70
    _Bool _hasCachedChangeSessionUpdate;	// 120 = 0x78
    CPLChangeSessionUpdate *_cachedChangeSessionUpdate;	// 128 = 0x80
    CPLPrequeliteVariable *_libraryOptionsVar;	// 136 = 0x88
    CPLPrequeliteVariable *_shouldUpdateDisabledFeaturesVar;	// 144 = 0x90
    CPLPrequeliteVariable *_disabledFeaturesDataVar;	// 152 = 0x98
    CPLSimpleUpgradeHistory *_history;	// 160 = 0xa0
    CPLPrequeliteVariable *_derivativesFilterVar;	// 168 = 0xa8
    CPLPrequeliteVariable *_deactivatedVar;	// 176 = 0xb0
    Class _userIdentifierClass;	// 184 = 0xb8
    NSObject<OS_dispatch_queue> *_isClientInSyncWithClientCacheQueue;	// 192 = 0xc0
    _Bool _isClientInSyncWithClientCache;	// 200 = 0xc8
    unsigned long long _resetOption;	// 208 = 0xd0
    NSString *_resetReason;	// 216 = 0xd8
    NSString *_wipeReason;	// 224 = 0xe0
    _Bool _failInsteadOfWipe;	// 232 = 0xe8
    _Bool _needsToReset;	// 233 = 0xe9
    _Bool _reentrencyGuard;	// 234 = 0xea
    _Bool _didWipeLibrary;	// 235 = 0xeb
    int _upgradeEventJournal;	// 236 = 0xec
    _Bool _mustFix22666940;	// 240 = 0xf0
    _Bool;	// 241 = 0xf1
    CPLPrequeliteClientCacheMigrator *_clientCacheMigrator;	// 248 = 0xf8
    _Bool _hasScheduledClientCacheDrop;	// 256 = 0x100
    NSObject<OS_dispatch_queue> *_vacuumQueue;	// 264 = 0x108
    _Bool _executingVacuum;	// 272 = 0x110
    _Bool _shouldProfile;	// 273 = 0x111
    _Bool _showStatsForAllTransactions;	// 274 = 0x112
    double _lastLongTransactionDate;	// 280 = 0x118
    NSMutableDictionary *_transactionStatistics;	// 288 = 0x120
    NSDate *_libraryCreationDate;	// 296 = 0x128
}

+ (void)setShouldPreventWipeOnUpgrade:(_Bool)arg1;	// IMP=0x002000000002edef
+ (_Bool)shouldPreventWipeOnUpgrade;	// IMP=0x001000000002ed68
- (void).cxx_destruct;	// IMP=0x002000000003a1dd
@property(readonly) NSDate *libraryCreationDate; // @synthesize libraryCreationDate=_libraryCreationDate;
- (id)redactedDescription;	// IMP=0x001000000003a0ba
@property(readonly, copy) NSString *description;
- (_Bool)deleteDynamicallyCreatedStorages:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000039c04
- (_Bool)createStoragesDynamically:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000398f3
- (void)markAsCorrupted;	// IMP=0x00100000000396be
- (void)emergencyClose;	// IMP=0x0010000000039340
- (void)stopVacuum;	// IMP=0x001000000003925f
- (void)startVacuum;	// IMP=0x0010000000039047
- (void)_vacuum:(long long)arg1 withInitialDatabaseSize:(long long)arg2;	// IMP=0x0010000000038c11
- (long long)_sizeInBytes;	// IMP=0x0010000000038b42
- (id)transientPullRepository;	// IMP=0x0010000000038ac4
- (id)cloudCache;	// IMP=0x0010000000038a46
- (id)clientCache;	// IMP=0x0010000000038a16
- (_Bool)hasTable:(id)arg1;	// IMP=0x00100000000389c3
- (_Bool)table:(id)arg1 hasColumnWithName:(id)arg2;	// IMP=0x00100000000388b8
- (void)table:(id)arg1 enumerateCountGroupedByProperty:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000038799
- (void)table:(id)arg1 enumerateCountGroupedByUnsignedIntegerProperty:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x0010000000038677
- (unsigned long long)table:(id)arg1 countOfRecordsMatchingQuery:(id)arg2;	// IMP=0x00100000000385cf
- (unsigned long long)tableCountOfRecords:(id)arg1;	// IMP=0x0010000000038540
- (_Bool)table:(id)arg1 hasRecordsMatchingQuery:(id)arg2;	// IMP=0x00100000000384a7
- (_Bool)tableHasRecords:(id)arg1;	// IMP=0x001000000003842e
- (void)recordUpgradeEvent:(id)arg1 arguments:(struct __va_list_tag [1])arg2;	// IMP=0x0010000000038352
- (void)recordUpgradeEvent:(id)arg1;	// IMP=0x00100000000382b4
- (id)status;	// IMP=0x00100000000381e4
- (void)transactionDidFinish;	// IMP=0x00100000000381de
- (void)writeTransactionDidFail;	// IMP=0x0010000000038063
- (void)writeTransactionDidSucceed;	// IMP=0x0010000000038046
- (void)wipeStoreAtNextOpeningWithReason:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x0010000000037de3
- (void)_deleteWipeReason;	// IMP=0x0010000000037c32
- (id)wipeReason;	// IMP=0x0010000000037b7b
- (id)_wipeStoreMarkerURL;	// IMP=0x0010000000037ad3
- (_Bool)storeDerivativesFilter:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000037a31
- (id)derivativesFilter;	// IMP=0x00100000000379b4
- (id)disabledFeatures;	// IMP=0x00100000000378fb
- (_Bool)storeDisabledFeatures:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000037818
- (_Bool)setShouldUpdateDisabledFeaturesWithError:(id *)arg1;	// IMP=0x00100000000377f1
@property(readonly, nonatomic) _Bool shouldUpdateDisabledFeatures;
- (_Bool)storeChangeSessionUpdate:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000037625
@property(readonly, nonatomic) CPLChangeSessionUpdate *storedChangeSessionUpdate;
@property(readonly, nonatomic) _Bool hasStoredChangeSessionUpdate;
- (_Bool)isClientInSyncWithClientCache;	// IMP=0x0010000000037385
- (_Bool)storeClientIsNotInSyncWithClientCacheWithError:(id *)arg1;	// IMP=0x00100000000371f6
- (_Bool)storeClientIsInSyncWithClientCacheWithError:(id *)arg1;	// IMP=0x0010000000037035
- (id)createNewClientCacheIdentifier;	// IMP=0x0010000000036fde
- (_Bool)storeClientCacheIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000036fbe
- (id)clientCacheIdentifier;	// IMP=0x0010000000036fa1
- (_Bool)storeLastQuarantineCountReportDate:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000036f81
- (id)lastQuarantineCountReportDate;	// IMP=0x0010000000036f13
- (_Bool)storeUserIdentifier:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000036d92
- (id)userIdentifier;	// IMP=0x0010000000036b2a
- (Class)_userIdentifierClass;	// IMP=0x0010000000036a4f
- (_Bool)resetValueForGlobalVariable:(id)arg1 error:(id *)arg2;	// IMP=0x00100000000369cf
- (id)valueForGlobalVariable:(id)arg1;	// IMP=0x00100000000368a0
- (_Bool)setValue:(id)arg1 forGlobalVariable:(id)arg2 error:(id *)arg3;	// IMP=0x001000000003679a
- (_Bool)addGlobalVariable:(id)arg1 defaultValue:(id)arg2 error:(id *)arg3;	// IMP=0x00100000000363f1
- (void)_cacheValue:(id)arg1 forVariable:(id)arg2;	// IMP=0x0010000000036363
- (id)pqlConnection;	// IMP=0x001000000003634e
- (id)createNewLibraryVersion;	// IMP=0x00100000000362f7
- (_Bool)storeLibraryVersion:(id)arg1 withError:(id *)arg2;	// IMP=0x00100000000362d7
- (id)libraryVersion;	// IMP=0x00100000000362ba
- (_Bool)updateLibraryOptions:(unsigned long long)arg1 error:(id *)arg2;	// IMP=0x0010000000036029
- (unsigned long long)libraryOptions;	// IMP=0x0010000000035fda
- (void)performBarrier;	// IMP=0x0010000000035fb8
- (void)performBarrierTransaction:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x0010000000035eab
- (_Bool)closeWithError:(id *)arg1;	// IMP=0x0010000000035e63
- (void)blockWriteTransactionsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000035d02
- (void)performWriteTransaction:(id)arg1 withBlock:(CDUnknownBlockType)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000003578a
- (void)performReadTransaction:(id)arg1 withBlock:(CDUnknownBlockType)arg2;	// IMP=0x00100000000353d1
- (_Bool)executePostOpenWithError:(id *)arg1;	// IMP=0x001000000003530b
- (_Bool)openWithError:(id *)arg1;	// IMP=0x00100000000350c2
- (_Bool)_openWithError:(id *)arg1;	// IMP=0x0010000000033bf4
- (void)_markLibraryAsCorruptedWithInfo:(id)arg1;	// IMP=0x0010000000033b2e
- (_Bool)_setupPragmasAndFunctions;	// IMP=0x0010000000033b11
- (_Bool)markDatabaseAsDeactivatedWithError:(id *)arg1;	// IMP=0x0010000000033aea
- (void)_deleteCorruptionInfo;	// IMP=0x0010000000033939
@property(readonly, nonatomic) id corruptionInfo;
- (id)_corruptionMarkerURL;	// IMP=0x0010000000033794
- (_Bool)_setupDBIfNeeded;	// IMP=0x001000000003309f
- (_Bool)_upgradeDB:(long long)arg1;	// IMP=0x00100000000322f4
- (_Bool)_wipeIfDeactivated:(long long)arg1 didWipeDatabase:(_Bool *)arg2 error:(id *)arg3;	// IMP=0x00100000000321e3
- (void)_wipeBeforeOpeningIfNecessary;	// IMP=0x001000000003200f
- (id)_wipeReasonFromCorruptionInfo:(id)arg1;	// IMP=0x0010000000031f78
- (_Bool)_closeWipeAndReOpenWithReason:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000031c97
- (void)_wipeWithReason:(id)arg1;	// IMP=0x0010000000031ab3
- (_Bool)_postUpgradeToVersion:(long long)arg1;	// IMP=0x0010000000031888
- (_Bool)_upgradeToVersion:(long long)arg1;	// IMP=0x001000000003151b
- (void)_scheduleClientCacheDropIfNecessary;	// IMP=0x0010000000031443
- (void)_scheduleClientCacheDrop;	// IMP=0x0010000000031303
- (_Bool)_fix22666940;	// IMP=0x0010000000030b25
- (_Bool)_performWithFlags:(unsigned int)arg1 action:(CDUnknownBlockType)arg2;	// IMP=0x00100000000307a4
- (void)_unsetupProfilingHooks;	// IMP=0x0010000000030728
- (void)_setupProfilingHooks;	// IMP=0x0010000000030299
- (id)_transactionStatsDescription;	// IMP=0x001000000003005a
- (_Bool)_initializeDB;	// IMP=0x001000000002f74e
- (void)triggerResetAfterUpgrade:(unsigned long long)arg1 withReason:(id)arg2;	// IMP=0x001000000002f5ab
- (id)initWithAbstractObject:(id)arg1;	// IMP=0x001000000002ee02

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

