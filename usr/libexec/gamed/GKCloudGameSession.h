//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class CKRecord, GKCloudPlayer, MISSING_TYPE, NSArray, NSData, NSDate, NSDictionary, NSMutableDictionary, NSString, NSURL;

@interface GKCloudGameSession : NSObject
{
    CKRecord *_record;	// 8 = 0x8
    NSDictionary *_playersByIdentifier;	// 16 = 0x10
    GKCloudPlayer *_owner;	// 24 = 0x18
    NSURL *_url;	// 32 = 0x20
}

+ (void)badgeCountForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x002000000015016d
+ (void)updateBadgeCountsForContainerName:(id)arg1 useCacheDirectly:(_Bool)arg2;	// IMP=0x001000000014fd5e
+ (void)updateBadgeCountsForContainerName:(id)arg1;	// IMP=0x001000000014fd4a
+ (void)deleteInviteRecordWithRecordID:(id)arg1 fromDatabase:(id)arg2;	// IMP=0x001000000014f9ab
+ (void)searchAndSaveIdentityForRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000014f9a5
+ (void)saveInviteRecord:(id)arg1 database:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000014f01b
+ (void)getAssociatedAccountsWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000014f015
+ (id)msgServiceQueue;	// IMP=0x001000000014efbe
+ (void)generateAndStoreInviteBulletinForRecord:(id)arg1 database:(id)arg2;	// IMP=0x001000000014e28a
+ (id)packFakeTurnBasedBulletinWithZoneData:(id)arg1;	// IMP=0x001000000014dd88
+ (id)packFakeRealTimeBulletinWithZoneData:(id)arg1;	// IMP=0x001000000014d1fb
+ (void)reportPlayerStateChangesToClients:(id)arg1 forUpdatedSession:(id)arg2 oldSession:(id)arg3;	// IMP=0x001000000014bd7f
+ (void)openStoreForBundleID:(id)arg1;	// IMP=0x001000000014a670
+ (void)launchOrOpenAppStoreForBundleID:(id)arg1;	// IMP=0x001000000014a622
+ (void)acceptShareMetadata:(id)arg1 retryCount:(int)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000149c80
+ (void)showAcceptAlertWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000149afb
+ (void)handleLegacyShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x001000000014900b
+ (void)handleSessionShareMetadata:(id)arg1 needsAccept:(_Bool)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000148765
+ (void)handleCloudKitShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000147f71
+ (void)acceptShareURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000147bf7
+ (void)saveInformationForPrimaryUserForSessionWithShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x00100000001472e3
+ (void)fetchShareMetadataForURL:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000146e80
+ (void)fetchShareRecordsWithRecordIDs:(id)arg1 inDatabase:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x0010000000146d57
+ (id)cloudKitOperationConfigurationForSocialGamingSessionsContainer;	// IMP=0x0010000000145bac
+ (id)cloudKitOperationConfigurationForContainer:(id)arg1;	// IMP=0x0010000000145b22
+ (void)subscribeToAllDBwithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000145620
+ (void)getZoneNamesWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000145042
+ (void)createZoneWithName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000144e52
+ (void)bundleIDsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000143c57
+ (void)removeSessionWithIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000143418
+ (void)createSessionWithContainerName:(id)arg1 title:(id)arg2 maxConnectedPlayers:(long long)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x00100000001427cd
+ (_Bool)isCloudDriveEnabledForBundleID:(id)arg1;	// IMP=0x00100000001424a7
+ (id)databaseForZoneID:(id)arg1;	// IMP=0x001000000014245b
+ (id)databaseForSession:(id)arg1;	// IMP=0x001000000014240c
+ (id)sharedDatabase;	// IMP=0x00100000001423ae
+ (id)privateDatabase;	// IMP=0x0010000000142350
+ (_Bool)isOwnZoneID:(id)arg1;	// IMP=0x0010000000142231
+ (_Bool)isOwnRecordID:(id)arg1;	// IMP=0x00100000001421db
+ (id)recordIDForSessionIdentifier:(id)arg1;	// IMP=0x0010000000141f8c
+ (id)sessionIdentifierForRecordID:(id)arg1;	// IMP=0x0010000000141daa
+ (id)allowedCharacterSet;	// IMP=0x0010000000141ce9
+ (void)getFriendPlayersWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000141635
+ (void)updateFriendRecordIfNeeded;	// IMP=0x0010000000140df8
+ (void)updateFriendsWithRecord:(id)arg1;	// IMP=0x0010000000140705
+ (void)updateCacheForFriendZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000014019d
+ (void)updatePlayersForSessions:(id)arg1 sharesByRecordID:(id)arg2 inDatabase:(id)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x001000000013ef14
+ (void)primaryPlayerWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000013ee53
+ (id)playerIdentifierForUserRecordName:(id)arg1;	// IMP=0x001000000013ed86
+ (id)localPlayerAlias;	// IMP=0x001000000013eb1c
+ (void)determinePlayerChangesIn:(id)arg1 newSession:(id)arg2 notifyClients:(id)arg3;	// IMP=0x001000000013e315
+ (void)reportChangesForSessions:(id)arg1 shareChangedSessions:(id)arg2 removedSessions:(id)arg3 zoneID:(id)arg4 handler:(CDUnknownBlockType)arg5;	// IMP=0x001000000013d38d
+ (id)allChangedSessionsFromRecordChangedSessions:(id)arg1 shareChangedSessions:(id)arg2;	// IMP=0x001000000013cee1
+ (void)updateCacheForDatabase:(id)arg1 zoneIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x001000000013b474
+ (void)updateCacheForDatabaseScope:(long long)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000139e3b
+ (void)updateCacheForZoneID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000139a63
+ (void)updateSessionCacheDatabasesWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000013969f
+ (void)updateSessionCacheWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000013922a
+ (void)updateUserWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000001391b8
+ (void)fetchUserRecordIDWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000013913b
+ (id)friendEmailsByID;	// IMP=0x00100000001390eb
+ (void)sessionForShareMetadata:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000013904f
+ (void)sessionsForContainerName:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000138c97
+ (void)sessionForIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000138871
+ (id)cacheQueue;	// IMP=0x001000000013881a
+ (id)sessionCache;	// IMP=0x00100000001387c5
+ (id)AES128Operation:(unsigned int)arg1 key:(id)arg2 data:(id)arg3;	// IMP=0x0010000000138672
+ (id)AES128DecryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x0010000000138658
+ (id)AES128EncryptedVersionOfData:(id)arg1 withKey:(id)arg2;	// IMP=0x0010000000138641
+ (id)playerIdentifierForObfuscatedIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x0010000000138540
+ (id)obfuscatedIdentifierForPlayerIdentifier:(id)arg1 containerName:(id)arg2;	// IMP=0x0010000000138455
+ (id)mutablePlistFromPlayerStatesData:(id)arg1 error:(id *)arg2;	// IMP=0x0010000000137650
+ (_Bool)supportsSecureCoding;	// IMP=0x0010000000136ae7
- (void).cxx_destruct;	// IMP=0x002000000015137c
@property(retain, nonatomic) NSURL *url; // @synthesize url=_url;
@property(retain, nonatomic) GKCloudPlayer *owner; // @synthesize owner=_owner;
@property(retain, nonatomic) NSDictionary *playersByIdentifier; // @synthesize playersByIdentifier=_playersByIdentifier;
@property(retain, nonatomic) CKRecord *record; // @synthesize record=_record;
- (void)setBadged:(_Bool)arg1 forPlayerIDs:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00100000001509a7
- (void)saveConnectionState:(long long)arg1 forPlayerWithID:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x001000000014c905
- (void)tempEmailFixForPlayerID:(id)arg1;	// IMP=0x001000000014c77e
@property(readonly, nonatomic) NSArray *connectedPlayerIDs;
- (MISSING_TYPE *)removePlayers:handler: /* Error: Ran out of types for this method. */;	// IMP=0x001000000014b10e
- (void)deleteShareWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000014ad61
- (void)fetchShareRecordWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000146b68
- (void)saveShare:(id)arg1 isNewShare:(_Bool)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00100000001466d7
- (void)setupShareWithRecordID:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000146470
- (void)getShareURLWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000145c89
- (void)saveWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000144b4e
- (void)saveData:(id)arg1 changeTag:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x00100000001442a3
@property(readonly, nonatomic) NSString *containerName;
- (id)playersForGKGameSession;	// IMP=0x001000000013fe13
- (id)players;	// IMP=0x001000000013fdc3
- (void)setPlayers:(id)arg1;	// IMP=0x001000000013fbba
- (void)updatePlayersWithIdentities:(id)arg1;	// IMP=0x001000000013f8b1
- (id)createGKGameSession;	// IMP=0x0010000000137d76
@property(retain, nonatomic) NSMutableDictionary *nicknamesByIdentifier; // @dynamic nicknamesByIdentifier;
@property(retain, nonatomic) NSMutableDictionary *emailsByCKID;
@property(readonly, nonatomic) NSDictionary *playersByEmail;
- (id)playerStates;	// IMP=0x00100000001376a0
- (void)setPlayerStates:(id)arg1;	// IMP=0x00100000001375d7
@property(readonly, nonatomic) NSString *serverChangeTag;
@property(readonly, nonatomic) GKCloudPlayer *lastModifiedPlayer;
@property(readonly, nonatomic) NSDate *lastModifiedDate;
@property(retain, nonatomic) NSData *data;
@property(nonatomic) long long maxConnectedPlayers;
@property(retain, nonatomic) NSString *title;
@property(readonly, nonatomic) NSString *identifier;
- (_Bool)isOwnedByUser;	// IMP=0x0010000000136fb8
- (id)description;	// IMP=0x0010000000136e88
- (void)encodeWithCoder:(id)arg1;	// IMP=0x0010000000136da5
- (id)initWithCoder:(id)arg1;	// IMP=0x0010000000136aef
- (id)initWithRecord:(id)arg1;	// IMP=0x0010000000136a7f
- (id)initWithContainerName:(id)arg1;	// IMP=0x00100000001369cb

@end

