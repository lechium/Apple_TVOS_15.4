//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class GKDatabaseConnection, GKDiscovery, GKEntitlements, GKEventTuple, GKGameInternal, GKInviteSession, GKMatchResponse, GKResourceManager, GKThreadsafeDictionary, NSDate, NSDictionary, NSLocale, NSMapTable, NSMutableDictionary, NSMutableSet, NSNumber, NSString, NSXPCConnection, _GKStateMachine;
@protocol GKUIViewService, OS_dispatch_queue, OS_dispatch_source;

@interface GKClientProxy : NSObject
{
    _Bool _deniedProductionEnvironment;	// 8 = 0x8
    _Bool _productionSigned;	// 9 = 0x9
    _Bool _installed;	// 10 = 0xa
    _Bool _supportsMultipleActivePlayers;	// 11 = 0xb
    _Bool _isOcelot;	// 12 = 0xc
    unsigned char _achievementsRateLimitedCurrentState;	// 13 = 0xd
    unsigned char _scoresRateLimitedCurrentState;	// 14 = 0xe
    _Bool _initialized;	// 15 = 0xf
    int _pid;	// 16 = 0x10
    unsigned int _applicationState;	// 20 = 0x14
    unsigned int _previousApplicationState;	// 24 = 0x18
    NSObject<OS_dispatch_queue> *_replyQueue;	// 32 = 0x20
    NSObject<OS_dispatch_queue> *_authQueue;	// 40 = 0x28
    NSXPCConnection *_connection;	// 48 = 0x30
    GKEntitlements *_entitlements;	// 56 = 0x38
    NSNumber *_adamID;	// 64 = 0x40
    NSNumber *_sandboxExtensionToken;	// 72 = 0x48
    NSNumber *_externalVersion;	// 80 = 0x50
    NSString *_bundleIdentifier;	// 88 = 0x58
    NSString *_originalBundleIdentifier;	// 96 = 0x60
    NSString *_bundleVersion;	// 104 = 0x68
    NSString *_bundleShortVersion;	// 112 = 0x70
    long long _environment;	// 120 = 0x78
    NSDate *_achievementsRateLimitingStartDate;	// 128 = 0x80
    long long _achievementsRateLimitingCurrentNumberOfRequests;	// 136 = 0x88
    NSDate *_scoresRateLimitingStartDate;	// 144 = 0x90
    long long _scoresRateLimitingCurrentNumberOfRequests;	// 152 = 0x98
    NSMutableDictionary *_alreadyCoalescingNetworkRequests;	// 160 = 0xa0
    NSString *_language;	// 168 = 0xa8
    GKClientProxy<GKUIViewService> *_viewService;	// 176 = 0xb0
    GKGameInternal *_currentGame;	// 184 = 0xb8
    GKDiscovery *_nearbyDiscovery;	// 192 = 0xc0
    GKEventTuple *_launchEvent;	// 200 = 0xc8
    GKInviteSession *_inviteSession;	// 208 = 0xd0
    GKMatchResponse *_currentMatchResponse;	// 216 = 0xd8
    NSMapTable *_extensionProxies;	// 224 = 0xe0
    _GKStateMachine *_appInitStateMachine;	// 232 = 0xe8
    GKThreadsafeDictionary *_appSessions;	// 240 = 0xf0
    NSObject<OS_dispatch_queue> *_delayedRequestsQueue;	// 248 = 0xf8
    GKDatabaseConnection *_delayedRequestsDBConnection;	// 256 = 0x100
    NSObject<OS_dispatch_queue> *_cacheQueue;	// 264 = 0x108
    GKResourceManager *_resourceManager;	// 272 = 0x110
    NSMutableSet *_pendingDataTypesForRefresh;	// 280 = 0x118
    NSDictionary *_preferencesFromBag;	// 288 = 0x120
    NSObject<OS_dispatch_source> *_checkMatchStatusTimer;	// 296 = 0x128
    NSObject<OS_dispatch_queue> *_checkMatchStatusQueue;	// 304 = 0x130
}

+ (id)syncQueue;	// IMP=0x0020000000177bdf
+ (void)closeDatabaseFromManagedObjectContextForMOC:(id)arg1;	// IMP=0x001000000008fa57
+ (void)closeDatabaseFromManagedObjectContextForPlayer:(id)arg1;	// IMP=0x001000000008fa0b
+ (id)newManagedObjectContextForClient:(id)arg1 player:(id)arg2;	// IMP=0x001000000008f80e
+ (id)_newManagedObjectContextForPlayer:(id)arg1;	// IMP=0x001000000008e909
+ (id)cacheFileQueue;	// IMP=0x001000000008e8b2
+ (id)managedObjectModel;	// IMP=0x001000000008e568
+ (void)removeAllCaches;	// IMP=0x001000000008df1f
+ (void)removeCacheForPlayer:(id)arg1;	// IMP=0x001000000008d75e
+ (id)cacheFileURLForClient:(id)arg1 player:(id)arg2;	// IMP=0x001000000008d705
+ (id)cacheDirectoryURLForClient:(id)arg1 player:(id)arg2;	// IMP=0x001000000008d0e6
+ (id)cacheDirectoryForBundleID:(id)arg1 environment:(long long)arg2;	// IMP=0x001000000008d03b
+ (id)_existingManagedObjectContextForPlayer:(id)arg1;	// IMP=0x001000000008ccdb
+ (id)contextKeyForPlayer:(id)arg1;	// IMP=0x001000000008ccab
+ (void)removeClient:(id)arg1;	// IMP=0x001000000017be93
+ (void)enumerateClientsUsingBlock:(CDUnknownBlockType)arg1;	// IMP=0x001000000017bdc7
+ (id)clientsToBeEnumerated;	// IMP=0x001000000017bb9c
+ (id)clientForMatchmakingRID:(id)arg1;	// IMP=0x001000000017b9c5
+ (id)clientForInviteSessionToken:(id)arg1;	// IMP=0x001000000017b47b
+ (id)foregroundClient;	// IMP=0x001000000017b325
+ (id)clientForBundleID:(id)arg1 pid:(int)arg2 createIfNecessary:(_Bool)arg3;	// IMP=0x001000000017b30b
+ (id)clientForBundleID:(id)arg1 bundle:(id)arg2 pid:(int)arg3 createIfNecessary:(_Bool)arg4;	// IMP=0x001000000017a59d
+ (_Bool)isExtensionBundleID:(id)arg1;	// IMP=0x001000000017a43a
+ (id)clientForProcessIdentifier:(int)arg1;	// IMP=0x001000000017a39b
+ (id)clientForBundleID:(id)arg1;	// IMP=0x001000000017a37e
+ (id)gameCenterClient;	// IMP=0x001000000017a357
+ (id)_clientLookup;	// IMP=0x001000000017a2f0
+ (id)factoryQueue;	// IMP=0x001000000017a299
+ (void)saveAppInitState:(id)arg1 forBundleID:(id)arg2 pid:(int)arg3;	// IMP=0x00100000001814c9
+ (id)lastKnownAppInitStateForClientWithBundleID:(id)arg1 pid:(int)arg2;	// IMP=0x0010000000180f7e
+ (void)authenticationDidChange;	// IMP=0x00100000001809c3
+ (void)performDelayedRequestsForEnvironment:(long long)arg1;	// IMP=0x001000000018aaa1
+ (id)storeAndForwardDirectoryPathForEnvironment:(long long)arg1;	// IMP=0x00100000001897da
- (void).cxx_destruct;	// IMP=0x001000000017a0f5
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *checkMatchStatusQueue; // @synthesize checkMatchStatusQueue=_checkMatchStatusQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_source> *checkMatchStatusTimer; // @synthesize checkMatchStatusTimer=_checkMatchStatusTimer;
@property(copy, nonatomic) NSDictionary *preferencesFromBag; // @synthesize preferencesFromBag=_preferencesFromBag;
@property(retain, nonatomic) NSMutableSet *pendingDataTypesForRefresh; // @synthesize pendingDataTypesForRefresh=_pendingDataTypesForRefresh;
@property(retain, nonatomic) GKResourceManager *resourceManager; // @synthesize resourceManager=_resourceManager;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *cacheQueue; // @synthesize cacheQueue=_cacheQueue;
@property(retain, nonatomic) GKDatabaseConnection *delayedRequestsDBConnection; // @synthesize delayedRequestsDBConnection=_delayedRequestsDBConnection;
- (void)setDelayedRequestsQueue:(id)arg1;	// IMP=0x001000000017a013
- (id)delayedRequestsQueue;	// IMP=0x001000000017a006
@property(retain, nonatomic) GKThreadsafeDictionary *appSessions; // @synthesize appSessions=_appSessions;
@property(retain) _GKStateMachine *appInitStateMachine; // @synthesize appInitStateMachine=_appInitStateMachine;
@property _Bool initialized; // @synthesize initialized=_initialized;
@property(retain, nonatomic) NSMapTable *extensionProxies; // @synthesize extensionProxies=_extensionProxies;
@property(retain) GKMatchResponse *currentMatchResponse; // @synthesize currentMatchResponse=_currentMatchResponse;
@property(retain) GKInviteSession *inviteSession; // @synthesize inviteSession=_inviteSession;
@property(retain, nonatomic) GKEventTuple *launchEvent; // @synthesize launchEvent=_launchEvent;
@property unsigned int previousApplicationState; // @synthesize previousApplicationState=_previousApplicationState;
@property unsigned int applicationState; // @synthesize applicationState=_applicationState;
@property(retain, nonatomic) GKDiscovery *nearbyDiscovery; // @synthesize nearbyDiscovery=_nearbyDiscovery;
@property(retain, nonatomic) GKGameInternal *currentGame; // @synthesize currentGame=_currentGame;
@property(nonatomic) __weak GKClientProxy<GKUIViewService> *viewService; // @synthesize viewService=_viewService;
@property(retain, nonatomic) NSString *language; // @synthesize language=_language;
@property(retain, nonatomic) NSMutableDictionary *alreadyCoalescingNetworkRequests; // @synthesize alreadyCoalescingNetworkRequests=_alreadyCoalescingNetworkRequests;
@property(nonatomic) unsigned char scoresRateLimitedCurrentState; // @synthesize scoresRateLimitedCurrentState=_scoresRateLimitedCurrentState;
@property(nonatomic) long long scoresRateLimitingCurrentNumberOfRequests; // @synthesize scoresRateLimitingCurrentNumberOfRequests=_scoresRateLimitingCurrentNumberOfRequests;
@property(retain, nonatomic) NSDate *scoresRateLimitingStartDate; // @synthesize scoresRateLimitingStartDate=_scoresRateLimitingStartDate;
@property(nonatomic) unsigned char achievementsRateLimitedCurrentState; // @synthesize achievementsRateLimitedCurrentState=_achievementsRateLimitedCurrentState;
@property(nonatomic) long long achievementsRateLimitingCurrentNumberOfRequests; // @synthesize achievementsRateLimitingCurrentNumberOfRequests=_achievementsRateLimitingCurrentNumberOfRequests;
@property(retain, nonatomic) NSDate *achievementsRateLimitingStartDate; // @synthesize achievementsRateLimitingStartDate=_achievementsRateLimitingStartDate;
@property _Bool isOcelot; // @synthesize isOcelot=_isOcelot;
@property(nonatomic) _Bool supportsMultipleActivePlayers; // @synthesize supportsMultipleActivePlayers=_supportsMultipleActivePlayers;
@property(nonatomic) _Bool installed; // @synthesize installed=_installed;
@property(nonatomic) _Bool productionSigned; // @synthesize productionSigned=_productionSigned;
@property(nonatomic) _Bool deniedProductionEnvironment; // @synthesize deniedProductionEnvironment=_deniedProductionEnvironment;
@property(nonatomic) long long environment; // @synthesize environment=_environment;
@property(retain, nonatomic) NSString *bundleShortVersion; // @synthesize bundleShortVersion=_bundleShortVersion;
@property(retain, nonatomic) NSString *bundleVersion; // @synthesize bundleVersion=_bundleVersion;
@property(retain, nonatomic) NSString *originalBundleIdentifier; // @synthesize originalBundleIdentifier=_originalBundleIdentifier;
@property(retain, nonatomic) NSString *bundleIdentifier; // @synthesize bundleIdentifier=_bundleIdentifier;
@property(retain, nonatomic) NSNumber *externalVersion; // @synthesize externalVersion=_externalVersion;
@property(retain, nonatomic) NSNumber *sandboxExtensionToken; // @synthesize sandboxExtensionToken=_sandboxExtensionToken;
@property(retain, nonatomic) NSNumber *adamID; // @synthesize adamID=_adamID;
@property(retain) GKEntitlements *entitlements; // @synthesize entitlements=_entitlements;
@property(nonatomic) NSXPCConnection *connection; // @synthesize connection=_connection;
@property(nonatomic) int pid; // @synthesize pid=_pid;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *authQueue; // @synthesize authQueue=_authQueue;
@property(readonly, nonatomic) NSObject<OS_dispatch_queue> *replyQueue; // @synthesize replyQueue=_replyQueue;
- (void)deleteInviteSession;	// IMP=0x00100000001799d1
- (void)cancelInvitationForSession:(id)arg1 playerID:(id)arg2 pushTokens:(id)arg3 handler:(CDUnknownBlockType)arg4;	// IMP=0x0010000000179345
- (void)cancelOutstandingCheckMatchStatus;	// IMP=0x00100000001792bc
- (_Bool)processMatchResponse:(id)arg1;	// IMP=0x001000000017837a
- (void)checkMatchStatus;	// IMP=0x0010000000177e79
- (void)performAsync:(CDUnknownBlockType)arg1;	// IMP=0x0010000000177e13
- (void)performSync:(CDUnknownBlockType)arg1;	// IMP=0x0010000000177c36
- (void)setLaunchEvent:(unsigned long long)arg1 withContext:(id)arg2;	// IMP=0x0010000000177970
- (void)updatePreferencesFromBag:(id)arg1;	// IMP=0x001000000017791b
- (void)setExtensionProxy:(id)arg1 forBundleID:(id)arg2;	// IMP=0x00100000001777ed
- (_Bool)isExtension;	// IMP=0x00100000001777e5
- (_Bool)isUIService;	// IMP=0x00100000001777dd
- (_Bool)isGameCenter;	// IMP=0x001000000017778f
@property(readonly, nonatomic) NSLocale *locale; // @dynamic locale;
@property(readonly, nonatomic) NSDictionary *gameDescriptor;
- (_Bool)isEqual:(id)arg1;	// IMP=0x0010000000177300
@property(readonly) unsigned long long hash;
@property(readonly, copy) NSString *description;
- (void)resetCache:(id)arg1;	// IMP=0x0010000000177182
- (void)_setupCache;	// IMP=0x001000000017717c
- (id)credentialForPlayer:(id)arg1;	// IMP=0x0010000000177005
- (id)transportWithCredential:(id)arg1;	// IMP=0x0010000000176f4e
- (void)dealloc;	// IMP=0x0010000000176e5a
- (void)updateIfRecentlyInstalled;	// IMP=0x0010000000176a55
- (id)initWithBundleIdentifier:(id)arg1 bundleOrNil:(id)arg2 pid:(int)arg3;	// IMP=0x00100000001763e8
- (void)initializeInitializationStateMachine;	// IMP=0x0010000000176282
- (void)invalidateStoreFrontDependentObjects;	// IMP=0x001000000008e62a
- (id)transactionGroupIfCacheExistsForPlayer:(id)arg1;	// IMP=0x001000000008cf76
- (id)transactionGroupForPlayer:(id)arg1;	// IMP=0x001000000008cee0
- (id)_managedObjectContextForPlayer:(id)arg1;	// IMP=0x001000000008cd61
- (void)handleCloudKitShareMetadata:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x00100000001806a0
- (oneway void)resetLoginCancelCount;	// IMP=0x00100000001803e5
- (oneway void)loadRemoteImageDataForURL:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x0010000000180353
- (oneway void)localizedMessageFromDictionary:(id)arg1 forBundleID:(id)arg2 handler:(CDUnknownBlockType)arg3;	// IMP=0x001000000018023e
- (oneway void)getAuthenticatedPlayerIDWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000180172
- (oneway void)getAccountNameWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000017fef1
- (oneway void)getAuthenticatedLocalPlayersWithStatus:(unsigned long long)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x001000000017f018
- (oneway void)getGamedFiredUpWithHandler:(CDUnknownBlockType)arg1;	// IMP=0x001000000017ed94
- (oneway void)getAuthenticatedPlayerCredential:(CDUnknownBlockType)arg1;	// IMP=0x001000000017e972
- (oneway void)getAuthenticatedPlayerInfo:(CDUnknownBlockType)arg1;	// IMP=0x001000000017e5c7
- (oneway void)getPrivateServicesForPID:(int)arg1 localPlayer:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000017e0f6
- (oneway void)getServicesForPID:(int)arg1 localPlayer:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000017da8e
- (oneway void)getPrivateServicesWithTransport:(id)arg1 forClient:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000017d4d4
- (oneway void)getServicesWithTransport:(id)arg1 forClient:(id)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x001000000017ce11
- (oneway void)setTestGame:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000017cdfa
- (oneway void)messagesDidReceiveGameCenterURL:(id)arg1 senderHandle:(id)arg2 contactID:(id)arg3;	// IMP=0x001000000017c2ee
- (oneway void)setHostPID:(int)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x001000000017c2d7
- (id)serviceForClass:(Class)arg1 transport:(id)arg2 client:(id)arg3 credential:(id)arg4;	// IMP=0x001000000017c04a
- (void)didEnterForeground;	// IMP=0x0010000000181c1f
- (void)updateAppInitState;	// IMP=0x0010000000181b32
- (id)verifyAuthorized;	// IMP=0x0010000000180e6b
- (id)appInitState;	// IMP=0x0010000000180e52
- (_Bool)setAppInitState:(id)arg1;	// IMP=0x0010000000180e39
- (void)stateDidChange;	// IMP=0x0010000000180dbe
- (id)missingTransitionFromState:(id)arg1 toState:(id)arg2;	// IMP=0x0010000000180c81
- (void)sendAuthenticationDidChangeNotificationWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x00100000001809fe
- (void)bgInitializeWithCredential:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000189348
- (void)initializeWithCredential:(id)arg1 completionHandler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000188db9
- (void)removeAppSessionForPlayer:(id)arg1;	// IMP=0x0010000000188da0
- (id)appSessionForPlayer:(id)arg1;	// IMP=0x0010000000188d19
- (void)addAppSession:(id)arg1 forCredential:(id)arg2;	// IMP=0x0010000000188c02
- (void)backgroundWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000188456
- (void)terminateWithCompletionHandler:(CDUnknownBlockType)arg1;	// IMP=0x0010000000187cb0
- (oneway void)setLogBits:(int)arg1;	// IMP=0x0010000000187a51
- (oneway void)authenticatedPlayersDidChange:(id)arg1 reply:(CDUnknownBlockType)arg2;	// IMP=0x00100000001872d3
- (oneway void)completedOptimisticAuthenticationWithResponse:(id)arg1 error:(id)arg2;	// IMP=0x001000000018722a
- (oneway void)setCurrentGame:(id)arg1 serverEnvironment:(long long)arg2 reply:(CDUnknownBlockType)arg3;	// IMP=0x0010000000186d58
- (oneway void)getPreferenceForKey:(id)arg1 handler:(CDUnknownBlockType)arg2;	// IMP=0x0010000000186ce8
- (oneway void)setPreferencesValues:(id)arg1;	// IMP=0x0010000000186b8d
- (oneway void)refreshPendingDataTypes;	// IMP=0x0010000000186a6a
- (oneway void)refreshContentsForDataType:(unsigned int)arg1 userInfo:(id)arg2;	// IMP=0x001000000018644a
- (oneway void)setBadgeCount:(unsigned long long)arg1 forType:(unsigned long long)arg2;	// IMP=0x0010000000186294
- (oneway void)session:(id)arg1 didReceiveMessage:(id)arg2 withData:(id)arg3 fromPlayer:(id)arg4;	// IMP=0x001000000018607a
- (oneway void)session:(id)arg1 didReceiveData:(id)arg2 fromPlayer:(id)arg3;	// IMP=0x0010000000185e81
- (oneway void)session:(id)arg1 player:(id)arg2 didSaveData:(id)arg3;	// IMP=0x0010000000185c88
- (oneway void)session:(id)arg1 player:(id)arg2 didChangeConnectionState:(long long)arg3;	// IMP=0x0010000000185aa1
- (oneway void)session:(id)arg1 removedPlayer:(id)arg2;	// IMP=0x00100000001858c2
- (oneway void)session:(id)arg1 addedPlayer:(id)arg2;	// IMP=0x00100000001856e3
- (oneway void)localPlayerAcceptedCustomTournamentInvite;	// IMP=0x00100000001854c6
- (oneway void)didReceiveData:(id)arg1 reliably:(_Bool)arg2 forRecipients:(id)arg3 fromSender:(id)arg4;	// IMP=0x00100000001852c4
- (oneway void)didDisconnectFromParticipantWithID:(id)arg1;	// IMP=0x00100000001850fe
- (oneway void)didConnectToParticipantWithID:(id)arg1;	// IMP=0x0010000000184f38
- (oneway void)relayPushNotification:(id)arg1;	// IMP=0x0010000000184ca7
- (oneway void)nearbyDataReceivedForPlayerID:(id)arg1 deviceID:(id)arg2 data:(id)arg3;	// IMP=0x0010000000184aae
- (oneway void)nearbyPlayerLostForPlayerID:(id)arg1 deviceID:(id)arg2;	// IMP=0x00100000001848cf
- (oneway void)nearbyPlayerFoundForPlayerID:(id)arg1 deviceID:(id)arg2 discoveryInfo:(id)arg3;	// IMP=0x00100000001846d6
- (oneway void)cancelGameInvite:(id)arg1;	// IMP=0x0010000000184445
- (oneway void)cancelInviteWithNotification:(id)arg1;	// IMP=0x00100000001841b4
- (oneway void)declineInviteWithNotification:(id)arg1;	// IMP=0x0010000000183f23
- (oneway void)acceptInviteWithNotification:(id)arg1;	// IMP=0x0010000000183c92
- (oneway void)acceptMultiplayerGameInvite;	// IMP=0x0010000000183a70
- (oneway void)fetchTurnBasedData;	// IMP=0x00100000001838b1
- (oneway void)achievementSelected:(id)arg1;	// IMP=0x00100000001836eb
- (oneway void)scoreSelected:(id)arg1;	// IMP=0x0010000000183525
- (oneway void)challengeCompleted:(id)arg1;	// IMP=0x00100000001832f6
- (oneway void)challengeReceived:(id)arg1;	// IMP=0x0010000000183130
- (oneway void)completedChallengeSelected:(id)arg1;	// IMP=0x0010000000182f6a
- (oneway void)receivedChallengeSelected:(id)arg1;	// IMP=0x0010000000182da4
- (oneway void)friendRequestSelected:(id)arg1;	// IMP=0x0010000000182b99
- (oneway void)respondedToNearbyInvite:(id)arg1;	// IMP=0x00100000001829d3
- (oneway void)resetNetworkActivity;	// IMP=0x0010000000182834
- (oneway void)endNetworkActivity;	// IMP=0x0010000000182695
- (oneway void)beginNetworkActivity;	// IMP=0x00100000001824f6
- (oneway void)requestSandboxExtension:(CDUnknownBlockType)arg1;	// IMP=0x00100000001822de
- (void)performDelayedRequestsForCredential:(id)arg1;	// IMP=0x001000000018b10b
- (void)performDelayedRequestsForEnvironment:(long long)arg1;	// IMP=0x001000000018b03c
- (id)removeGameWriterWithCredential:(id)arg1;	// IMP=0x001000000018aa0e
- (id)deletePlayerPhotoWriterWithCredential:(id)arg1;	// IMP=0x001000000018a97b
- (id)setPlayerPhotoWriterWithCredential:(id)arg1;	// IMP=0x001000000018a8e8
- (id)setPlayerStatusWriterWithCredential:(id)arg1;	// IMP=0x001000000018a855
- (id)_delayedRequestWriterWithCacheWriterClass:(Class)arg1 cacheReaderClass:(Class)arg2 networkWriterClass:(Class)arg3 bagKey:(id)arg4 batchSubmissionInterval:(long long)arg5 credential:(id)arg6;	// IMP=0x001000000018a534
- (void)_removeDelayedRequestStore;	// IMP=0x0010000000189d9b
- (void)_setupDelayedRequestsWriters;	// IMP=0x0010000000189b6e
- (id)requestsCacheForEnvironment:(long long)arg1;	// IMP=0x001000000018994c
- (id)storeAndForwardDirectoryPathForEnvironment:(long long)arg1;	// IMP=0x00100000001898df

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) Class superclass;

@end

