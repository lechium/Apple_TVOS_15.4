//
//     Generated by classdump-c 4.2.0 (64 bit).
//
//  Copyright (C) 1997-2019 Steve Nygard. Updated in 2022 by Kevin Bradley.
//

#import <objc/NSObject.h>

@class IDSRealTimeEncryptionIdentity, MISSING_TYPE, NSMutableDictionary, NSString, NSTimer;
@protocol OS_dispatch_queue;

@interface IDSGroupEncryptionController : NSObject
{
    id _sessionController;	// 8 = 0x8
    NSObject<OS_dispatch_queue> *_realtimeEncryptionQueue;	// 16 = 0x10
    _Bool _isInternal;	// 24 = 0x18
    struct os_unfair_lock_s _lock;	// 28 = 0x1c
    _Bool _shouldBroadcastAllValidMkMs;	// 32 = 0x20
    _Bool _shouldSendMKMOverQR;	// 33 = 0x21
    double _mkmAcknowledgementTimeout;	// 40 = 0x28
    double _preKeyRequestDelayDuration;	// 48 = 0x30
    unsigned int _prekeyExpireDuration;	// 56 = 0x38
    unsigned int _previousPrekeyExpireDuration;	// 60 = 0x3c
    unsigned int _mkmExpireDuration;	// 64 = 0x40
    unsigned int _mkmRollDuration;	// 68 = 0x44
    NSMutableDictionary *_accountIDs;	// 72 = 0x48
    NSMutableDictionary *_fromIDs;	// 80 = 0x50
    IDSRealTimeEncryptionIdentity *_identityForDevice;	// 88 = 0x58
    IDSRealTimeEncryptionIdentity *_previousIdentityForDevice;	// 96 = 0x60
    NSMutableDictionary *_prekeyAckCountForGroup;	// 104 = 0x68
    NSMutableDictionary *_publicKeyForDevice;	// 112 = 0x70
    NSMutableDictionary *_groupIDToKeyMaterialCache;	// 120 = 0x78
    NSMutableDictionary *_groupIDToStableKeyMaterialCache;	// 128 = 0x80
    NSMutableDictionary *_membersForGroup;	// 136 = 0x88
    NSMutableDictionary *_membersLightweightStatusDict;	// 144 = 0x90
    NSMutableDictionary *_participantsForGroup;	// 152 = 0x98
    NSMutableDictionary *_participantsForGroupByType;	// 160 = 0xa0
    NSMutableDictionary *_participantsInfoForGroup;	// 168 = 0xa8
    NSMutableDictionary *_participantsWaitingForKeyMaterials;	// 176 = 0xb0
    NSMutableDictionary *_participantsWaitingForInitialKeyMaterials;	// 184 = 0xb8
    NSMutableDictionary *_endpointSubscriptionForGroup;	// 192 = 0xc0
    NSMutableDictionary *_lastKnownGroupIDToPushTokens;	// 200 = 0xc8
    NSMutableDictionary *_lastKnownAccountIDToPushTokens;	// 208 = 0xd0
    NSMutableDictionary *_pendingMasterKeyMaterials;	// 216 = 0xd8
    NSMutableDictionary *_pendingStableKeyMaterials;	// 224 = 0xe0
    NSMutableDictionary *_groupIDToResetKeyMaterialCacheTimer;	// 232 = 0xe8
    NSMutableDictionary *_encryptionSequenceNumbers;	// 240 = 0xf0
    NSMutableDictionary *_groupIDToMKMExpirationTimer;	// 248 = 0xf8
    NSMutableDictionary *_groupIDToMKMExpirationTimerBlock;	// 256 = 0x100
    NSMutableDictionary *_groupIDToMKMRollTimer;	// 264 = 0x108
    NSMutableDictionary *_groupIDToMKMRollTimerBlock;	// 272 = 0x110
    NSMutableDictionary *_groupIDToMKMRecoveryRetryCount;	// 280 = 0x118
    NSMutableDictionary *_groupIDToSKMRecoveryRetryCount;	// 288 = 0x120
    NSMutableDictionary *_groupIDToIsKeyMaterialRecoveryRunning;	// 296 = 0x128
    NSMutableDictionary *_groupIDToIsDeferredPreKeyRequestPending;	// 304 = 0x130
    NSMutableDictionary *_groupIDToInitialKeyMaterialDistributionTimeoutBlock;	// 312 = 0x138
    NSTimer *_endpointUpdateTimer;	// 320 = 0x140
    _Bool _isTestRunning;	// 328 = 0x148
    _Bool _fakeMKMWrapping;	// 329 = 0x149
}

+ (id)sharedInstance;	// IMP=0x00200000004d3ae0
- (void).cxx_destruct;	// IMP=0x00200000004fede0
@property(nonatomic) _Bool fakeMKMWrapping; // @synthesize fakeMKMWrapping=_fakeMKMWrapping;
@property(nonatomic) _Bool isTestRunning; // @synthesize isTestRunning=_isTestRunning;
@property(retain, nonatomic) id sessionController; // @synthesize sessionController=_sessionController;
- (void)_sendingKeysToMembers:(id)arg1;	// IMP=0x00100000004fecd0
- (id)getLightweightStatusDictForGroup:(id)arg1;	// IMP=0x00100000004fec50
- (id)getMembersForGroup:(id)arg1;	// IMP=0x00100000004febd0
- (id)getparticipantsInfoForGroup:(id)arg1;	// IMP=0x00100000004feb50
- (id)getparticipantsForGroup:(id)arg1 ofType:(long long)arg2;	// IMP=0x00100000004fea60
- (id)getparticipantsForGroup:(id)arg1;	// IMP=0x00100000004fe9e0
- (id)getParticipantsWaitingForInitialKeyMaterials:(id)arg1;	// IMP=0x00100000004fe960
- (id)getParticipantsWaitingForKeyMaterials:(id)arg1;	// IMP=0x00100000004fe8e0
- (id)stablekeyMaterialCacheToGroup:(id)arg1;	// IMP=0x00100000004fe860
- (id)keyMaterialCacheToGroup:(id)arg1;	// IMP=0x00100000004fe7e0
- (void)account:(id)arg1 didUpdateRegisteredDevices:(id)arg2;	// IMP=0x00100000004fde20
- (void)didUpdateParticipants:(id)arg1 ofType:(long long)arg2 forGroup:(id)arg3 sessionID:(id)arg4;	// IMP=0x00100000004fb2f0
- (_Bool)_isValidPushToken:(id)arg1;	// IMP=0x00100000004fb270
- (void)didUpdateMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3 lightweightStatusDict:(id)arg4;	// IMP=0x00100000004fabf0
- (void)setMembers:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3 lightweightStatusDict:(id)arg4;	// IMP=0x00100000004f9ae0
- (void)didReceiveEndpointsUpdate:(id)arg1 forGroup:(id)arg2 sessionID:(id)arg3;	// IMP=0x00100000004f9210
- (void)rollNewKeysAfterResettingPrekeysForGroups:(id)arg1 withReason:(long long)arg2;	// IMP=0x00100000004f8aa0
- (id)_compactKeyMaterialMessage:(id)arg1 isOutgoing:(_Bool)arg2 groupID:(id)arg3;	// IMP=0x00100000004f8010
- (id)_generateMKMBlobForQRFromMessage:(id)arg1 account:(id)arg2 destination:(id)arg3 fromID:(id)arg4;	// IMP=0x00100000004f7500
- (void)processedQRMKMPayloadFromData:(id)arg1 forGroupID:(id)arg2 account:(id)arg3 remoteURI:(id)arg4 localURI:(id)arg5 tokens:(id)arg6 completionHandler:(CDUnknownBlockType)arg7;	// IMP=0x00100000004f6580
- (void)sendKeyMaterialsToWaitingParticipantsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004f5e60
- (void)removeExpiredPrekeys;	// IMP=0x00100000004f5ca0
- (void)sendPublicKeyToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3;	// IMP=0x00100000004f5370
- (void)sendPublicKeyToGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004f5230
- (void)_sendMessage:(id)arg1 toDestination:(id)arg2 forGroup:(id)arg3 sessionID:(id)arg4 command:(long long)arg5 timeout:(double)arg6 shouldExpire:(_Bool)arg7 useQR:(_Bool)arg8 completion:(CDUnknownBlockType)arg9 completionBlock:(CDUnknownBlockType)arg10;	// IMP=0x00100000004f33f0
- (void)reportTimeDifferenceBetweenFirstPacketAndMKI:(long long)arg1 forMKI:(id)arg2 service:(id)arg3 activeParticipants:(long long)arg4;	// IMP=0x00100000004f31f0
- (void)unsubscribeEndpointsForGroup:(id)arg1;	// IMP=0x00100000004f2fc0
- (void)resetKeysForGroup:(id)arg1 shouldRemoveCurrentParticipants:(_Bool)arg2;	// IMP=0x00100000004f2aa0
- (void)removeActiveParticipant:(id)arg1 forGroup:(id)arg2;	// IMP=0x00100000004f2020
- (void)removeLocalActiveParticipantForGroup:(id)arg1;	// IMP=0x00100000004f1f90
- (id)activeParticipantsForGroup:(id)arg1;	// IMP=0x00100000004f1e90
- (void)resetDevicePrekey;	// IMP=0x00100000004f1db0
- (_Bool)_shouldEnforceRemoteTimeout;	// IMP=0x00100000004f1bf0
- (double)_multiwayFTMessageSendTimeout;	// IMP=0x00100000004f19f0
- (void)sendKeyMaterialsToLocal:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004f15d0
- (void)_sendKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg4 requireMKM:(_Bool)arg5 requireSKM:(_Bool)arg6;	// IMP=0x00100000004ee600
- (void)resetKeyMaterialLocalSentStatus:(id)arg1;	// IMP=0x00100000004ede60
- (id)_protectedCachedKeyMaterialsForDestination:(id)arg1 pushToken:(id)arg2 forGroup:(id)arg3 outURIs:(id *)arg4 includePeers:(_Bool)arg5;	// IMP=0x00100000004eda00
- (void)sendPendingKeyMaterialsToGroup:(id)arg1 sessionID:(id)arg2 forDevice:(id)arg3 fromID:(id)arg4;	// IMP=0x00100000004ed580
- (id)stableKeyMaterialForGroup:(id)arg1;	// IMP=0x00100000004ed2e0
- (id)masterKeyMaterialForGroup:(id)arg1;	// IMP=0x00100000004ed040
- (void)notifyStableKeyMaterialsReceivedForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004ec930
- (void)receivedGroupStableKeyMaterial:(id)arg1 fromPushToken:(id)arg2 sessionID:(id)arg3;	// IMP=0x00100000004ec430
- (void)noteReceivedGroupMasterKeyMaterials:(id)arg1 URIs:(id)arg2 sessionID:(id)arg3;	// IMP=0x00100000004ebfb0
- (void)requestPendingKeyMaterialsForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004ebb10
- (id)receivedAndSetKeyMaterial:(id)arg1 stableKeyMaterial:(id)arg2 forDevice:(id)arg3 fromID:(id)arg4 groupID:(id)arg5 sessionID:(id)arg6 fromSender:(_Bool)arg7 error:(id *)arg8 forMKM:(_Bool)arg9 forSKM:(_Bool)arg10;	// IMP=0x00100000004e95c0
- (_Bool)_storePendingKeyMaterial:(id)arg1 stableKeyMaterial:(id)arg2 hasValidMKM:(_Bool)arg3 hasValidSKM:(_Bool)arg4 forDevice:(id)arg5;	// IMP=0x00100000004e8e80
- (void)processIncomingKeyMaterialsRecoveryRequest:(id)arg1 fromDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6 requireMKM:(_Bool)arg7 requireSKM:(_Bool)arg8;	// IMP=0x00100000004e8220
- (void)sendKeyMaterialsRecoveryRequestToParticipants:(id)arg1 senderID:(id)arg2 groupID:(id)arg3 sessionID:(id)arg4 requireMKM:(_Bool)arg5 requireSKM:(_Bool)arg6;	// IMP=0x00100000004e76a0
- (void)sendKeyMaterialsRecoveryRequestToGroup:(id)arg1 requireMKM:(_Bool)arg2 requireSKM:(_Bool)arg3;	// IMP=0x00100000004e6e40
- (void)sendKeyMaterialsRecoveryRequestToDevice:(id)arg1 fromID:(id)arg2 groupID:(id)arg3 sessionID:(id)arg4 requireMKM:(_Bool)arg5 requireSKM:(_Bool)arg6;	// IMP=0x00100000004e62b0
- (void)createStableKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004e5aa0
- (void)createKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004e47c0
- (void)_mkmRollTimerFiredForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004e4210
- (void)_stopMkmExpirationTimerForGroup:(id)arg1;	// IMP=0x00100000004e3f80
- (void)_startMkmExpirationTimer:(int)arg1 forGroupID:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x00100000004e3990
- (void)_handleMkmExpirationTimerForGroup:(id)arg1;	// IMP=0x00100000004e37c0
- (void)_stopMkmRollTimerForGroup:(id)arg1;	// IMP=0x00100000004e35b0
- (void)_startMkmRollTimer:(int)arg1 forGroupID:(id)arg2 block:(CDUnknownBlockType)arg3;	// IMP=0x00100000004e3060
- (void)_handleMkmRollTimerForGroup:(id)arg1;	// IMP=0x00100000004e2e70
- (void)cleanUpExpiredMasterKeyMaterial;	// IMP=0x00100000004e1940
- (void)sendPrekeyRequestToDestination:(id)arg1 group:(id)arg2 sessionID:(id)arg3;	// IMP=0x00100000004e14f0
- (void)sendPrekeyRequestToGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004e13b0
- (id)publicKeys;	// IMP=0x00100000004e0f80
- (long long)realTimeEncryptionPublicWrapModeForDevice:(id)arg1;	// IMP=0x00100000004e0d00
- (id)realTimeEncryptionPublicKeyDataForDevice:(id)arg1;	// IMP=0x00100000004e0a80
- (void)_locked_updateParticipantsWaitingForKeyMaterialsIfNeededForGroupID:(id)arg1 remoteToken:(id)arg2 previousRemotePublicKey:(id)arg3 newRemotePublicKey:(id)arg4;	// IMP=0x00100000004e0610
- (_Bool)setRealTimeEncryptionPublicKey:(id)arg1 forDevice:(id)arg2 fromID:(id)arg3 groupID:(id)arg4 sessionID:(id)arg5 serverDate:(id)arg6 wrapMode:(long long)arg7;	// IMP=0x00100000004df910
- (unsigned long long)encryptionSequenceNumberForGroupID:(id)arg1;	// IMP=0x00100000004df790
- (void)storeEncryptionSequenceNumber:(unsigned long long)arg1 groupID:(id)arg2;	// IMP=0x00100000004df480
- (void)resetKeyMaterialCacheTimerIfNeeded:(id)arg1;	// IMP=0x00100000004df1c0
- (void)resetMKMCacheAfterTimeoutForGroup:(id)arg1;	// IMP=0x00100000004ded60
- (void)reportPrekeyAckStatus:(id)arg1;	// IMP=0x00100000004dec10
- (void)processIncomingPrekeyAckForGroup:(id)arg1;	// IMP=0x00100000004dea20
- (id)realTimeEncryptionPublicKeyData;	// IMP=0x00100000004de370
- (long long)realTimeEncryptionPublicKeyWrappingMode;	// IMP=0x00100000004de2b0
- (id)createRealTimeEncryptionFullIdentityForDevice:(id)arg1 completionBlock:(CDUnknownBlockType)arg2;	// IMP=0x00100000004dd320
- (MISSING_TYPE *)_startKeyRecoveryForMKM:forSKM:forDevice:forGroupID: /* Error: Ran out of types for this method. */;	// IMP=0x00100000004dd080
- (void)_doCheckPendingKeyMaterialsAndSendKeyRecoveryRequestForMKM:(_Bool)arg1 forSKM:(_Bool)arg2 forDevice:(id)arg3 forGroupID:(id)arg4;	// IMP=0x00100000004dbd20
- (void)_sendKeyRecoveryRequestForPendingKeys:(id)arg1 requireMKM:(_Bool)arg2 requireSKM:(_Bool)arg3 forDevice:(id)arg4;	// IMP=0x00100000004db070
- (void)_dispatchRenewPrekeyTimer;	// IMP=0x00100000004dad50
- (void)_sendRenewedPrekeysToGroups;	// IMP=0x00100000004da8f0
- (void)_noteKeyMaterialNotNeededForDestination:(id)arg1 groupID:(id)arg2;	// IMP=0x00100000004da560
- (void)_noteKeyMaterialDidSendToDestination:(id)arg1 groupID:(id)arg2 withSuccess:(_Bool)arg3;	// IMP=0x00100000004d9f80
- (void)_initializeParticipantsWaitingForInitialKeyMaterialsForGroup:(id)arg1;	// IMP=0x00100000004d9700
- (id)_pruneInvalidAndLocalPushTokensFromTokens:(id)arg1;	// IMP=0x00100000004d95d0
- (void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(_Bool)arg4 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg5 requireMKM:(_Bool)arg6 requireSKM:(_Bool)arg7;	// IMP=0x00100000004d9490
- (void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(_Bool)arg4 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg5 requireMKM:(_Bool)arg6 requireSKM:(_Bool)arg7 isFirstSession:(_Bool)arg8;	// IMP=0x00100000004d9330
- (id)_getSetofStandardParticipantsForGroup:(id)arg1;	// IMP=0x00100000004d8d30
- (void)_requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 shouldTrackDistribution:(_Bool)arg4 shouldIncludeCachedPeerKeyMaterial:(_Bool)arg5 shouldGenerateMKM:(_Bool)arg6 requireMKM:(_Bool)arg7 requireSKM:(_Bool)arg8 isFirstSession:(_Bool)arg9;	// IMP=0x00100000004d6810
- (void)reliablyRequestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004d6760
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 shouldGenerateMKM:(_Bool)arg3;	// IMP=0x00100000004d66a0
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2;	// IMP=0x00100000004d65f0
- (void)requestKeyMaterialForGroup:(id)arg1 sessionID:(id)arg2 toSpecificMembers:(id)arg3 requireMKM:(_Bool)arg4 requireSKM:(_Bool)arg5;	// IMP=0x00100000004d6500
- (void)removeAccountForGroup:(id)arg1;	// IMP=0x00100000004d60d0
- (void)setAccount:(id)arg1 fromID:(id)arg2 forGroup:(id)arg3;	// IMP=0x00100000004d5a00
- (id)_ensureGroupStableKeyMaterialCacheForGroup:(id)arg1;	// IMP=0x00100000004d5900
- (id)_locked_ensureGroupMasterKeyMaterialCacheForGroup:(id)arg1;	// IMP=0x00100000004d55b0
- (_Bool)_isUsingAccount:(id)arg1;	// IMP=0x00100000004d5380
- (id)_localDevicePushToken;	// IMP=0x00100000004d5310
- (id)init;	// IMP=0x00100000004d3ba0

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

